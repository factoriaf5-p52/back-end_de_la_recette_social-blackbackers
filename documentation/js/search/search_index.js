var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.399,1,2.892]],["body/controllers/AppController.html",[0,2.296,1,4.748,2,1.852,3,0.198,4,0.178,5,0.178,6,4.622,7,0.516,8,2.057,9,6.512,10,1.163,11,0.014,12,0.651,13,5.311,14,1.659,15,1.116,16,0.349,17,1.122,18,4.493,19,4.622,20,0.198,21,0.3,22,2.687,23,2.077,24,1.659,25,5.311,26,0.011,27,0.011]],["title/modules/AppModule.html",[28,1.452,29,2.892]],["body/modules/AppModule.html",[1,4.172,2,1.731,3,0.129,4,0.116,5,0.116,11,0.014,16,0.417,17,0.735,18,4.355,19,3.026,20,0.129,21,0.196,26,0.008,27,0.008,28,1.797,29,5.851,30,1.605,31,2.291,32,3.026,33,3.026,34,3.026,35,4.65,36,4.65,37,4.65,38,4.65,39,4.65,40,4.65,41,4.65,42,4.355,43,2.511,44,1.759,45,1.759,46,3.477,47,2.637,48,2.935,49,3.477,50,4.319,51,1.946,52,0.909,53,3.477,54,3.477,55,3.477,56,3.477,57,3.477,58,3.477,59,3.026,60,2.507,61,2.056,62,3.477,63,3.477,64,3.477,65,3.477,66,3.477]],["title/injectables/AppService.html",[18,2.517,67,1.049]],["body/injectables/AppService.html",[3,0.207,4,0.186,5,0.186,7,0.54,8,2.113,9,6.613,11,0.013,12,0.681,14,1.734,15,1.147,16,0.294,17,1.173,18,4.247,20,0.207,21,0.313,24,1.734,26,0.011,27,0.011,67,1.769,68,2.453,69,4.83,70,5.549,71,5.549,72,5.549]],["title/classes/Auth.html",[21,0.226,73,2.892]],["body/classes/Auth.html",[3,0.23,4,0.207,5,0.207,11,0.013,20,0.23,21,0.349,26,0.012,27,0.012,73,5.202,74,1.215,75,5.378]],["title/controllers/AuthController.html",[0,1.399,76,2.892]],["body/controllers/AuthController.html",[0,1.524,2,1.524,3,0.163,4,0.146,5,0.146,7,0.425,8,1.815,10,1.273,11,0.014,12,0.713,14,1.815,16,0.369,17,0.924,20,0.163,21,0.247,22,2.212,23,1.71,24,1.815,26,0.01,27,0.01,73,3.152,76,4.19,77,3.804,78,2.446,79,5.811,80,5.811,81,4.371,82,4.366,83,5.811,84,4.371,85,1.953,86,0.985,87,0.682,88,1.815,89,5.057,90,4.371,91,4.661,92,5.811,93,4.371,94,5.057,95,2.446,96,2.323,97,2.446,98,2.446,99,2.446,100,4.097,101,3.804,102,3.804,103,4.561,104,3.804,105,4.371,106,4.371,107,4.371,108,4.371,109,4.371]],["title/modules/AuthModule.html",[28,1.452,35,2.687]],["body/modules/AuthModule.html",[2,1.928,3,0.151,4,0.136,5,0.136,11,0.014,16,0.412,17,0.858,20,0.151,21,0.229,26,0.009,27,0.009,28,2.001,30,1.873,31,2.552,35,5.214,42,4.573,43,2.796,44,2.053,45,2.053,47,2.937,48,3.269,51,2.271,52,1.061,61,3.269,76,4.533,86,0.688,100,4.573,101,3.532,110,3.532,111,4.058,112,3.532,113,4.882,114,4.058,115,4.058,116,1.469,117,2.937,118,2.926,119,3.532,120,2.719,121,2.719,122,3.532,123,4.058,124,4.058,125,4.058,126,2.547,127,3.532,128,1.527,129,3.532,130,3.185,131,3.185,132,3.532,133,3.532,134,3.532]],["title/injectables/AuthService.html",[67,1.049,100,2.517]],["body/injectables/AuthService.html",[3,0.123,4,0.11,5,0.11,7,0.321,8,1.493,11,0.014,12,0.689,14,1.493,16,0.381,17,0.697,20,0.123,21,0.186,23,1.291,24,1.493,26,0.008,27,0.008,52,0.863,67,1.249,68,1.459,82,3.867,85,1.888,86,1.044,87,0.66,88,1.755,89,4.159,91,4.128,94,5.361,100,3,102,2.872,103,3.751,104,2.872,116,1.195,118,2.379,120,2.211,135,2.872,136,3.291,137,4.159,138,4.779,139,2.539,140,2.872,141,3.643,142,4.159,143,4.89,144,3.3,145,4.159,146,4.779,147,3.3,148,2.307,149,4.779,150,3.3,151,2.872,152,1.951,153,0.863,154,1.846,155,3.3,156,3.3,157,2.872,158,2.872,159,2.826,160,2.872,161,2.249,162,2.674,163,3.3,164,3.144,165,3.3,166,3.3,167,3.3,168,3.3,169,1.846,170,4.779,171,3.3,172,3.751,173,2.307,174,3.3,175,3.3,176,4.779,177,3.3,178,3.3,179,3.3,180,3.3,181,2.872,182,3.3,183,3.3,184,1.593,185,3.3,186,4.159,187,3.3,188,3,189,3.3]],["title/classes/Badges.html",[21,0.226,190,2.244]],["body/classes/Badges.html",[3,0.146,4,0.131,5,0.131,7,0.382,10,0.861,11,0.014,12,0.482,15,1.324,16,0.327,20,0.275,21,0.394,26,0.009,27,0.009,52,1.027,74,0.772,86,1.183,87,0.635,116,1.958,117,2.088,128,2.714,153,1.027,154,2.199,161,1.227,162,2.199,169,2.199,184,2.984,190,3.459,191,2.199,192,1.413,193,3.828,194,3.929,195,1.897,196,2.735,197,2.466,198,2.735,199,1.666,200,2.199,201,3.025,202,4.678,203,3.087,204,2.466,205,2.466,206,2.199,207,2.323,208,2.633,209,4.462,210,4.179,211,2.633,212,2.466,213,2.466]],["title/classes/CommentNested.html",[21,0.226,214,2.687]],["body/classes/CommentNested.html",[3,0.113,4,0.102,5,0.102,7,0.296,10,1.176,11,0.014,12,0.658,15,1.273,16,0.314,20,0.113,21,0.357,26,0.007,27,0.007,74,0.599,86,0.517,87,0.844,153,1.179,192,1.179,199,1.912,203,1.348,214,3.975,215,4.277,216,1.913,217,2.864,218,3.004,219,3.004,220,2.392,221,4.277,222,3.048,223,5.472,224,3.048,225,3.048,226,3.904,227,1.024,228,3.252,229,4.565,230,3.87,231,4.946,232,1.802,233,2.043,234,3.597,235,2.667,236,3.252,237,2.738,238,1.706,239,4.068,240,4.213,241,3.539,242,2.392,243,2.392,244,2.392,245,2.392,246,2.392,247,2.392,248,2.392,249,2.392,250,2.392,251,2.392,252,2.392,253,2.392,254,2.392,255,2.392,256,2.392,257,2.392,258,2.392,259,1.913,260,2.198,261,2.392,262,1.802,263,2.392,264,2.392,265,2.198,266,1.802,267,1.706,268,3.252,269,2.392,270,1.62,271,2.392,272,1.802,273,2.392,274,1.802,275,2.392,276,1.802,277,2.392,278,1.802,279,2.392,280,1.802,281,2.392,282,1.802,283,2.392,284,1.472,285,2.392,286,2.392,287,2.392,288,2.198,289,2.198,290,2.198,291,2.392,292,2.198]],["title/guards/CompareIdGuard.html",[293,3.148,294,2.892]],["body/guards/CompareIdGuard.html",[3,0.182,4,0.164,5,0.164,7,0.476,8,1.953,11,0.014,12,0.6,14,1.528,16,0.259,17,1.033,20,0.182,21,0.276,24,1.953,26,0.01,27,0.01,67,1.635,85,1.643,86,0.829,87,0.574,88,1.528,96,2.598,116,1.771,161,2.153,203,2.162,267,3.498,294,4.508,295,3.838,296,4.907,297,4.256,298,6.321,299,5.441,300,6.321,301,4.89,302,4.256,303,3.838,304,4.256,305,4.256,306,4.89,307,4.89,308,4.89,309,4.89,310,4.256]],["title/classes/CreateCommentDto.html",[21,0.226,311,2.892]],["body/classes/CreateCommentDto.html",[3,0.173,4,0.156,5,0.156,7,0.453,10,1.475,11,0.013,12,0.826,15,1.284,16,0.247,20,0.173,21,0.263,26,0.01,27,0.01,74,0.915,87,0.79,192,1.584,217,3.25,218,3.767,219,3.767,226,2.355,227,1.565,260,4.367,284,2.924,311,4.367,312,6.205,313,4.052,314,4.24,315,6.057,316,4.656,317,6.057,318,6.057,319,6.057,320,6.057,321,6.057,322,4.656,323,6.057,324,6.057,325,4.656]],["title/classes/CreateFavoriteDto.html",[21,0.226,326,2.517]],["body/classes/CreateFavoriteDto.html",[3,0.201,4,0.18,5,0.18,7,0.525,10,1.182,11,0.014,12,0.662,16,0.352,20,0.201,21,0.304,26,0.011,27,0.011,74,1.061,87,0.633,153,1.41,192,1.738,199,3.056,226,3.364,227,1.813,239,2.867,314,3.019,326,4.174,327,5.787,328,4.234,329,4.263,330,6.65,331,5.395]],["title/classes/CreateGroupDto.html",[21,0.226,332,2.517]],["body/classes/CreateGroupDto.html",[3,0.161,4,0.144,5,0.144,7,0.42,10,1.421,11,0.014,12,0.796,15,1.257,16,0.382,20,0.161,21,0.366,26,0.01,27,0.01,74,0.849,86,0.977,87,0.812,153,1.506,192,1.506,221,3.112,223,4.677,226,3.501,227,1.45,228,3.112,229,3.112,230,3.112,231,4.99,232,2.552,233,2.892,237,1.992,239,3.446,314,3.629,332,3.617,333,6.023,334,3.112,335,5.66,336,5.091,337,5.091,338,4.316,339,4.316,340,4.316,341,4.316,342,5.762,343,4.316,344,4.316,345,3.756,346,3.756,347,4.316]],["title/classes/CreateIngredientDto.html",[21,0.226,348,2.517]],["body/classes/CreateIngredientDto.html",[3,0.192,4,0.172,5,0.172,7,0.501,10,1.415,11,0.013,12,0.792,15,1.254,16,0.273,20,0.192,21,0.291,26,0.011,27,0.011,74,1.012,86,1.196,87,0.758,192,1.689,226,3.571,227,1.73,239,3.432,314,3.615,348,4.055,349,6.143,350,4.042,351,6.143,352,6.46,353,5.15,354,6.46,355,5.15]],["title/classes/CreateNotificationDto.html",[21,0.226,356,2.517]],["body/classes/CreateNotificationDto.html",[3,0.153,4,0.138,5,0.138,7,0.401,10,1.555,11,0.014,12,0.871,15,1.24,16,0.296,20,0.153,21,0.232,26,0.009,27,0.009,74,0.81,87,0.894,153,1.077,173,2.696,192,1.46,219,3.545,226,3.703,239,3.771,284,2.696,314,3.972,329,3.746,356,3.505,357,6.369,358,3.233,359,6.369,360,5.513,361,5.513,362,5.584,363,5.584,364,5.584,365,4.12,366,4.86,367,4.12,368,4.86,369,5.584,370,4.12,371,4.12,372,5.584,373,4.12,374,4.12,375,4.12]],["title/classes/CreateRecipeDto.html",[21,0.226,238,2.244]],["body/classes/CreateRecipeDto.html",[3,0.082,4,0.074,5,0.074,7,0.214,10,1.568,11,0.014,12,0.878,15,1.262,16,0.265,20,0.082,21,0.308,26,0.006,27,0.006,74,0.432,86,0.742,87,0.881,153,0.917,192,0.917,199,1.856,203,0.972,214,3.347,215,5.224,216,1.381,217,2.411,218,1.231,219,1.231,221,3.156,223,4.93,226,3.665,227,0.739,228,2.53,229,3.935,230,3.156,231,4.4,232,1.301,233,1.474,234,3.347,235,2.075,236,3.156,237,2.817,238,1.963,239,3.805,240,4.565,241,3.435,242,2.754,243,2.754,244,2.754,245,2.754,246,2.754,247,2.754,248,2.754,249,2.754,250,2.754,251,2.754,252,2.754,253,2.754,254,2.754,255,2.754,256,2.754,257,2.754,258,2.754,259,2.747,260,1.586,261,1.726,262,2.588,263,2.754,264,1.726,265,3.156,266,2.588,267,1.963,268,3.601,269,2.754,270,2.325,271,1.726,272,2.588,273,1.726,274,2.588,275,1.726,276,2.588,277,1.726,278,2.588,279,1.726,280,2.588,281,1.726,282,2.588,283,2.754,284,1.694,285,2.754,286,2.754,287,2.754,288,2.53,289,2.53,290,2.53,291,2.754,292,3.156,314,4.007,376,2.2,377,2.2,378,2.2,379,2.2,380,3.509,381,2.2,382,2.2,383,2.2,384,2.2,385,2.2,386,2.2,387,2.2,388,2.2,389,2.2,390,2.2,391,2.2,392,2.2,393,2.2,394,2.2,395,2.2,396,2.2,397,2.2,398,2.2,399,2.2,400,2.2,401,2.2,402,2.2]],["title/classes/CreateUserDto.html",[21,0.226,403,2.517]],["body/classes/CreateUserDto.html",[3,0.117,4,0.105,5,0.105,7,0.305,10,1.636,11,0.014,12,0.916,15,1.305,16,0.244,20,0.117,21,0.177,26,0.008,27,0.008,74,0.617,87,0.877,162,3.056,169,3.056,184,2.637,190,3.749,192,1.205,198,3.044,199,2.551,200,1.757,201,3.367,204,3.428,205,3.428,206,3.056,210,4.458,212,3.428,226,2.332,227,1.055,239,1.668,268,3.323,314,4.473,329,2.726,368,4.011,403,2.893,404,6.576,405,2.464,406,5.461,407,4.609,408,4.609,409,3.14,410,4.609,411,3.14,412,4.609,413,3.14,414,3.14,415,3.14,416,6.017,417,3.14,418,4.609,419,3.14,420,3.14,421,4.609,422,3.14,423,4.609,424,3.14,425,4.609,426,3.14,427,2.464]],["title/classes/Favorite.html",[21,0.226,428,2.892]],["body/classes/Favorite.html",[3,0.23,4,0.207,5,0.207,11,0.013,20,0.23,21,0.349,26,0.012,27,0.012,74,1.215,428,5.202,429,5.378]],["title/classes/Favorites.html",[21,0.226,198,2.029]],["body/classes/Favorites.html",[3,0.146,4,0.131,5,0.131,7,0.382,10,0.861,11,0.014,12,0.482,15,1.324,16,0.327,20,0.275,21,0.394,26,0.009,27,0.009,52,1.027,74,0.772,86,1.048,87,0.635,116,1.958,117,2.088,128,2.714,153,1.027,154,2.199,161,1.227,162,2.199,169,2.199,184,2.984,190,3.025,191,2.199,192,1.413,193,3.828,195,1.897,196,2.735,197,2.466,198,3.127,199,2.621,200,2.199,201,3.025,202,4.678,203,3.087,204,2.466,205,2.466,206,2.199,207,2.323,208,2.633,209,4.462,210,4.179,211,2.633,212,2.466,213,2.466,430,3.929]],["title/controllers/FavoritesController.html",[0,1.399,431,2.892]],["body/controllers/FavoritesController.html",[0,1.231,2,1.231,3,0.131,4,0.118,5,0.118,7,0.343,8,1.567,10,1.47,11,0.014,12,0.823,14,2.097,15,1.264,16,0.337,17,0.746,20,0.131,21,0.199,22,1.786,23,1.381,24,2.097,26,0.008,27,0.008,78,1.976,85,2.135,86,1.077,87,0.746,88,1.985,95,3.266,96,2.666,97,1.976,98,1.976,99,1.976,198,1.786,326,4.378,431,3.618,432,3.073,433,1.817,434,2.694,435,2.127,436,2.127,437,2.127,438,3.073,439,3.531,440,3.531,441,1.497,442,2.967,443,3.531,444,2.728,445,1.497,446,3.149,447,3.531,448,1.497,449,4.913,450,3.149,451,3.531,452,3.663,453,3.073,454,1.63,455,3.938,456,1.497,457,3.531,458,2.366,459,3.531,460,3.531,461,2.088,462,3.531,463,2.088,464,3.531,465,2.088,466,3.531]],["title/modules/FavoritesModule.html",[28,1.452,36,2.687]],["body/modules/FavoritesModule.html",[2,2.269,3,0.194,4,0.174,5,0.174,11,0.014,16,0.376,17,1.101,20,0.194,21,0.294,26,0.011,27,0.011,28,2.356,30,2.405,31,3.004,36,5.228,43,3.292,44,2.635,45,2.635,47,3.457,431,5.116,452,4.897,453,4.533,467,4.533,468,4.533,469,5.209,470,5.209]],["title/injectables/FavoritesService.html",[67,1.049,452,2.517]],["body/injectables/FavoritesService.html",[3,0.139,4,0.125,5,0.125,7,0.364,8,1.634,11,0.014,12,0.842,14,2.279,15,1.163,16,0.319,17,0.791,20,0.139,21,0.211,24,2.144,26,0.009,27,0.009,67,1.367,68,1.656,85,2.192,86,1.105,87,0.766,88,2.038,173,1.808,198,1.895,237,3.49,326,4.307,428,4.703,433,1.894,434,2.765,435,2.217,436,2.217,437,2.217,438,4.551,441,2.217,444,2.78,445,2.217,448,2.217,449,4.889,452,3.283,454,1.729,455,4.105,456,1.588,471,3.259,472,3.745,473,3.745,474,3.745,475,3.745,476,3.745,477,5.386,478,3.745,479,2.939,480,2.939]],["title/classes/GetGroupFilterDto.html",[21,0.226,481,3.148]],["body/classes/GetGroupFilterDto.html",[3,0.194,4,0.174,5,0.174,7,0.507,11,0.013,12,0.87,15,1.322,20,0.194,21,0.294,26,0.011,27,0.011,74,1.024,87,0.833,88,2.437,192,1.701,334,3.756,335,5.569,336,5.569,337,5.569,481,5.107,482,6.468,483,5.209,484,5.209,485,5.209]],["title/classes/GetRecipiesFilterDto.html",[21,0.226,486,2.892]],["body/classes/GetRecipiesFilterDto.html",[3,0.143,4,0.128,5,0.128,7,0.372,11,0.013,12,0.953,15,1.347,20,0.143,21,0.216,26,0.009,27,0.009,74,0.753,86,1.034,87,0.912,88,2.56,192,1.389,216,2.404,217,2.944,237,3.304,262,3.606,266,3.606,270,3.24,272,3.606,274,3.606,276,3.606,278,3.606,280,3.606,282,3.606,486,3.83,487,6.823,488,3.83,489,3.83,490,3.83,491,3.83,492,3.333,493,3.83,494,3.83,495,3.83,496,3.83,497,3.83,498,3.83]],["title/classes/Group.html",[21,0.226,499,2.687]],["body/classes/Group.html",[3,0.174,4,0.156,5,0.156,7,0.454,10,1.477,11,0.014,12,0.827,15,1.285,16,0.357,20,0.251,21,0.264,26,0.01,27,0.01,52,1.221,74,0.919,87,0.838,128,2.284,153,1.221,161,1.459,192,1.587,193,3.728,195,2.256,196,3.071,335,5.293,336,5.293,337,5.293,345,4.066,346,4.066,499,4.519,500,3.369,501,4.672,502,4.672,503,4.672,504,3.667,505,3.667,506,4.066]],["title/controllers/GroupController.html",[0,1.399,507,2.892]],["body/controllers/GroupController.html",[0,1.231,2,1.231,3,0.131,4,0.118,5,0.118,7,0.343,8,1.567,10,1.47,11,0.014,12,0.823,14,2.097,15,1.264,16,0.337,17,0.746,20,0.131,21,0.199,22,1.786,23,1.381,24,2.097,26,0.008,27,0.008,78,1.976,85,2.135,86,1.077,87,0.746,88,1.985,95,3.266,96,2.666,97,1.976,98,1.976,99,1.976,332,4.378,433,1.817,434,2.694,435,2.127,436,2.127,437,2.127,441,1.497,442,2.967,444,2.728,445,1.497,446,3.149,448,1.497,450,3.149,454,1.63,456,1.497,458,2.366,461,2.088,463,2.088,465,2.088,499,2.366,507,3.618,508,3.073,509,3.073,510,3.531,511,3.531,512,3.531,513,3.531,514,4.913,515,3.531,516,3.663,517,3.073,518,3.938,519,3.531,520,3.531,521,3.531,522,3.531,523,3.531,524,3.531]],["title/modules/GroupModule.html",[28,1.452,37,2.687]],["body/modules/GroupModule.html",[2,2.242,3,0.19,4,0.171,5,0.171,11,0.014,16,0.391,17,1.08,20,0.19,21,0.288,26,0.011,27,0.011,28,2.328,30,2.359,31,2.968,37,5.203,43,3.253,44,2.586,45,2.586,47,3.416,51,2.86,52,1.336,507,5.072,516,4.874,517,4.448,525,4.448,526,4.448,527,5.111,528,5.111]],["title/injectables/GroupService.html",[67,1.049,516,2.517]],["body/injectables/GroupService.html",[3,0.109,4,0.098,5,0.098,7,0.286,8,1.37,11,0.014,12,0.802,14,1.947,15,1.207,16,0.359,17,0.62,20,0.109,21,0.166,23,1.148,24,1.947,26,0.007,27,0.007,52,0.768,67,1.147,68,1.298,85,2.094,86,1.056,87,0.732,88,1.947,136,3.702,139,2.33,141,3.444,148,2.535,152,1.736,153,1.373,159,1.736,161,1.947,164,3.487,173,1.418,188,2.753,203,1.298,332,3.912,433,1.588,434,2.469,435,1.859,436,1.859,437,1.859,441,1.859,444,2.278,445,1.859,448,1.859,454,1.355,456,1.245,499,1.968,504,2.304,509,3.817,514,4.541,516,2.753,518,3.442,529,2.555,530,2.936,531,2.936,532,4.386,533,2.936,534,2.936,535,3.444,536,2.936,537,2.936,538,2.936,539,2.936,540,2.936,541,2.936,542,2.936,543,2.936,544,5.25,545,2.936,546,2.304,547,2.304,548,2.936,549,2.555,550,2.555,551,2.304,552,2.936,553,1.843,554,3.518,555,1.968,556,5.25,557,2.936,558,2.117,559,2.117,560,4.386,561,2.936,562,4.386,563,2.936]],["title/classes/Groups.html",[21,0.226,201,2.244]],["body/classes/Groups.html",[3,0.146,4,0.131,5,0.131,7,0.382,10,0.861,11,0.014,12,0.482,15,1.324,16,0.327,20,0.275,21,0.394,26,0.009,27,0.009,52,1.027,74,0.772,86,1.183,87,0.635,116,1.958,117,2.088,128,2.714,153,1.027,154,2.199,161,1.227,162,2.199,169,2.199,184,2.984,190,3.025,191,2.199,192,1.413,193,3.828,195,1.897,196,2.735,197,2.466,198,2.735,199,1.666,200,2.199,201,3.459,202,4.678,203,3.087,204,2.466,205,2.466,206,2.199,207,2.323,208,2.633,209,4.462,210,4.179,211,2.633,212,2.466,213,2.466,564,3.929]],["title/classes/Ingredient.html",[21,0.226,565,2.131]],["body/classes/Ingredient.html",[3,0.184,4,0.165,5,0.165,7,0.481,10,1.379,11,0.014,12,0.772,15,1.236,16,0.334,20,0.258,21,0.279,26,0.01,27,0.01,52,1.292,74,0.972,86,1.174,87,0.813,128,2.368,153,1.292,161,1.544,192,1.646,193,3.636,195,2.387,196,3.185,351,6.028,565,3.68,566,3.565,567,4.944,568,4.944,569,4.303,570,3.565,571,4.303]],["title/controllers/IngredientController.html",[0,1.399,572,2.892]],["body/controllers/IngredientController.html",[0,1.231,2,1.231,3,0.131,4,0.118,5,0.118,7,0.343,8,1.567,10,1.47,11,0.014,12,0.823,14,2.097,15,1.264,16,0.337,17,0.746,20,0.131,21,0.199,22,1.786,23,1.381,24,2.097,26,0.008,27,0.008,78,1.976,85,2.135,86,1.077,87,0.746,88,1.985,95,3.266,96,2.666,97,1.976,98,1.976,99,1.976,348,4.378,433,1.817,434,2.694,435,2.127,436,2.127,437,2.127,441,1.497,442,2.967,444,2.728,445,1.497,446,3.149,448,1.497,450,3.149,454,1.63,456,1.497,458,2.366,461,2.088,463,2.088,465,2.088,565,1.876,572,3.618,573,3.073,574,3.073,575,3.531,576,3.531,577,3.531,578,3.531,579,4.913,580,3.531,581,3.663,582,3.073,583,3.938,584,3.531,585,3.531,586,3.531,587,3.531,588,3.531,589,3.531]],["title/modules/IngredientModule.html",[28,1.452,38,2.687]],["body/modules/IngredientModule.html",[2,2.165,3,0.18,4,0.162,5,0.162,11,0.014,16,0.396,17,1.022,20,0.18,21,0.273,26,0.01,27,0.01,28,2.248,30,2.234,31,2.866,38,5.13,43,3.141,44,2.448,45,2.448,47,3.299,48,2.861,51,2.707,52,1.265,86,0.82,126,3.037,128,1.82,565,2.571,570,4.477,572,4.944,581,4.805,582,4.211,590,4.211,591,4.211,592,4.838,593,4.838,594,4.211,595,4.838]],["title/classes/IngredientNested.html",[21,0.226,234,2.687]],["body/classes/IngredientNested.html",[3,0.116,4,0.104,5,0.104,7,0.304,10,1.006,11,0.013,12,0.563,15,1.247,16,0.318,20,0.116,21,0.361,26,0.008,27,0.008,74,0.614,86,0.53,87,0.832,153,1.201,192,1.201,199,2.545,203,1.382,214,3.65,215,3.927,216,1.962,217,2.218,218,1.749,219,1.749,220,2.453,221,3.927,223,5.38,226,3.92,227,1.05,228,3.312,229,4.612,230,3.927,231,4.985,232,1.848,233,2.094,234,4.023,235,2.716,236,4.329,237,2.953,238,1.749,239,4.086,240,4.275,241,3.605,242,2.453,243,2.453,244,2.453,245,2.453,246,2.453,247,2.453,248,2.453,249,2.453,250,2.453,251,2.453,252,2.453,253,2.453,254,2.453,255,2.453,256,2.453,257,2.453,258,2.453,259,1.962,260,2.253,261,2.453,262,1.848,263,2.453,264,2.453,265,2.253,266,1.848,267,1.749,268,3.312,269,2.453,270,1.66,271,2.453,272,1.848,273,2.453,274,1.848,275,2.453,276,1.848,277,2.453,278,1.848,279,2.453,280,1.848,281,2.453,282,1.848,283,2.453,284,1.509,285,2.453,286,2.453,287,2.453,288,2.253,289,2.253,290,2.253,291,2.453,292,2.253,492,2.72,596,3.125,597,3.125,598,3.125]],["title/injectables/IngredientService.html",[67,1.049,581,2.517]],["body/injectables/IngredientService.html",[3,0.126,4,0.113,5,0.113,7,0.33,8,1.522,11,0.014,12,0.844,14,2.149,15,0.967,16,0.364,17,0.716,20,0.126,21,0.191,23,1.326,24,2.064,26,0.008,27,0.008,52,0.886,67,1.274,68,1.499,85,2.221,86,1.12,87,0.776,88,2.064,136,2.755,139,2.589,141,3.689,148,1.637,152,2.005,153,0.886,159,2.005,161,1.059,164,1.897,173,1.637,237,3.41,348,4.148,433,1.765,434,2.645,435,2.066,436,2.066,437,2.066,441,2.066,444,2.691,445,2.066,448,2.066,454,1.565,456,1.437,477,4.478,479,2.661,480,2.661,565,3.314,574,4.241,579,4.75,581,3.059,583,3.825,594,2.95,599,2.95,600,3.39,601,3.39,602,4.874,603,3.39,604,3.39,605,3.39,606,3.39,607,3.39,608,3.39,609,3.39,610,3.39,611,3.39,612,3.39]],["title/injectables/JwtAuthGuard.html",[67,1.049,613,2.517]],["body/injectables/JwtAuthGuard.html",[3,0.215,4,0.193,5,0.193,11,0.013,16,0.368,17,1.223,20,0.215,21,0.326,26,0.011,27,0.011,67,1.814,68,2.558,613,4.355,614,3.877,615,5.035,616,5.786,617,4.541,618,2.927,619,5.786]],["title/injectables/JwtStrategy.html",[67,1.049,113,2.687]],["body/injectables/JwtStrategy.html",[3,0.164,4,0.148,5,0.148,7,0.429,8,1.827,11,0.014,12,0.717,14,1.379,16,0.37,17,0.933,20,0.164,21,0.249,24,1.827,26,0.01,27,0.01,67,1.529,68,1.951,85,1.483,86,0.748,87,0.518,88,1.379,113,3.919,121,2.958,122,3.842,131,3.464,136,3.372,139,3.485,151,3.842,172,3.464,173,2.131,181,5.708,186,3.842,206,2.47,310,3.842,535,3.458,617,3.464,618,2.233,620,3.842,621,5.849,622,4.414,623,6.559,624,4.414,625,3.842,626,4.414,627,4.414,628,3.842,629,3.842,630,4.414,631,4.414,632,4.414,633,4.414,634,4.414,635,4.414,636,4.414,637,4.414,638,4.414,639,4.414,640,4.414,641,4.414]],["title/classes/LoginAuthDto.html",[21,0.226,82,2.517]],["body/classes/LoginAuthDto.html",[3,0.193,4,0.173,5,0.173,7,0.505,10,1.422,11,0.013,12,0.796,15,1.258,16,0.275,20,0.193,21,0.366,26,0.011,27,0.011,74,1.02,82,4.074,87,0.762,162,3.963,169,3.963,192,1.697,232,3.069,642,6.164,643,4.073,644,7.083,645,5.189,646,5.189,647,5.189,648,5.189,649,5.189,650,5.189,651,5.189]],["title/classes/Notification.html",[21,0.226,652,2.517]],["body/classes/Notification.html",[3,0.156,4,0.14,5,0.14,7,0.408,10,1.564,11,0.014,12,0.876,15,1.247,16,0.339,20,0.238,21,0.237,26,0.009,27,0.009,52,1.097,74,0.825,87,0.909,128,2.127,153,1.478,161,1.311,192,1.478,193,3.631,195,2.026,196,2.86,219,3.578,329,3.781,359,6.655,360,5.565,361,5.565,652,4.014,653,3.026,654,4.934,655,4.196,656,3.549,657,4.196,658,4.196,659,4.196,660,4.196,661,3.652,662,3.026,663,3.652]],["title/controllers/NotificationController.html",[0,1.399,664,2.892]],["body/controllers/NotificationController.html",[0,1.219,2,1.219,3,0.13,4,0.117,5,0.117,7,0.34,8,1.556,10,1.464,11,0.014,12,0.82,14,2.089,15,1.261,16,0.335,17,0.739,20,0.13,21,0.197,22,1.768,23,1.367,24,2.089,26,0.008,27,0.008,78,1.956,85,2.125,86,1.072,87,0.742,88,1.976,95,1.956,96,2.646,97,1.956,98,1.956,99,1.956,136,2.802,148,1.687,356,4.363,433,1.803,434,2.682,435,2.112,436,2.112,437,2.112,441,1.482,442,2.945,444,2.719,445,1.482,446,3.126,448,1.482,450,3.126,454,1.613,456,1.482,458,2.342,461,2.067,463,2.067,465,2.067,652,2.194,664,3.591,665,3.042,666,3.042,667,4.335,668,3.495,669,3.495,670,3.495,671,3.495,672,4.9,673,3.495,674,3.642,675,3.042,676,3.909,677,3.495,678,3.495,679,3.495,680,3.495,681,3.495,682,3.495]],["title/injectables/NotificationService.html",[67,1.049,674,2.517]],["body/injectables/NotificationService.html",[3,0.115,4,0.104,5,0.104,7,0.301,8,1.425,11,0.014,12,0.818,14,1.991,15,1.224,16,0.353,17,0.654,20,0.115,21,0.175,23,1.211,24,1.991,26,0.008,27,0.008,52,0.81,67,1.193,68,1.369,85,2.141,86,1.08,87,0.748,88,1.991,136,3.735,139,2.424,141,3.535,148,2.886,152,1.831,153,1.193,159,1.831,161,1.991,164,3.566,173,1.495,188,1.944,356,4,433,1.652,434,2.534,435,1.934,436,1.934,437,1.934,441,1.934,444,2.119,445,1.934,448,1.934,454,1.43,456,1.313,535,2.698,553,1.944,554,2.075,555,2.075,652,1.944,666,3.971,672,4.619,674,2.864,676,3.581,683,2.695,684,3.097,685,3.097,686,4.563,687,3.097,688,3.097,689,3.097,690,3.097,691,3.097,692,2.695,693,3.097,694,3.097,695,3.097,696,3.097,697,5.418,698,3.097,699,3.097,700,4.563,701,3.097,702,4.563,703,3.097,704,4.563,705,3.097]],["title/classes/Notification_list.html",[21,0.226,200,2.244]],["body/classes/Notification_list.html",[3,0.146,4,0.131,5,0.131,7,0.382,10,0.861,11,0.014,12,0.482,15,1.324,16,0.327,20,0.275,21,0.394,26,0.009,27,0.009,52,1.027,74,0.772,86,1.183,87,0.635,116,1.958,117,2.088,128,2.714,153,1.027,154,2.199,161,1.227,162,2.199,169,2.199,184,2.984,190,3.025,191,2.199,192,1.413,193,3.828,195,1.897,196,2.735,197,2.466,198,2.735,199,1.666,200,3.025,201,3.025,202,4.678,203,3.087,204,2.466,205,2.466,206,2.199,207,2.323,208,2.633,209,4.462,210,4.179,211,2.633,212,2.466,213,2.466,706,3.929]],["title/modules/NotificationsModule.html",[28,1.452,39,2.687]],["body/modules/NotificationsModule.html",[2,2.165,3,0.18,4,0.162,5,0.162,11,0.014,16,0.396,17,1.022,20,0.18,21,0.273,26,0.01,27,0.01,28,2.248,30,2.234,31,2.866,39,5.13,43,3.141,44,2.448,45,2.448,47,3.299,48,2.861,51,2.707,52,1.265,86,0.82,126,3.037,128,1.82,652,3.037,662,4.477,664,4.944,674,4.805,675,4.211,692,4.211,707,4.211,708,4.211,709,4.838,710,4.838,711,4.838]],["title/injectables/ParseObjectIdPipe.html",[67,1.049,712,2.687]],["body/injectables/ParseObjectIdPipe.html",[3,0.184,4,0.165,5,0.165,7,0.481,8,1.967,11,0.014,12,0.606,14,1.544,16,0.334,17,1.045,20,0.184,21,0.279,24,1.544,26,0.01,27,0.01,67,1.646,68,2.186,85,1.661,86,0.838,87,0.58,88,1.544,153,1.646,161,1.544,172,3.88,173,2.387,235,3.723,267,2.766,303,3.88,329,2.923,444,2.462,656,3.952,712,4.219,713,4.539,714,4.303,715,6.295,716,6.295,717,4.944,718,4.941,719,6.295,720,4.944,721,6.295,722,4.944,723,4.944]],["title/classes/Recipe.html",[21,0.226,284,1.936]],["body/classes/Recipe.html",[3,0.099,4,0.089,5,0.089,7,0.259,10,1.635,11,0.014,12,0.916,15,1.305,16,0.262,20,0.222,21,0.279,26,0.007,27,0.007,52,0.697,74,0.524,86,0.839,87,0.898,116,1.476,128,2.086,148,1.968,153,1.066,161,0.833,192,1.066,193,3.76,195,1.287,196,2.063,199,1.13,203,3.18,207,3.279,217,2.39,218,1.492,219,1.492,235,2.411,236,1.922,237,3.027,259,3.107,262,2.928,265,3.57,266,2.928,267,2.281,270,2.63,272,2.928,274,2.928,276,2.928,278,2.928,280,2.928,282,2.928,284,2.39,292,3.57,565,1.416,654,3.57,724,1.922,725,6.032,726,2.666,727,2.666,728,3.57,729,2.666,730,2.666,731,2.666,732,2.666,733,2.666,734,2.666,735,2.666,736,2.666,737,1.673,738,3.2,739,2.666,740,2.666,741,2.666,742,2.666,743,2.666,744,2.666,745,2.092,746,2.666,747,2.666,748,2.666,749,2.32,750,2.666,751,2.092,752,2.666,753,1.922,754,2.32]],["title/classes/RecipeComment.html",[21,0.226,728,2.892]],["body/classes/RecipeComment.html",[3,0.17,4,0.153,5,0.153,7,0.444,10,1.46,11,0.014,12,0.818,15,1.199,16,0.353,20,0.248,21,0.257,26,0.01,27,0.01,52,1.193,74,0.897,87,0.83,116,2.414,118,3.29,128,2.249,153,1.563,161,1.425,192,1.563,193,3.546,195,2.203,196,3.024,217,3.219,218,3.958,219,3.73,654,4.31,728,4.31,737,2.864,738,4.691,749,3.97,755,3.29,756,4.562,757,4.562,758,4.562,759,3.97,760,3.581,761,3.97]],["title/controllers/RecipeController.html",[0,1.399,762,2.892]],["body/controllers/RecipeController.html",[0,0.451,2,0.451,3,0.048,4,0.043,5,0.043,7,0.126,8,0.704,10,1.442,11,0.014,12,0.807,14,2.056,15,1.347,16,0.311,17,0.274,20,0.048,21,0.073,22,0.655,23,0.506,24,2.056,26,0.004,27,0.004,61,1.332,78,0.724,85,2.147,86,1.13,87,0.75,88,1.996,95,0.724,96,1.9,97,0.724,98,0.724,99,0.724,136,3.784,148,3.178,161,0.934,164,3.632,184,0.625,197,0.813,217,1.726,218,2.001,227,0.435,237,2.45,238,2.674,262,1.768,266,2.114,267,1.673,270,1.9,272,2.114,274,2.114,276,1.768,278,2.114,280,1.768,282,2.114,284,2.147,311,2.578,433,0.816,434,1.516,435,0.955,436,0.955,437,0.955,441,0.549,442,1.332,444,2.076,445,0.549,448,0.549,454,0.598,456,0.549,461,0.766,463,0.766,465,0.766,613,0.813,614,0.868,625,1.127,656,0.813,667,1.127,712,2.715,713,0.933,737,1.877,762,1.624,763,1.127,764,2.602,765,2.602,766,2.602,767,2.602,768,2.602,769,2.602,770,2.602,771,2.602,772,2.602,773,2.602,774,2.602,775,2.602,776,3.112,777,1.127,778,2.253,779,1.295,780,1.295,781,5.521,782,1.295,783,1.295,784,5.71,785,2.253,786,1.295,787,1.127,788,2.253,789,1.295,790,5.87,791,1.127,792,2.253,793,1.295,794,1.127,795,2.253,796,1.295,797,1.127,798,2.253,799,1.295,800,1.127,801,2.253,802,1.295,803,1.295,804,3.576,805,3.576,806,3.576,807,2.253,808,1.295,809,1.127,810,2.253,811,1.295,812,1.127,813,2.253,814,1.295,815,1.127,816,2.253,817,1.295,818,1.127,819,2.253,820,1.295,821,1.127,822,2.253,823,1.295,824,1.295,825,1.295,826,1.295,827,1.295,828,1.295,829,1.295,830,3.392,831,1.295,832,1.295,833,1.295,834,1.016,835,1.877,836,1.127,837,1.768,838,1.127,839,3.526,840,1.016,841,1.127,842,1.295,843,1.295,844,1.016,845,1.295,846,1.127,847,1.295,848,2.806,849,1.295,850,1.295,851,2.99,852,2.99,853,2.99,854,1.295,855,1.295,856,1.295,857,1.295,858,1.961,859,1.295,860,1.295,861,1.295,862,2.253,863,1.295,864,1.295,865,1.295,866,1.295,867,1.295,868,1.295,869,1.295,870,1.295,871,1.295,872,1.295,873,1.295,874,1.295,875,1.295,876,1.295,877,1.295,878,1.295,879,1.127,880,1.295,881,5.521,882,1.295,883,1.295,884,1.295,885,1.295,886,1.295,887,1.295,888,1.295,889,1.295,890,1.295,891,1.295,892,1.295,893,1.295,894,1.295,895,1.295,896,1.295]],["title/modules/RecipeModule.html",[28,1.452,40,2.687]],["body/modules/RecipeModule.html",[2,2.117,3,0.174,4,0.156,5,0.156,11,0.014,16,0.409,17,0.987,20,0.174,21,0.264,26,0.01,27,0.01,28,2.198,30,2.157,31,2.802,40,5.082,43,3.071,44,2.364,45,2.364,47,3.225,48,2.763,51,2.614,52,1.221,59,4.066,60,3.369,61,2.763,86,0.792,126,2.932,128,1.758,284,2.256,753,4.377,762,4.862,835,4.76,836,4.066,846,4.066,897,4.066,898,4.066,899,4.672,900,4.672,901,4.066,902,4.066]],["title/injectables/RecipeService.html",[67,1.049,835,2.517]],["body/injectables/RecipeService.html",[3,0.045,4,0.041,5,0.041,7,0.118,8,0.664,11,0.014,12,0.803,14,2.017,15,1.281,16,0.259,17,0.256,20,0.045,21,0.068,23,0.474,24,2.017,26,0.004,27,0.004,52,0.317,67,0.556,68,0.536,85,2.138,86,1.123,87,0.747,88,1.987,136,3.755,139,1.13,141,2.019,148,1.876,152,0.716,153,0.743,159,0.716,161,1.955,164,3.613,173,0.585,188,3.692,199,0.514,203,0.94,217,1.371,218,1.589,238,2.174,262,1.68,266,1.257,270,1.509,272,1.68,274,1.68,276,1.68,278,1.68,280,1.68,282,1.68,284,2.84,288,4.241,433,0.77,434,1.447,435,0.901,436,0.901,437,0.901,441,0.901,444,1.52,445,0.901,448,0.901,454,0.559,456,0.514,486,2.462,535,4.143,546,1.669,547,1.669,549,1.054,550,1.054,551,1.669,553,3.595,554,4.034,555,0.812,558,0.874,559,0.874,737,0.76,745,1.669,764,1.85,765,1.85,766,1.85,767,1.85,768,1.85,769,1.85,770,1.85,771,1.85,772,1.85,773,1.85,774,1.85,775,1.85,776,2.971,777,1.85,787,1.85,790,5.767,791,1.85,794,1.85,797,1.85,800,1.85,809,1.85,812,1.85,815,1.85,818,1.85,821,1.85,830,3.09,835,1.334,837,2.229,858,1.85,879,1.85,901,1.054,902,1.054,903,1.054,904,1.212,905,1.212,906,2.126,907,1.212,908,2.126,909,1.212,910,1.212,911,1.212,912,1.212,913,1.212,914,1.212,915,1.212,916,2.126,917,1.212,918,1.212,919,1.212,920,1.212,921,1.212,922,1.212,923,1.212,924,1.212,925,1.212,926,1.212,927,1.212,928,1.212,929,1.212,930,1.212,931,1.212,932,7.4,933,1.212,934,2.126,935,5.728,936,2.84,937,2.126,938,1.212,939,2.126,940,1.212,941,1.212,942,5.557,943,1.212,944,1.212,945,2.126,946,1.212,947,1.212,948,1.212,949,1.212,950,1.212,951,1.212,952,1.212,953,1.212,954,1.212,955,1.212,956,1.212,957,1.212,958,1.212,959,1.212,960,1.212,961,1.212,962,1.212,963,1.212,964,1.212,965,1.212,966,1.212,967,1.212,968,1.212,969,1.212,970,1.212,971,1.212]],["title/classes/RegisterAuthDto.html",[21,0.226,91,2.687]],["body/classes/RegisterAuthDto.html",[3,0.196,4,0.176,5,0.176,7,0.512,10,1.154,11,0.014,12,0.646,15,1.111,16,0.378,20,0.196,21,0.37,26,0.011,27,0.011,74,1.036,82,3.308,87,0.618,91,4.391,103,4.136,137,4.586,192,1.713,206,3.991,227,1.771,232,3.116,618,2.666,643,4.136,972,5.703,973,7.133,974,5.27,975,2.949,976,5.27]],["title/guards/RolesGuard.html",[61,2.372,293,3.148]],["body/guards/RolesGuard.html",[3,0.152,4,0.137,5,0.137,7,0.398,8,1.737,11,0.014,12,0.682,14,1.279,16,0.387,17,0.865,20,0.152,21,0.231,22,2.072,24,1.737,26,0.009,27,0.009,60,2.953,61,3.289,67,1.454,85,1.869,86,0.943,87,0.653,88,1.737,116,2.287,118,2.953,139,2.176,161,1.973,184,1.977,203,1.81,267,3.112,295,3.214,298,6.165,299,3.564,300,5.896,302,4.84,303,3.214,305,3.564,535,3.289,977,3.564,978,4.095,979,7.306,980,4.095,981,4.095,982,6.315,983,3.564,984,3.214,985,4.095,986,4.095,987,5.561,988,4.095,989,4.095,990,4.095,991,4.095,992,4.095,993,4.095,994,4.095]],["title/classes/ShoppingList.html",[21,0.226,995,2.687]],["body/classes/ShoppingList.html",[3,0.181,4,0.163,5,0.163,7,0.474,10,1.366,11,0.014,12,0.765,16,0.33,20,0.232,21,0.275,26,0.01,27,0.01,52,1.274,74,0.958,87,0.732,116,2.259,128,2.347,153,1.631,161,1.522,192,1.631,193,2.353,195,2.353,199,2.917,235,3.689,237,2.25,270,3.314,329,4.068,565,2.589,654,4.498,737,3.915,738,4.896,751,3.825,995,4.18,996,3.825,997,4.873,998,4.873,999,4.873,1000,4.873,1001,4.241,1002,3.514,1003,4.241]],["title/controllers/ShoppingListController.html",[0,1.399,1004,2.892]],["body/controllers/ShoppingListController.html",[0,1.092,2,1.092,3,0.117,4,0.105,5,0.105,7,0.305,8,1.437,10,1.402,11,0.014,12,0.785,14,2,15,1.228,16,0.367,17,0.662,20,0.117,21,0.177,22,1.585,23,1.225,24,2,26,0.008,27,0.008,78,1.753,85,2.02,86,1.019,87,0.705,88,1.878,95,2.575,96,2.445,97,1.753,98,1.753,99,1.753,136,3.743,148,3.091,294,3.318,296,2.459,304,2.726,434,2.548,435,1.951,436,1.951,437,1.951,441,1.328,442,2.721,444,2.706,445,1.328,446,2.888,448,1.328,450,2.888,456,1.328,461,1.852,463,1.852,465,1.852,613,1.966,614,2.099,656,1.966,712,3.083,713,2.259,834,2.459,840,2.459,841,2.726,848,3.611,1004,3.318,1005,2.726,1006,3.132,1007,4.601,1008,4.004,1009,3.132,1010,3.132,1011,3.132,1012,4.756,1013,3.132,1014,2.726,1015,4.202,1016,3.132,1017,3.132,1018,3.132,1019,3.423,1020,2.726,1021,2.726,1022,3.611,1023,3.132,1024,3.132,1025,3.132,1026,3.132,1027,3.132,1028,3.132,1029,3.132,1030,3.132]],["title/modules/ShoppingListModule.html",[28,1.452,41,2.687]],["body/modules/ShoppingListModule.html",[2,2.075,3,0.169,4,0.152,5,0.152,11,0.014,16,0.406,17,0.958,20,0.169,21,0.256,26,0.01,27,0.01,28,2.155,30,2.092,31,2.747,41,5.04,43,3.011,44,2.293,45,2.293,47,3.162,48,2.68,51,2.536,52,1.185,86,0.768,119,3.944,120,3.037,121,3.037,126,2.844,128,1.705,129,3.944,130,3.557,131,3.557,132,3.944,133,3.944,134,3.944,995,3.037,1002,4.291,1004,4.791,1019,4.721,1020,3.944,1031,3.944,1032,3.944,1033,4.532,1034,4.532,1035,3.944,1036,4.532,1037,4.532]],["title/injectables/ShoppingListService.html",[67,1.049,1019,2.517]],["body/injectables/ShoppingListService.html",[3,0.11,4,0.099,5,0.099,7,0.287,8,1.377,11,0.014,12,0.804,14,1.952,15,1.059,16,0.36,17,0.625,20,0.11,21,0.167,23,1.156,24,1.952,26,0.007,27,0.007,52,0.773,67,1.152,68,1.307,85,2.1,86,1.059,87,0.734,88,1.952,120,1.98,136,3.444,139,2.342,141,3.455,142,3.836,143,4.587,148,2.128,152,1.748,153,1.152,159,2.606,160,2.572,161,1.825,164,3.269,188,2.766,237,3.026,434,2.477,435,1.868,436,1.868,437,1.868,441,1.868,444,2.564,445,1.868,448,1.868,456,1.253,477,3.459,479,2.32,480,2.32,535,2.606,546,2.32,547,2.32,551,2.32,553,1.855,554,3.532,555,1.98,558,2.131,559,2.131,995,3.532,1008,3.836,1012,4.55,1014,3.836,1015,3.923,1019,2.766,1021,2.572,1022,3.459,1035,2.572,1038,2.572,1039,2.955,1040,2.955,1041,4.407,1042,2.955,1043,2.955,1044,2.955,1045,2.955,1046,2.955,1047,2.955,1048,4.407,1049,2.955,1050,2.955,1051,2.955,1052,6.554,1053,2.955,1054,2.955,1055,2.955,1056,2.955]],["title/classes/UpdateFavoriteDto.html",[21,0.226,449,2.687]],["body/classes/UpdateFavoriteDto.html",[3,0.216,4,0.194,5,0.194,11,0.013,16,0.368,20,0.216,21,0.328,26,0.012,27,0.012,74,1.142,227,1.952,326,3.647,328,4.56,433,2.104,449,4.661,455,4.56,618,2.939,975,3.251,1057,5.057,1058,5.81]],["title/classes/UpdateGroupDto.html",[21,0.226,514,2.687]],["body/classes/UpdateGroupDto.html",[3,0.216,4,0.194,5,0.194,11,0.013,16,0.368,20,0.216,21,0.328,26,0.012,27,0.012,74,1.142,227,1.952,332,3.647,334,4.189,433,2.104,514,4.661,518,4.56,618,2.939,975,3.251,1059,5.057,1060,5.81]],["title/classes/UpdateIngredientDto.html",[21,0.226,579,2.687]],["body/classes/UpdateIngredientDto.html",[3,0.216,4,0.194,5,0.194,11,0.013,16,0.368,20,0.216,21,0.328,26,0.012,27,0.012,74,1.142,227,1.952,348,3.647,350,4.56,433,2.104,579,4.661,583,4.56,618,2.939,975,3.251,1061,5.057,1062,5.81]],["title/classes/UpdateNotificationDto.html",[21,0.226,672,2.687]],["body/classes/UpdateNotificationDto.html",[3,0.216,4,0.194,5,0.194,11,0.013,16,0.368,20,0.216,21,0.328,26,0.012,27,0.012,74,1.142,227,1.952,356,3.647,358,4.56,433,2.104,618,2.939,672,4.661,676,4.56,975,3.251,1063,5.057,1064,5.81]],["title/classes/UpdateRecipeDto.html",[21,0.226,830,2.687]],["body/classes/UpdateRecipeDto.html",[3,0.216,4,0.194,5,0.194,11,0.013,16,0.368,20,0.216,21,0.328,26,0.012,27,0.012,74,1.142,216,3.647,227,1.952,238,3.251,433,2.104,618,2.939,830,4.661,837,4.56,975,3.251,1065,5.057,1066,5.81]],["title/classes/UpdateShoppingListDto.html",[21,0.226,1012,2.687]],["body/classes/UpdateShoppingListDto.html",[3,0.216,4,0.194,5,0.194,11,0.013,16,0.368,20,0.216,21,0.328,26,0.012,27,0.012,74,1.142,227,1.952,618,2.939,975,3.251,1012,4.661,1015,3.647,1022,4.56,1067,5.057,1068,4.56,1069,5.81,1070,5.81]],["title/classes/UpdateUserDto.html",[21,0.226,1071,2.687]],["body/classes/UpdateUserDto.html",[3,0.216,4,0.194,5,0.194,11,0.013,16,0.368,20,0.216,21,0.328,26,0.012,27,0.012,74,1.142,227,1.952,403,3.647,405,4.56,433,2.104,618,2.939,975,3.251,1071,4.661,1072,5.057,1073,4.56,1074,5.81]],["title/classes/UpsertShoppingListDto.html",[21,0.226,1015,2.517]],["body/classes/UpsertShoppingListDto.html",[3,0.183,4,0.164,5,0.164,7,0.477,10,1.372,11,0.014,12,0.769,16,0.332,20,0.183,21,0.277,26,0.01,27,0.01,74,0.965,87,0.854,153,1.638,192,1.638,199,2.927,220,3.852,226,3.492,227,1.649,235,2.902,237,2.266,239,3.329,270,3.668,314,3.506,329,4.082,366,5.454,565,2.608,751,3.852,1001,4.272,1015,3.933,1068,3.852,1075,6.008,1076,4.908,1077,4.908]],["title/classes/User.html",[21,0.226,116,1.452]],["body/classes/User.html",[3,0.112,4,0.1,5,0.1,7,0.292,10,1.62,11,0.014,12,0.907,15,1.314,16,0.282,20,0.254,21,0.355,26,0.007,27,0.007,52,0.785,74,0.59,86,0.901,87,0.879,116,1.926,117,1.594,128,2.48,153,0.785,154,1.679,161,0.937,162,2.976,169,2.976,184,3.182,190,3.294,191,1.679,192,1.165,193,3.686,195,1.449,196,2.255,197,1.884,198,2.978,199,1.272,200,1.679,201,3.294,202,4.215,203,3.222,204,3.338,205,3.338,206,2.976,207,2.636,208,2.011,209,3.945,210,4.4,211,3.564,212,3.338,213,1.884,725,5.474,737,1.884,1078,3.001,1079,5.887,1080,3.001,1081,3.001,1082,3.001,1083,3.001,1084,3.001,1085,3.001,1086,3.001,1087,3.001,1088,3.001,1089,3.001]],["title/controllers/UserController.html",[0,1.399,1090,2.892]],["body/controllers/UserController.html",[0,1.168,2,1.168,3,0.125,4,0.112,5,0.112,7,0.326,8,1.509,10,1.44,11,0.014,12,0.807,14,2.054,15,1.248,16,0.363,17,0.708,20,0.125,21,0.189,22,1.694,23,1.31,24,2.054,26,0.008,27,0.008,78,1.874,85,2.084,86,1.051,87,0.728,88,1.938,95,3.17,96,2.566,97,1.874,98,1.874,99,1.874,116,1.212,227,1.125,403,4.301,433,1.749,434,2.63,435,2.048,436,2.048,437,2.048,441,1.42,442,1.98,444,2.68,445,1.42,446,2.102,448,1.42,450,2.102,454,1.546,456,1.42,458,2.244,461,1.98,463,1.98,465,1.98,613,2.102,614,2.244,834,2.628,839,5.723,840,2.628,848,4.868,1071,4.845,1073,3.791,1090,3.483,1091,2.914,1092,2.914,1093,3.348,1094,3.348,1095,3.348,1096,3.348,1097,3.348,1098,3.348,1099,3.348,1100,3.348,1101,3.348,1102,3.556,1103,2.914,1104,3.348,1105,3.348,1106,3.348,1107,3.348,1108,3.348,1109,3.348]],["title/modules/UserModule.html",[28,1.452,42,2.517]],["body/modules/UserModule.html",[2,2.112,3,0.173,4,0.156,5,0.156,11,0.014,16,0.392,17,0.984,20,0.173,21,0.263,26,0.01,27,0.01,28,2.193,30,2.149,31,2.796,42,4.843,43,3.064,44,2.355,45,2.355,47,3.218,48,2.753,51,2.605,52,1.217,86,0.789,116,1.686,117,3.218,126,2.922,127,4.052,128,1.752,427,3.654,1090,4.854,1102,5.074,1103,4.052,1110,4.052,1111,4.052,1112,4.052,1113,4.656,1114,6.057,1115,4.656]],["title/injectables/UserService.html",[67,1.049,1102,2.517]],["body/injectables/UserService.html",[3,0.112,4,0.101,5,0.101,7,0.293,8,1.397,11,0.014,12,0.81,14,1.969,15,1.215,16,0.35,17,0.637,20,0.112,21,0.17,23,1.179,24,1.969,26,0.007,27,0.007,52,0.788,67,1.169,68,1.333,85,2.118,86,1.068,87,0.74,88,1.969,116,1.091,136,3.719,139,2.376,140,2.623,141,3.489,145,3.892,148,2.575,152,1.782,153,1.169,154,1.687,158,2.623,159,1.782,161,1.969,164,3.526,173,1.455,188,2.807,403,3.956,427,2.366,433,1.619,434,2.501,435,1.896,436,1.896,437,1.896,441,1.896,444,2.308,445,1.896,448,1.896,454,1.392,456,1.278,535,3.489,553,1.892,554,3.573,555,2.02,558,2.173,559,2.173,1071,4.58,1073,3.51,1092,3.892,1102,2.807,1116,2.623,1117,3.014,1118,3.014,1119,3.014,1120,3.014,1121,3.014,1122,3.014,1123,3.014,1124,3.014,1125,3.014,1126,5.333,1127,3.014,1128,3.014,1129,5.333,1130,3.014,1131,4.473,1132,3.014,1133,4.473,1134,3.014]],["title/coverage.html",[1135,4.303]],["body/coverage.html",[0,2.236,1,1.501,5,0.07,6,1.812,11,0.014,18,1.307,21,0.447,26,0.006,27,0.006,61,1.231,67,1.793,69,1.812,73,1.501,75,1.812,76,1.501,77,1.812,82,1.307,87,0.244,91,1.395,100,1.307,113,1.395,116,0.754,117,1.106,121,1.395,135,1.812,173,1.005,190,1.165,191,3.175,198,1.053,200,1.165,201,1.165,214,1.395,215,3.042,216,3.332,234,1.395,238,1.165,284,1.005,293,2.635,294,1.501,296,1.634,297,1.812,311,1.501,312,1.812,313,1.812,326,1.307,327,1.812,328,2.635,332,1.307,333,1.812,334,3.042,348,1.307,349,1.812,350,2.635,356,1.307,357,1.812,358,2.635,403,1.307,404,1.812,405,2.635,428,1.501,429,1.812,431,1.501,432,1.812,444,0.814,449,1.395,452,1.307,471,1.812,481,1.634,482,1.812,486,1.501,487,1.812,499,1.395,500,2.421,505,1.634,507,1.501,508,1.812,514,1.395,516,1.307,529,1.812,553,5.197,565,1.106,566,2.421,570,1.501,572,1.501,573,1.812,579,1.395,581,1.307,599,1.812,613,1.307,614,1.395,615,1.812,620,1.812,642,1.812,643,2.635,652,1.307,653,2.421,656,1.307,662,1.501,664,1.501,665,1.812,672,1.395,674,1.307,683,1.812,712,1.395,713,1.501,714,1.812,724,2.421,728,1.501,753,1.501,755,2.421,760,1.634,762,1.501,763,1.812,830,1.395,835,1.307,844,1.634,903,1.812,972,1.812,977,1.812,984,1.634,995,1.395,996,2.635,1002,1.501,1004,1.501,1005,1.812,1012,1.395,1015,1.307,1019,1.307,1038,1.812,1057,1.812,1059,1.812,1061,1.812,1063,1.812,1065,1.812,1067,1.812,1068,2.635,1071,1.395,1072,1.812,1075,1.812,1090,1.501,1091,1.812,1102,1.307,1116,1.812,1135,1.634,1136,2.082,1137,2.082,1138,2.082,1139,6.583,1140,6.412,1141,5.968,1142,1.812,1143,6.583,1144,7.53,1145,2.922,1146,6.412,1147,5.308,1148,1.812,1149,2.082,1150,1.812,1151,3.357,1152,4.218,1153,2.082,1154,2.082,1155,2.082,1156,2.082]],["title/dependencies.html",[31,2.228,1157,2.911]],["body/dependencies.html",[11,0.014,17,1.052,21,0.357,26,0.01,27,0.01,31,2.299,50,4.334,52,1.302,60,3.591,120,3.337,153,1.302,157,4.334,227,1.673,232,2.945,233,3.337,617,3.909,628,6.049,629,4.334,838,5.504,983,4.334,1158,7.312,1159,4.98,1160,4.98,1161,4.98,1162,4.98,1163,4.98,1164,4.98,1165,4.98,1166,4.98,1167,4.98,1168,4.98,1169,4.98,1170,4.98,1171,4.98,1172,4.98,1173,4.98,1174,4.98,1175,4.98,1176,4.98,1177,4.98,1178,4.98]],["title/miscellaneous/enumerations.html",[1179,1.871,1180,4.2]],["body/miscellaneous/enumerations.html",[7,0.577,11,0.013,26,0.012,27,0.012,116,2.551,184,3.402,718,5.897,1179,3.322,1180,5.167,1181,5.937,1182,5.937,1183,7.046,1184,7.046]],["title/miscellaneous/functions.html",[1179,1.871,1185,4.2]],["body/miscellaneous/functions.html",[7,0.607,11,0.012,26,0.012,27,0.012,1148,5.428,1150,6.675,1179,3.49,1185,5.428,1186,6.237]],["title/index.html",[7,0.325,1187,3.345,1188,3.345]],["body/index.html",[4,0.151,11,0.014,26,0.01,27,0.01,217,2.173,259,2.826,289,3.246,290,3.246,1135,3.533,1189,4.502,1190,4.502,1191,5.925,1192,4.502,1193,4.502,1194,4.502,1195,4.502,1196,4.502,1197,4.502,1198,6.623,1199,4.502,1200,4.502,1201,4.502,1202,4.502,1203,7.653,1204,4.502,1205,4.502,1206,4.502,1207,7.507,1208,4.502,1209,4.502,1210,5.925,1211,4.502,1212,4.502,1213,4.502,1214,4.502,1215,5.925,1216,5.925,1217,4.502,1218,4.502,1219,4.502,1220,5.925,1221,5.925,1222,4.502,1223,4.502,1224,4.502,1225,4.502,1226,4.502,1227,3.918,1228,4.502,1229,4.502,1230,4.502,1231,4.502,1232,4.502,1233,4.502,1234,4.502,1235,4.502,1236,4.502,1237,4.502,1238,4.502,1239,4.502,1240,4.502,1241,4.502,1242,3.918]],["title/modules.html",[30,2.531]],["body/modules.html",[11,0.011,26,0.011,27,0.011,29,3.829,30,2.452,35,3.559,36,3.559,37,3.559,38,3.559,39,3.559,40,3.559,41,3.559,42,3.333,1227,7.046,1243,8.096,1244,8.096,1245,8.096]],["title/overview.html",[1246,4.772]],["body/overview.html",[2,1.292,11,0.014,18,3.76,26,0.009,27,0.009,29,5.855,30,1.71,31,2.396,32,3.224,33,3.224,34,3.224,35,5.054,36,4.58,37,4.58,38,4.58,39,4.58,40,4.58,41,4.58,42,4.565,43,2.626,44,1.874,45,1.874,68,1.638,74,0.728,100,3.76,110,3.224,112,3.224,113,4.014,295,2.907,452,3.76,467,3.224,468,3.224,516,3.76,525,3.224,526,3.224,581,3.76,590,3.224,591,3.224,674,3.76,707,3.224,708,3.224,835,3.76,897,3.224,898,3.224,1019,3.76,1031,3.224,1032,3.224,1102,4.565,1110,3.224,1111,3.224,1112,3.224,1246,3.224,1247,5.19,1248,3.704,1249,3.704,1250,3.704]],["title/properties.html",[192,1.262,1157,2.911]],["body/properties.html",[11,0.013,26,0.012,27,0.012,192,1.608,217,2.97,259,3.862,1242,5.354,1251,6.152,1252,6.152,1253,6.152]],["title/miscellaneous/typealiases.html",[1179,1.871,1254,4.826]],["body/miscellaneous/typealiases.html",[7,0.556,11,0.011,26,0.011,27,0.011,87,0.67,154,3.853,191,3.197,500,4.119,504,5.404,566,4.119,569,5.992,653,4.119,661,5.992,724,4.119,745,5.404,755,4.119,759,5.992,1179,3.197,1255,5.713,1256,4.972,1257,4.972,1258,4.972,1259,4.972,1260,4.972,1261,4.972]],["title/miscellaneous/variables.html",[1179,1.871,1262,4.2]],["body/miscellaneous/variables.html",[7,0.433,11,0.014,15,0.755,26,0.01,27,0.01,87,0.691,117,3.128,121,3.945,130,3.498,184,2.152,191,2.494,207,4.682,213,2.798,500,3.214,505,4.62,506,3.879,566,3.214,570,4.244,571,3.879,653,3.214,656,2.798,662,4.244,663,3.879,718,6.214,724,3.214,753,4.244,754,3.879,755,3.214,760,4.62,761,3.879,844,5.721,984,4.62,996,3.498,1002,4.244,1003,3.879,1142,3.879,1145,3.879,1179,2.494,1256,3.879,1257,3.879,1258,3.879,1259,3.879,1260,3.879,1261,3.879,1262,3.879,1263,4.457,1264,5.887,1265,4.457,1266,4.457,1267,4.457]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":553,"title":{},"body":{"injectables/GroupService.html":{},"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1252,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1174,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1165,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1164,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1168,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1144,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1152,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1151,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":1153,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1139,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":1154,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1140,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1141,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1146,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1147,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":363,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["1.0.0",{"_index":1171,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["10.0.1",{"_index":1159,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":1248,"title":{},"body":{"overview.html":{}}}],["1440h",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"modules/ShoppingListModule.html":{}}}],["16.0.3",{"_index":1166,"title":{},"body":{"dependencies.html":{}}}],["1}).limit(10",{"_index":969,"title":{},"body":{"injectables/RecipeService.html":{}}}],["2",{"_index":1250,"title":{},"body":{"overview.html":{}}}],["20",{"_index":364,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["200",{"_index":269,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["2023",{"_index":362,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["2943823572034",{"_index":268,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/IngredientNested.html":{}}}],["3",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["30",{"_index":275,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["30})@isnumber",{"_index":382,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["34",{"_index":1249,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":1169,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":1178,"title":{},"body":{"dependencies.html":{}}}],["403",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["404",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["5.1.0",{"_index":1163,"title":{},"body":{"dependencies.html":{}}}],["6.1.4",{"_index":1162,"title":{},"body":{"dependencies.html":{}}}],["6.8.4",{"_index":1167,"title":{},"body":{"dependencies.html":{}}}],["63cb0277ee58877e63e36fcc",{"_index":366,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpsertShoppingListDto.html":{}}}],["7.2.0",{"_index":1175,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":261,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["8})@isnumber",{"_index":378,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["9",{"_index":1247,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":1158,"title":{},"body":{"dependencies.html":{}}}],["9.2.1",{"_index":1160,"title":{},"body":{"dependencies.html":{}}}],["9421",{"_index":279,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["9421})@isnumber",{"_index":401,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["_avg_rating",{"_index":804,"title":{},"body":{"controllers/RecipeController.html":{}}}],["_cooking_time",{"_index":805,"title":{},"body":{"controllers/RecipeController.html":{}}}],["_id",{"_index":199,"title":{},"body":{"classes/Badges.html":{},"classes/CommentNested.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/IngredientNested.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{}}}],["_views",{"_index":806,"title":{},"body":{"controllers/RecipeController.html":{}}}],["action",{"_index":477,"title":{},"body":{"injectables/FavoritesService.html":{},"injectables/IngredientService.html":{},"injectables/ShoppingListService.html":{}}}],["addcomment",{"_index":764,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["addcomment(id",{"_index":777,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["adding",{"_index":320,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["address",{"_index":211,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["adds",{"_index":478,"title":{},"body":{"injectables/FavoritesService.html":{}}}],["admin",{"_index":1183,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["admin_id",{"_index":335,"title":{},"body":{"classes/CreateGroupDto.html":{},"classes/GetGroupFilterDto.html":{},"classes/Group.html":{}}}],["adress",{"_index":406,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["aliases",{"_index":1255,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alolocosevivemejor@gmail.com",{"_index":412,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["alsina",{"_index":418,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["amazing",{"_index":1228,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":839,"title":{},"body":{"controllers/RecipeController.html":{},"controllers/UserController.html":{}}}],["apibearerauth()@roles(role.admin)@useguards(jwtauthguard",{"_index":824,"title":{},"body":{"controllers/RecipeController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@delete(':id",{"_index":1098,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@delete('delete/:id",{"_index":828,"title":{},"body":{"controllers/RecipeController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get",{"_index":1094,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get(':id",{"_index":1096,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@patch(':id",{"_index":1100,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@patch('modify/:id",{"_index":831,"title":{},"body":{"controllers/RecipeController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@post('/create",{"_index":782,"title":{},"body":{"controllers/RecipeController.html":{}}}],["apiproperty",{"_index":226,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/IngredientNested.html":{},"classes/UpsertShoppingListDto.html":{}}}],["apiproperty({example",{"_index":314,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/UpsertShoppingListDto.html":{}}}],["app",{"_index":1205,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/RecipeModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1197,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":210,"title":{},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["async",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":73,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["auth.controller",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.dto",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterAuthDto.html":{}}}],["auth.dto.ts",{"_index":643,"title":{},"body":{"classes/LoginAuthDto.html":{},"classes/RegisterAuthDto.html":{},"coverage.html":{}}}],["auth.dto.ts:5",{"_index":645,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["auth.dto.ts:7",{"_index":974,"title":{},"body":{"classes/RegisterAuthDto.html":{}}}],["auth.dto.ts:9",{"_index":647,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["auth.guard",{"_index":840,"title":{},"body":{"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":615,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/roles.guard",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":76,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":616,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":619,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":35,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":217,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"index.html":{},"properties.html":{}}}],["author_id",{"_index":750,"title":{},"body":{"classes/Recipe.html":{}}}],["authservice",{"_index":100,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["avg_rating",{"_index":262,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["await",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":1229,"title":{},"body":{"index.html":{}}}],["badges",{"_index":190,"title":{"classes/Badges.html":{}},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{},"coverage.html":{}}}],["badrequestexception",{"_index":720,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{}}}],["badrequestexception('invalid",{"_index":723,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{}}}],["barcelona",{"_index":408,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["bcrypt",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["body",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"guards/CompareIdGuard.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["body._id",{"_index":308,"title":{},"body":{"guards/CompareIdGuard.html":{}}}],["boolean",{"_index":267,"title":{},"body":{"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":1150,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1245,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1243,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1192,"title":{},"body":{"index.html":{}}}],["c/bla",{"_index":407,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["canactivate",{"_index":298,"title":{},"body":{"guards/CompareIdGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":299,"title":{},"body":{"guards/CompareIdGuard.html":{},"guards/RolesGuard.html":{}}}],["checkpassword",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["choco",{"_index":347,"title":{},"body":{"classes/CreateGroupDto.html":{}}}],["choco'})@isdefined()@isstring",{"_index":340,"title":{},"body":{"classes/CreateGroupDto.html":{}}}],["chocolate",{"_index":240,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["cinamon",{"_index":321,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["class",{"_index":21,"title":{"classes/Auth.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"classes/IngredientNested.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"classes/RegisterAuthDto.html":{},"classes/ShoppingList.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":74,"title":{},"body":{"classes/Auth.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"classes/IngredientNested.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"classes/RegisterAuthDto.html":{},"classes/ShoppingList.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_favoritesmodule",{"_index":467,"title":{},"body":{"modules/FavoritesModule.html":{},"overview.html":{}}}],["cluster_favoritesmodule_providers",{"_index":468,"title":{},"body":{"modules/FavoritesModule.html":{},"overview.html":{}}}],["cluster_groupmodule",{"_index":525,"title":{},"body":{"modules/GroupModule.html":{},"overview.html":{}}}],["cluster_groupmodule_providers",{"_index":526,"title":{},"body":{"modules/GroupModule.html":{},"overview.html":{}}}],["cluster_ingredientmodule",{"_index":590,"title":{},"body":{"modules/IngredientModule.html":{},"overview.html":{}}}],["cluster_ingredientmodule_providers",{"_index":591,"title":{},"body":{"modules/IngredientModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule",{"_index":707,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule_providers",{"_index":708,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_recipemodule",{"_index":897,"title":{},"body":{"modules/RecipeModule.html":{},"overview.html":{}}}],["cluster_recipemodule_providers",{"_index":898,"title":{},"body":{"modules/RecipeModule.html":{},"overview.html":{}}}],["cluster_shoppinglistmodule",{"_index":1031,"title":{},"body":{"modules/ShoppingListModule.html":{},"overview.html":{}}}],["cluster_shoppinglistmodule_providers",{"_index":1032,"title":{},"body":{"modules/ShoppingListModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1110,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1111,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1112,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["comment",{"_index":218,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["comment.dto",{"_index":843,"title":{},"body":{"controllers/RecipeController.html":{}}}],["comment.dto.ts",{"_index":313,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:11",{"_index":316,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:5",{"_index":325,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:8",{"_index":322,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment:\"i",{"_index":285,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["commentdocument",{"_index":759,"title":{},"body":{"classes/RecipeComment.html":{},"miscellaneous/typealiases.html":{}}}],["commentnested",{"_index":214,"title":{"classes/CommentNested.html":{}},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"coverage.html":{}}}],["comments",{"_index":292,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{}}}],["commentschema",{"_index":760,"title":{},"body":{"classes/RecipeComment.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["commentscontent",{"_index":748,"title":{},"body":{"classes/Recipe.html":{}}}],["compare",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["compare(password",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["compareidguard",{"_index":294,"title":{"guards/CompareIdGuard.html":{}},"body":{"guards/CompareIdGuard.html":{},"controllers/ShoppingListController.html":{},"coverage.html":{}}}],["compareidguard)@post",{"_index":1016,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["console.log(\"error",{"_index":554,"title":{},"body":{"injectables/GroupService.html":{},"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["const",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"classes/Badges.html":{},"guards/CompareIdGuard.html":{},"classes/Favorites.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"injectables/IngredientService.html":{},"classes/Notification.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"injectables/ShoppingListService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["constants/jwt.constants",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["constructor(groupmodel",{"_index":530,"title":{},"body":{"injectables/GroupService.html":{}}}],["constructor(ingredientmodel",{"_index":600,"title":{},"body":{"injectables/IngredientService.html":{}}}],["constructor(notificationmodel",{"_index":684,"title":{},"body":{"injectables/NotificationService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"guards/RolesGuard.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["constructor(recipemodel",{"_index":904,"title":{},"body":{"injectables/RecipeService.html":{}}}],["constructor(reflector",{"_index":978,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(shoppinglistmodel",{"_index":1039,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["constructor(usermodel",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["context",{"_index":302,"title":{},"body":{"guards/CompareIdGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":990,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":989,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":305,"title":{},"body":{"guards/CompareIdGuard.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('favorites",{"_index":457,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["controller('group",{"_index":519,"title":{},"body":{"controllers/GroupController.html":{}}}],["controller('ingredient",{"_index":584,"title":{},"body":{"controllers/IngredientController.html":{}}}],["controller('notification",{"_index":677,"title":{},"body":{"controllers/NotificationController.html":{}}}],["controller('recipe",{"_index":847,"title":{},"body":{"controllers/RecipeController.html":{}}}],["controller('shopping",{"_index":1024,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["controller('user",{"_index":1104,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"controllers/NotificationController.html":{},"modules/NotificationsModule.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cooking_time",{"_index":276,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["country",{"_index":274,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["coverage",{"_index":1135,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":433,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":458,"title":{},"body":{"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["create(@res",{"_index":849,"title":{},"body":{"controllers/RecipeController.html":{}}}],["create(createfavoritedto",{"_index":438,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{}}}],["create(creategroupdto",{"_index":509,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["create(createingredientdto",{"_index":574,"title":{},"body":{"controllers/IngredientController.html":{},"injectables/IngredientService.html":{}}}],["create(createnotificationdto",{"_index":666,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["create(createrecipedto",{"_index":908,"title":{},"body":{"injectables/RecipeService.html":{}}}],["create(createuserdto",{"_index":1092,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(res",{"_index":780,"title":{},"body":{"controllers/RecipeController.html":{}}}],["createcommentdto",{"_index":311,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"controllers/RecipeController.html":{},"coverage.html":{}}}],["created",{"_index":854,"title":{},"body":{"controllers/RecipeController.html":{}}}],["createfavoritedto",{"_index":326,"title":{"classes/CreateFavoriteDto.html":{}},"body":{"classes/CreateFavoriteDto.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/UpdateFavoriteDto.html":{},"coverage.html":{}}}],["creategroupdto",{"_index":332,"title":{"classes/CreateGroupDto.html":{}},"body":{"classes/CreateGroupDto.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/UpdateGroupDto.html":{},"coverage.html":{}}}],["createingredientdto",{"_index":348,"title":{"classes/CreateIngredientDto.html":{}},"body":{"classes/CreateIngredientDto.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"classes/UpdateIngredientDto.html":{},"coverage.html":{}}}],["createnotificationdto",{"_index":356,"title":{"classes/CreateNotificationDto.html":{}},"body":{"classes/CreateNotificationDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["createrecipedto",{"_index":238,"title":{"classes/CreateRecipeDto.html":{}},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/UpdateRecipeDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":403,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["cut",{"_index":247,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["data",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["date",{"_index":359,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/Notification.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"classes/IngredientNested.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"classes/RegisterAuthDto.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["decorators/roles.decorator",{"_index":985,"title":{},"body":{"guards/RolesGuard.html":{}}}],["default",{"_index":207,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":446,"title":{},"body":{"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["delete('delete/:id",{"_index":861,"title":{},"body":{"controllers/RecipeController.html":{}}}],["deleted",{"_index":864,"title":{},"body":{"controllers/RecipeController.html":{}}}],["deletededrecipe",{"_index":862,"title":{},"body":{"controllers/RecipeController.html":{}}}],["delicious",{"_index":242,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FavoritesModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":259,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":1206,"title":{},"body":{"index.html":{}}}],["difficulty",{"_index":278,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["document",{"_index":196,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Group.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"classes/Notification.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"classes/User.html":{}}}],["documentation",{"_index":1136,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":315,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["dose",{"_index":245,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["dotenv",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["dotenv.config",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["dto/add",{"_index":842,"title":{},"body":{"controllers/RecipeController.html":{}}}],["dto/create",{"_index":454,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/filter",{"_index":927,"title":{},"body":{"injectables/RecipeService.html":{}}}],["dto/login",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/register",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":456,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/upsert",{"_index":1021,"title":{},"body":{"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{}}}],["e2e",{"_index":1217,"title":{},"body":{"index.html":{}}}],["easy",{"_index":277,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["easy'})@isstring",{"_index":388,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["efficient",{"_index":1193,"title":{},"body":{"index.html":{}}}],["email",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/LoginAuthDto.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["emitter",{"_index":360,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/Notification.html":{}}}],["enjoy",{"_index":258,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["enough",{"_index":324,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["enumerations",{"_index":1180,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["ews6f54we654efw651few6",{"_index":330,"title":{},"body":{"classes/CreateFavoriteDto.html":{}}}],["example",{"_index":239,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/IngredientNested.html":{},"classes/UpsertShoppingListDto.html":{}}}],["exec",{"_index":551,"title":{},"body":{"injectables/GroupService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{}}}],["executioncontext",{"_index":300,"title":{},"body":{"guards/CompareIdGuard.html":{},"guards/RolesGuard.html":{}}}],["expiresin",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{},"modules/ShoppingListModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":1114,"title":{},"body":{"modules/UserModule.html":{}}}],["express",{"_index":838,"title":{},"body":{"controllers/RecipeController.html":{},"dependencies.html":{}}}],["extends",{"_index":618,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterAuthDto.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":626,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":634,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":310,"title":{},"body":{"guards/CompareIdGuard.html":{},"injectables/JwtStrategy.html":{}}}],["favorite",{"_index":428,"title":{"classes/Favorite.html":{}},"body":{"classes/Favorite.html":{},"injectables/FavoritesService.html":{},"coverage.html":{}}}],["favorite.dto",{"_index":455,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/UpdateFavoriteDto.html":{}}}],["favorite.dto.ts",{"_index":328,"title":{},"body":{"classes/CreateFavoriteDto.html":{},"classes/UpdateFavoriteDto.html":{},"coverage.html":{}}}],["favorite.dto.ts:8",{"_index":331,"title":{},"body":{"classes/CreateFavoriteDto.html":{}}}],["favorites",{"_index":198,"title":{"classes/Favorites.html":{}},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{},"coverage.html":{}}}],["favorites.controller",{"_index":470,"title":{},"body":{"modules/FavoritesModule.html":{}}}],["favorites.service",{"_index":453,"title":{},"body":{"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{}}}],["favorites/favorites.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["favoritescontroller",{"_index":431,"title":{"controllers/FavoritesController.html":{}},"body":{"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"coverage.html":{}}}],["favoritesmodule",{"_index":36,"title":{"modules/FavoritesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FavoritesModule.html":{},"modules.html":{},"overview.html":{}}}],["favoritesservice",{"_index":452,"title":{"injectables/FavoritesService.html":{}},"body":{"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"coverage.html":{},"overview.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findall",{"_index":434,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyauthor",{"_index":765,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyauthor(tag",{"_index":787,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyav_rating",{"_index":766,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyav_rating(tag",{"_index":791,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbycooking_time",{"_index":767,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbycooking_time(tag",{"_index":794,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbycountry",{"_index":768,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbycountry(tag",{"_index":797,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbydifficulty",{"_index":769,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbydifficulty(tag",{"_index":800,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyfilter",{"_index":770,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyfilter(name",{"_index":803,"title":{},"body":{"controllers/RecipeController.html":{}}}],["findbyfilter(queries",{"_index":916,"title":{},"body":{"injectables/RecipeService.html":{}}}],["findbyfood_type",{"_index":771,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyfood_type(tag",{"_index":809,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyis_public",{"_index":772,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyis_public(tag",{"_index":812,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbymeal_type",{"_index":773,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbymeal_type(tag",{"_index":815,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyname",{"_index":774,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyname(tag",{"_index":818,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyviews",{"_index":775,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyviews(tag",{"_index":821,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findmostviewed",{"_index":776,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findone",{"_index":435,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":461,"title":{},"body":{"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":441,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["finduser",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduser.password",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduser.role",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduser.user_name",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["first",{"_index":246,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["fisrt_name",{"_index":204,"title":{},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["flour",{"_index":354,"title":{},"body":{"classes/CreateIngredientDto.html":{}}}],["food_type",{"_index":282,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["format",{"_index":559,"title":{},"body":{"injectables/GroupService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["fourth",{"_index":257,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["framework",{"_index":1191,"title":{},"body":{"index.html":{}}}],["france",{"_index":273,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["france'})@isstring",{"_index":384,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["function",{"_index":1149,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1185,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/filter/by",{"_index":807,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('/list",{"_index":785,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('/top10/views",{"_index":893,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get(':id",{"_index":442,"title":{},"body":{"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["get('filter/author/:tag",{"_index":788,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/av_rating/:tag",{"_index":792,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/cooking_time/:tag",{"_index":795,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/country/:tag",{"_index":798,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/difficulty/:tag",{"_index":801,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/food_type/:tag",{"_index":810,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/is_public/:tag",{"_index":813,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/meal_type/:tag",{"_index":816,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/name/:tag",{"_index":819,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/views/:tag",{"_index":822,"title":{},"body":{"controllers/RecipeController.html":{}}}],["getgroupfilterdto",{"_index":481,"title":{"classes/GetGroupFilterDto.html":{}},"body":{"classes/GetGroupFilterDto.html":{},"coverage.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getrecipiesfilterdto",{"_index":486,"title":{"classes/GetRecipiesFilterDto.html":{}},"body":{"classes/GetRecipiesFilterDto.html":{},"injectables/RecipeService.html":{},"coverage.html":{}}}],["getting",{"_index":1187,"title":{"index.html":{}},"body":{}}],["good",{"_index":323,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["grams",{"_index":352,"title":{},"body":{"classes/CreateIngredientDto.html":{}}}],["group",{"_index":499,"title":{"classes/Group.html":{}},"body":{"classes/Group.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"coverage.html":{}}}],["group.controller",{"_index":528,"title":{},"body":{"modules/GroupModule.html":{}}}],["group.dto",{"_index":518,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/UpdateGroupDto.html":{}}}],["group.dto.ts",{"_index":334,"title":{},"body":{"classes/CreateGroupDto.html":{},"classes/GetGroupFilterDto.html":{},"classes/UpdateGroupDto.html":{},"coverage.html":{}}}],["group.dto.ts:14",{"_index":341,"title":{},"body":{"classes/CreateGroupDto.html":{}}}],["group.dto.ts:18",{"_index":339,"title":{},"body":{"classes/CreateGroupDto.html":{}}}],["group.dto.ts:2",{"_index":484,"title":{},"body":{"classes/GetGroupFilterDto.html":{}}}],["group.dto.ts:23",{"_index":344,"title":{},"body":{"classes/CreateGroupDto.html":{}}}],["group.dto.ts:3",{"_index":483,"title":{},"body":{"classes/GetGroupFilterDto.html":{}}}],["group.dto.ts:4",{"_index":485,"title":{},"body":{"classes/GetGroupFilterDto.html":{}}}],["group.service",{"_index":517,"title":{},"body":{"controllers/GroupController.html":{},"modules/GroupModule.html":{}}}],["group/group.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["group_name",{"_index":336,"title":{},"body":{"classes/CreateGroupDto.html":{},"classes/GetGroupFilterDto.html":{},"classes/Group.html":{}}}],["groupcontroller",{"_index":507,"title":{"controllers/GroupController.html":{}},"body":{"controllers/GroupController.html":{},"modules/GroupModule.html":{},"coverage.html":{}}}],["groupdata",{"_index":556,"title":{},"body":{"injectables/GroupService.html":{}}}],["groupdocument",{"_index":504,"title":{},"body":{"classes/Group.html":{},"injectables/GroupService.html":{},"miscellaneous/typealiases.html":{}}}],["groupmodel",{"_index":532,"title":{},"body":{"injectables/GroupService.html":{}}}],["groupmodule",{"_index":37,"title":{"modules/GroupModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GroupModule.html":{},"modules.html":{},"overview.html":{}}}],["groups",{"_index":201,"title":{"classes/Groups.html":{}},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{},"coverage.html":{}}}],["groupschema",{"_index":505,"title":{},"body":{"classes/Group.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["groupsdata",{"_index":544,"title":{},"body":{"injectables/GroupService.html":{}}}],["groupsdata.length",{"_index":552,"title":{},"body":{"injectables/GroupService.html":{}}}],["groupservice",{"_index":516,"title":{"injectables/GroupService.html":{}},"body":{"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"coverage.html":{},"overview.html":{}}}],["grow",{"_index":1224,"title":{},"body":{"index.html":{}}}],["guard",{"_index":293,"title":{"guards/CompareIdGuard.html":{},"guards/RolesGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":295,"title":{},"body":{"guards/CompareIdGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["guards/roles.guard",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{}}}],["hash",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["hash(password",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["headers",{"_index":1018,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["hello",{"_index":71,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":1233,"title":{},"body":{"index.html":{}}}],["high",{"_index":243,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["httpexception",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["httpexception('invalid",{"_index":640,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["httpexception('password_invalid",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('user_not_found",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://nestjs.com",{"_index":1239,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":625,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/RecipeController.html":{}}}],["httpstatus.unauthorized",{"_index":641,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":444,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["id.guard",{"_index":1023,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["id.guard.ts",{"_index":297,"title":{},"body":{"guards/CompareIdGuard.html":{},"coverage.html":{}}}],["id.guard.ts:5",{"_index":301,"title":{},"body":{"guards/CompareIdGuard.html":{}}}],["id:finduser._id",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["id_user",{"_index":291,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["identifier",{"_index":1137,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":635,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["images/chocolate",{"_index":263,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["img",{"_index":265,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{}}}],["implements",{"_index":303,"title":{},"body":{"guards/CompareIdGuard.html":{},"injectables/ParseObjectIdPipe.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}}}],["improved",{"_index":319,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["ingredient",{"_index":565,"title":{"classes/Ingredient.html":{}},"body":{"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"injectables/IngredientService.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"classes/UpsertShoppingListDto.html":{},"coverage.html":{}}}],["ingredient.controller",{"_index":593,"title":{},"body":{"modules/IngredientModule.html":{}}}],["ingredient.dto",{"_index":583,"title":{},"body":{"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"classes/UpdateIngredientDto.html":{}}}],["ingredient.dto.ts",{"_index":350,"title":{},"body":{"classes/CreateIngredientDto.html":{},"classes/UpdateIngredientDto.html":{},"coverage.html":{}}}],["ingredient.dto.ts:6",{"_index":355,"title":{},"body":{"classes/CreateIngredientDto.html":{}}}],["ingredient.dto.ts:9",{"_index":353,"title":{},"body":{"classes/CreateIngredientDto.html":{}}}],["ingredient.name",{"_index":595,"title":{},"body":{"modules/IngredientModule.html":{}}}],["ingredient.service",{"_index":582,"title":{},"body":{"controllers/IngredientController.html":{},"modules/IngredientModule.html":{}}}],["ingredient/ingredient.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["ingredientcontroller",{"_index":572,"title":{"controllers/IngredientController.html":{}},"body":{"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"coverage.html":{}}}],["ingredientdocument",{"_index":569,"title":{},"body":{"classes/Ingredient.html":{},"miscellaneous/typealiases.html":{}}}],["ingredientmodel",{"_index":602,"title":{},"body":{"injectables/IngredientService.html":{}}}],["ingredientmodule",{"_index":38,"title":{"modules/IngredientModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IngredientModule.html":{},"modules.html":{},"overview.html":{}}}],["ingredientnested",{"_index":234,"title":{"classes/IngredientNested.html":{}},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"coverage.html":{}}}],["ingredients",{"_index":270,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"classes/UpsertShoppingListDto.html":{}}}],["ingredients._id",{"_index":934,"title":{},"body":{"injectables/RecipeService.html":{}}}],["ingredients.ingredient",{"_index":1056,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["ingredients.some",{"_index":956,"title":{},"body":{"injectables/RecipeService.html":{}}}],["ingredients.split",{"_index":955,"title":{},"body":{"injectables/RecipeService.html":{}}}],["ingredientsarray",{"_index":954,"title":{},"body":{"injectables/RecipeService.html":{}}}],["ingredientsarray.includes(_id.tostring",{"_index":957,"title":{},"body":{"injectables/RecipeService.html":{}}}],["ingredientschema",{"_index":570,"title":{},"body":{"classes/Ingredient.html":{},"modules/IngredientModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ingredientscontent",{"_index":746,"title":{},"body":{"classes/Recipe.html":{}}}],["ingredientservice",{"_index":581,"title":{"injectables/IngredientService.html":{}},"body":{"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"injectables/IngredientService.html":{},"coverage.html":{},"overview.html":{}}}],["injectable",{"_index":67,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FavoritesService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/CompareIdGuard.html":{},"injectables/FavoritesService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":68,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FavoritesService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["injectmodel(group.name",{"_index":540,"title":{},"body":{"injectables/GroupService.html":{}}}],["injectmodel(ingredient.name",{"_index":608,"title":{},"body":{"injectables/IngredientService.html":{}}}],["injectmodel(notification.name",{"_index":693,"title":{},"body":{"injectables/NotificationService.html":{}}}],["injectmodel(recipe.name",{"_index":928,"title":{},"body":{"injectables/RecipeService.html":{}}}],["injectmodel(shoppinglist.name",{"_index":1047,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["injectmodel(user.name",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["installation",{"_index":1202,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1204,"title":{},"body":{"index.html":{}}}],["internal",{"_index":345,"title":{},"body":{"classes/CreateGroupDto.html":{},"classes/Group.html":{}}}],["is_public",{"_index":266,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["is_public.tolowercase",{"_index":946,"title":{},"body":{"injectables/RecipeService.html":{}}}],["is_publicboolean",{"_index":945,"title":{},"body":{"injectables/RecipeService.html":{}}}],["isboolean",{"_index":228,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateGroupDto.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["isdefined",{"_index":231,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateGroupDto.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["isdefined()@ishexadecimal",{"_index":596,"title":{},"body":{"classes/IngredientNested.html":{}}}],["isdefined()@isnumber",{"_index":597,"title":{},"body":{"classes/IngredientNested.html":{}}}],["isdefined()@isstring",{"_index":343,"title":{},"body":{"classes/CreateGroupDto.html":{}}}],["isemail",{"_index":644,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["ishexadecimal",{"_index":221,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateGroupDto.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["isnotempty",{"_index":973,"title":{},"body":{"classes/RegisterAuthDto.html":{}}}],["isnumber",{"_index":229,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateGroupDto.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["isobject",{"_index":747,"title":{},"body":{"classes/Recipe.html":{}}}],["isstring",{"_index":223,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateGroupDto.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["it.'})@isstring()@isdefined",{"_index":386,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["john",{"_index":260,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["john'})@isdefined()@isstring",{"_index":376,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["join",{"_index":1231,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":629,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":613,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtauthservice",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ShoppingListService.html":{}}}],["jwtauthservice:jwtservice",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ShoppingListService.html":{}}}],["jwtconstants",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/ShoppingListModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/ShoppingListModule.html":{}}}],["jwtfromrequest",{"_index":633,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"modules/ShoppingListModule.html":{}}}],["jwtmodule.register",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{},"modules/ShoppingListModule.html":{}}}],["jwtservice",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ShoppingListService.html":{}}}],["jwtstrategy",{"_index":113,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1236,"title":{},"body":{"index.html":{}}}],["kind",{"_index":287,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["last_name",{"_index":205,"title":{},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["license",{"_index":1242,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1221,"title":{},"body":{"index.html":{}}}],["liked",{"_index":369,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["likes",{"_index":372,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["list",{"_index":1007,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["literal",{"_index":220,"title":{},"body":{"classes/CommentNested.html":{},"classes/IngredientNested.html":{},"classes/UpsertShoppingListDto.html":{}}}],["local",{"_index":1170,"title":{},"body":{"dependencies.html":{}}}],["login",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterAuthDto.html":{}}}],["login(userobjectlogin",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginauthdto",{"_index":82,"title":{"classes/LoginAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginAuthDto.html":{},"classes/RegisterAuthDto.html":{},"coverage.html":{}}}],["loginuser",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(@body",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(userobjectlogin",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["love",{"_index":286,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["lunch",{"_index":271,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["lunch'})@isstring",{"_index":397,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":648,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["maxlength(12",{"_index":651,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["meal_type",{"_index":272,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["measure_unit",{"_index":351,"title":{},"body":{"classes/CreateIngredientDto.html":{},"classes/Ingredient.html":{}}}],["mediterranean",{"_index":281,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["mediterranean'})@isstring",{"_index":390,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["member_user",{"_index":342,"title":{},"body":{"classes/CreateGroupDto.html":{}}}],["member_username",{"_index":337,"title":{},"body":{"classes/CreateGroupDto.html":{},"classes/GetGroupFilterDto.html":{},"classes/Group.html":{}}}],["message",{"_index":852,"title":{},"body":{"controllers/RecipeController.html":{}}}],["metadata",{"_index":1173,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/CompareIdGuard.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["minlength",{"_index":649,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["minlength(4",{"_index":650,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["minlength(4)@maxlength(12",{"_index":646,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["miscellaneous",{"_index":1179,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1220,"title":{},"body":{"index.html":{}}}],["mix",{"_index":252,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["mode",{"_index":1210,"title":{},"body":{"index.html":{}}}],["model",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["models/role.enum",{"_index":986,"title":{},"body":{"guards/RolesGuard.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FavoritesModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FavoritesModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FavoritesModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/Favorites.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"classes/Notification.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"injectables/ShoppingListService.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["mongoose.isobjectidorhexstring(value",{"_index":722,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{}}}],["mongoose.schema.types.objectid",{"_index":749,"title":{},"body":{"classes/Recipe.html":{},"classes/RecipeComment.html":{}}}],["mongoose.types.objectid",{"_index":235,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"classes/UpsertShoppingListDto.html":{}}}],["mongoose.types.objectid.isvalid(id",{"_index":555,"title":{},"body":{"injectables/GroupService.html":{},"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["mongoosemodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot(process.env.mongodb_url",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":290,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"index.html":{}}}],["myśliwiec",{"_index":1237,"title":{},"body":{"index.html":{}}}],["name",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateRecipeDto.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/GetRecipiesFilterDto.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":1198,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1241,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/CompareIdGuard.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/RecipeModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Group.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"modules/IngredientModule.html":{},"injectables/IngredientService.html":{},"classes/Notification.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":617,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1161,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":227,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/IngredientNested.html":{},"controllers/RecipeController.html":{},"classes/RegisterAuthDto.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/swagger/dist/decorators/api",{"_index":374,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["new",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateNotificationDto.html":{},"injectables/FavoritesService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/RecipeService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newgroup",{"_index":541,"title":{},"body":{"injectables/GroupService.html":{}}}],["newgroup.save",{"_index":543,"title":{},"body":{"injectables/GroupService.html":{}}}],["newingredient",{"_index":609,"title":{},"body":{"injectables/IngredientService.html":{}}}],["newingredient.save",{"_index":611,"title":{},"body":{"injectables/IngredientService.html":{}}}],["newnotification",{"_index":694,"title":{},"body":{"injectables/NotificationService.html":{}}}],["newnotification.save",{"_index":696,"title":{},"body":{"injectables/NotificationService.html":{}}}],["newrecipe",{"_index":929,"title":{},"body":{"injectables/RecipeService.html":{}}}],["newrecipe.save",{"_index":931,"title":{},"body":{"injectables/RecipeService.html":{}}}],["newuser",{"_index":1123,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.save",{"_index":1125,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":1190,"title":{},"body":{"index.html":{}}}],["notification",{"_index":652,"title":{"classes/Notification.html":{}},"body":{"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"modules/NotificationsModule.html":{},"coverage.html":{}}}],["notification.dto",{"_index":676,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{}}}],["notification.dto.ts",{"_index":358,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["notification.dto.ts:11",{"_index":365,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:14",{"_index":371,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:17",{"_index":370,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:20",{"_index":373,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:8",{"_index":367,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.name",{"_index":711,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["notification_list",{"_index":200,"title":{"classes/Notification_list.html":{}},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{},"coverage.html":{}}}],["notificationcontroller",{"_index":664,"title":{"controllers/NotificationController.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationsModule.html":{},"coverage.html":{}}}],["notificationdocument",{"_index":661,"title":{},"body":{"classes/Notification.html":{},"miscellaneous/typealiases.html":{}}}],["notificationmodel",{"_index":686,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notifications.controller",{"_index":710,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["notifications.service",{"_index":675,"title":{},"body":{"controllers/NotificationController.html":{},"modules/NotificationsModule.html":{}}}],["notifications/notifications.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["notifications_list",{"_index":212,"title":{},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["notificationschema",{"_index":662,"title":{},"body":{"classes/Notification.html":{},"modules/NotificationsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["notificationsdata",{"_index":697,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationsdata.length",{"_index":699,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationservice",{"_index":674,"title":{"injectables/NotificationService.html":{}},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"modules/NotificationsModule.html":{},"coverage.html":{},"overview.html":{}}}],["notificationsmodule",{"_index":39,"title":{"modules/NotificationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationsModule.html":{},"modules.html":{},"overview.html":{}}}],["number",{"_index":237,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateGroupDto.html":{},"classes/CreateRecipeDto.html":{},"injectables/FavoritesService.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"classes/ShoppingList.html":{},"injectables/ShoppingListService.html":{},"classes/UpsertShoppingListDto.html":{}}}],["number'})@isdefined",{"_index":338,"title":{},"body":{"classes/CreateGroupDto.html":{}}}],["number(_avg_rating",{"_index":876,"title":{},"body":{"controllers/RecipeController.html":{}}}],["number(_cooking_time",{"_index":878,"title":{},"body":{"controllers/RecipeController.html":{}}}],["number(_views",{"_index":877,"title":{},"body":{"controllers/RecipeController.html":{}}}],["object",{"_index":656,"title":{},"body":{"classes/Notification.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["objectid",{"_index":329,"title":{},"body":{"classes/CreateFavoriteDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/Notification.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/ShoppingList.html":{},"classes/UpsertShoppingListDto.html":{}}}],["objectid(\"2943823572034",{"_index":416,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["observable",{"_index":982,"title":{},"body":{"guards/RolesGuard.html":{}}}],["onion",{"_index":253,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["onions",{"_index":248,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["open",{"_index":1222,"title":{},"body":{"index.html":{}}}],["optional",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/CompareIdGuard.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FavoritesModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1246,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1157,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":895,"title":{},"body":{"controllers/RecipeController.html":{}}}],["param('tag",{"_index":881,"title":{},"body":{"controllers/RecipeController.html":{}}}],["parameters",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/CompareIdGuard.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parseobjectidpipe",{"_index":712,"title":{"injectables/ParseObjectIdPipe.html":{}},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"coverage.html":{}}}],["partialtype",{"_index":975,"title":{},"body":{"classes/RegisterAuthDto.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createfavoritedto",{"_index":1058,"title":{},"body":{"classes/UpdateFavoriteDto.html":{}}}],["partialtype(creategroupdto",{"_index":1060,"title":{},"body":{"classes/UpdateGroupDto.html":{}}}],["partialtype(createingredientdto",{"_index":1062,"title":{},"body":{"classes/UpdateIngredientDto.html":{}}}],["partialtype(createnotificationdto",{"_index":1064,"title":{},"body":{"classes/UpdateNotificationDto.html":{}}}],["partialtype(createrecipedto",{"_index":1066,"title":{},"body":{"classes/UpdateRecipeDto.html":{}}}],["partialtype(createuserdto",{"_index":1074,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(loginauthdto",{"_index":976,"title":{},"body":{"classes/RegisterAuthDto.html":{}}}],["partialtype(upsertshoppinglistdto",{"_index":1070,"title":{},"body":{"classes/UpdateShoppingListDto.html":{}}}],["passport",{"_index":628,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":630,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":631,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/LoginAuthDto.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["password:plaintohash",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":450,"title":{},"body":{"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["patch('modify/:id",{"_index":857,"title":{},"body":{"controllers/RecipeController.html":{}}}],["path",{"_index":547,"title":{},"body":{"injectables/GroupService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{}}}],["payload",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":638,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.user_name",{"_index":639,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pet",{"_index":255,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["pie",{"_index":241,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["pie'})@isdefined()@isstring",{"_index":399,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["pie.png",{"_index":264,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["pie.png'})@isstring",{"_index":392,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["pipe.pipe",{"_index":841,"title":{},"body":{"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{}}}],["pipe.pipe.ts",{"_index":714,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"coverage.html":{}}}],["pipe.pipe.ts:8",{"_index":717,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{}}}],["pipetransform",{"_index":719,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{}}}],["plaintohash",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["please",{"_index":289,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"index.html":{}}}],["populate",{"_index":546,"title":{},"body":{"injectables/GroupService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{}}}],["post",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["post('/create",{"_index":667,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/RecipeController.html":{}}}],["post(':id/comment",{"_index":778,"title":{},"body":{"controllers/RecipeController.html":{}}}],["post('login",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["private",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["process.env.secret",{"_index":1266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1212,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1189,"title":{},"body":{"index.html":{}}}],["project",{"_index":1223,"title":{},"body":{"index.html":{}}}],["promise",{"_index":535,"title":{},"body":{"injectables/GroupService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["prop",{"_index":193,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Group.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"classes/Notification.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"classes/ShoppingList.html":{},"classes/User.html":{}}}],["prop(['object",{"_index":1079,"title":{},"body":{"classes/User.html":{}}}],["prop(['recipecomment",{"_index":729,"title":{},"body":{"classes/Recipe.html":{}}}],["prop([object",{"_index":209,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["prop([recipecomment",{"_index":752,"title":{},"body":{"classes/Recipe.html":{}}}],["prop(array",{"_index":1000,"title":{},"body":{"classes/ShoppingList.html":{}}}],["prop(undefined",{"_index":998,"title":{},"body":{"classes/ShoppingList.html":{}}}],["prop({required",{"_index":725,"title":{},"body":{"classes/Recipe.html":{},"classes/User.html":{}}}],["prop({type",{"_index":654,"title":{},"body":{"classes/Notification.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"classes/ShoppingList.html":{}}}],["properties",{"_index":192,"title":{"properties.html":{}},"body":{"classes/Badges.html":{},"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"classes/IngredientNested.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"classes/RegisterAuthDto.html":{},"classes/ShoppingList.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"properties.html":{}}}],["property.decorator",{"_index":375,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["providers",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FavoritesModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}}}],["qty",{"_index":236,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{}}}],["quantity",{"_index":1001,"title":{},"body":{"classes/ShoppingList.html":{},"classes/UpsertShoppingListDto.html":{}}}],["queries",{"_index":879,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["query",{"_index":833,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('author",{"_index":866,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('avg_rating",{"_index":867,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('cooking_time",{"_index":871,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('country",{"_index":870,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('difficulty",{"_index":872,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('food_type",{"_index":874,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('ingredients",{"_index":875,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('is_public",{"_index":868,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('meal_type",{"_index":869,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('name",{"_index":865,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('views",{"_index":873,"title":{},"body":{"controllers/RecipeController.html":{}}}],["qwerty1234",{"_index":421,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["read",{"_index":1232,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["really",{"_index":317,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["recepies._id",{"_index":548,"title":{},"body":{"injectables/GroupService.html":{}}}],["recipe",{"_index":284,"title":{"classes/Recipe.html":{}},"body":{"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"coverage.html":{}}}],["recipe.author",{"_index":943,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.avg_rating",{"_index":944,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.comments.push(comment",{"_index":970,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.controller",{"_index":900,"title":{},"body":{"modules/RecipeModule.html":{}}}],["recipe.cooking_time",{"_index":950,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.country",{"_index":949,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.difficulty",{"_index":951,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.dto",{"_index":837,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/UpdateRecipeDto.html":{}}}],["recipe.dto.ts",{"_index":216,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/UpdateRecipeDto.html":{},"coverage.html":{}}}],["recipe.dto.ts:10",{"_index":492,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{}}}],["recipe.dto.ts:11",{"_index":498,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:12",{"_index":493,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:16",{"_index":598,"title":{},"body":{"classes/IngredientNested.html":{}}}],["recipe.dto.ts:2",{"_index":497,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:21",{"_index":225,"title":{},"body":{"classes/CommentNested.html":{}}}],["recipe.dto.ts:24",{"_index":224,"title":{},"body":{"classes/CommentNested.html":{}}}],["recipe.dto.ts:27",{"_index":222,"title":{},"body":{"classes/CommentNested.html":{}}}],["recipe.dto.ts:3",{"_index":488,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:37",{"_index":400,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:4",{"_index":489,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:42",{"_index":387,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:47",{"_index":377,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:5",{"_index":495,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:51",{"_index":379,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:55",{"_index":393,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:6",{"_index":494,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:60",{"_index":396,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:65",{"_index":394,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:69",{"_index":398,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:7",{"_index":496,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:73",{"_index":385,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:77",{"_index":383,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:8",{"_index":491,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:81",{"_index":389,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:85",{"_index":402,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:89",{"_index":391,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:9",{"_index":490,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:94",{"_index":381,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.food_type",{"_index":953,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.is_public",{"_index":947,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.meal_type",{"_index":948,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.name",{"_index":902,"title":{},"body":{"modules/RecipeModule.html":{},"injectables/RecipeService.html":{}}}],["recipe.save",{"_index":971,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.service",{"_index":836,"title":{},"body":{"controllers/RecipeController.html":{},"modules/RecipeModule.html":{}}}],["recipe.views",{"_index":952,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe/recipe.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["recipecomment",{"_index":728,"title":{"classes/RecipeComment.html":{}},"body":{"classes/Recipe.html":{},"classes/RecipeComment.html":{},"coverage.html":{}}}],["recipecontroller",{"_index":762,"title":{"controllers/RecipeController.html":{}},"body":{"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"coverage.html":{}}}],["recipedata",{"_index":936,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipedocument",{"_index":745,"title":{},"body":{"classes/Recipe.html":{},"injectables/RecipeService.html":{},"miscellaneous/typealiases.html":{}}}],["recipemodel",{"_index":906,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipemodule",{"_index":40,"title":{"modules/RecipeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RecipeModule.html":{},"modules.html":{},"overview.html":{}}}],["recipeschema",{"_index":753,"title":{},"body":{"classes/Recipe.html":{},"modules/RecipeModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["recipeservice",{"_index":835,"title":{"injectables/RecipeService.html":{}},"body":{"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"coverage.html":{},"overview.html":{}}}],["recipies",{"_index":288,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"injectables/RecipeService.html":{}}}],["recipies.filter",{"_index":942,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipiesdata",{"_index":932,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipiesdata.length",{"_index":935,"title":{},"body":{"injectables/RecipeService.html":{}}}],["ref",{"_index":738,"title":{},"body":{"classes/Recipe.html":{},"classes/RecipeComment.html":{},"classes/ShoppingList.html":{}}}],["ref:'ingredient",{"_index":751,"title":{},"body":{"classes/Recipe.html":{},"classes/ShoppingList.html":{},"classes/UpsertShoppingListDto.html":{}}}],["reflect",{"_index":1172,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":979,"title":{},"body":{"guards/RolesGuard.html":{}}}],["register",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(userobject",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerauthdto",{"_index":91,"title":{"classes/RegisterAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterAuthDto.html":{},"coverage.html":{}}}],["registered",{"_index":423,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["registeruser",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeruser(@body",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeruser(userobject",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["remove",{"_index":436,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":465,"title":{},"body":{"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":445,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["removedgroup",{"_index":562,"title":{},"body":{"injectables/GroupService.html":{}}}],["removednotification",{"_index":704,"title":{},"body":{"injectables/NotificationService.html":{}}}],["removedrecipe",{"_index":939,"title":{},"body":{"injectables/RecipeService.html":{}}}],["removeduser",{"_index":1133,"title":{},"body":{"injectables/UserService.html":{}}}],["removes",{"_index":480,"title":{},"body":{"injectables/FavoritesService.html":{},"injectables/IngredientService.html":{},"injectables/ShoppingListService.html":{}}}],["repository",{"_index":1201,"title":{},"body":{"index.html":{}}}],["req",{"_index":991,"title":{},"body":{"guards/RolesGuard.html":{}}}],["req.user",{"_index":992,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request",{"_index":304,"title":{},"body":{"guards/CompareIdGuard.html":{},"controllers/ShoppingListController.html":{}}}],["request.body",{"_index":307,"title":{},"body":{"guards/CompareIdGuard.html":{}}}],["request.user",{"_index":306,"title":{},"body":{"guards/CompareIdGuard.html":{}}}],["required",{"_index":202,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["requiredroles",{"_index":987,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":993,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":784,"title":{},"body":{"controllers/RecipeController.html":{}}}],["res.status(httpstatus.ok).json",{"_index":851,"title":{},"body":{"controllers/RecipeController.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FavoritesModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":781,"title":{},"body":{"controllers/RecipeController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/CompareIdGuard.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/CompareIdGuard.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"controllers/RecipeController.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.user",{"_index":208,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["roles",{"_index":844,"title":{},"body":{"controllers/RecipeController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":892,"title":{},"body":{"controllers/RecipeController.html":{}}}],["roles_key",{"_index":984,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":61,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesguard)@get('/top10/views",{"_index":825,"title":{},"body":{"controllers/RecipeController.html":{}}}],["run",{"_index":1207,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":983,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["sanitizefilter",{"_index":550,"title":{},"body":{"injectables/GroupService.html":{},"injectables/RecipeService.html":{}}}],["scalable",{"_index":1194,"title":{},"body":{"index.html":{}}}],["schema",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{},"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Group.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"modules/IngredientModule.html":{},"classes/Notification.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"modules/RecipeModule.html":{},"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schema/shopping_list.schema",{"_index":1035,"title":{},"body":{"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{}}}],["schemafactory",{"_index":195,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Group.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"classes/Notification.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"classes/ShoppingList.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(group",{"_index":506,"title":{},"body":{"classes/Group.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(ingredient",{"_index":571,"title":{},"body":{"classes/Ingredient.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(notification",{"_index":663,"title":{},"body":{"classes/Notification.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(recipe",{"_index":754,"title":{},"body":{"classes/Recipe.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(recipecomment",{"_index":761,"title":{},"body":{"classes/RecipeComment.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(shoppinglist",{"_index":1003,"title":{},"body":{"classes/ShoppingList.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":213,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/group.schema",{"_index":539,"title":{},"body":{"injectables/GroupService.html":{}}}],["schemas/ingredient.schema",{"_index":594,"title":{},"body":{"modules/IngredientModule.html":{},"injectables/IngredientService.html":{}}}],["schemas/notification.schema",{"_index":692,"title":{},"body":{"injectables/NotificationService.html":{},"modules/NotificationsModule.html":{}}}],["schemas/recipe.schema",{"_index":901,"title":{},"body":{"modules/RecipeModule.html":{},"injectables/RecipeService.html":{}}}],["schemas/user.schema",{"_index":427,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["second",{"_index":251,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["secret",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{},"modules/ShoppingListModule.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":636,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sergi",{"_index":368,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{}}}],["sergial",{"_index":425,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["server",{"_index":1195,"title":{},"body":{"index.html":{}}}],["setmetadata(roles_key",{"_index":1267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setoptions",{"_index":549,"title":{},"body":{"injectables/GroupService.html":{},"injectables/RecipeService.html":{}}}],["shopping",{"_index":1006,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["shopping_list.controller",{"_index":1034,"title":{},"body":{"modules/ShoppingListModule.html":{}}}],["shopping_list.dto",{"_index":1022,"title":{},"body":{"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateShoppingListDto.html":{}}}],["shopping_list.dto.ts",{"_index":1068,"title":{},"body":{"classes/UpdateShoppingListDto.html":{},"classes/UpsertShoppingListDto.html":{},"coverage.html":{}}}],["shopping_list.dto.ts:10",{"_index":1077,"title":{},"body":{"classes/UpsertShoppingListDto.html":{}}}],["shopping_list.dto.ts:7",{"_index":1076,"title":{},"body":{"classes/UpsertShoppingListDto.html":{}}}],["shopping_list.service",{"_index":1020,"title":{},"body":{"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{}}}],["shopping_list/shopping_list.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["shoppinglist",{"_index":995,"title":{"classes/ShoppingList.html":{}},"body":{"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"coverage.html":{}}}],["shoppinglist.name",{"_index":1037,"title":{},"body":{"modules/ShoppingListModule.html":{}}}],["shoppinglistcontroller",{"_index":1004,"title":{"controllers/ShoppingListController.html":{}},"body":{"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"coverage.html":{}}}],["shoppinglistdata",{"_index":1052,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["shoppinglistdata.length",{"_index":1054,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["shoppinglistfound",{"_index":1048,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["shoppinglistmodel",{"_index":1041,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["shoppinglistmodule",{"_index":41,"title":{"modules/ShoppingListModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ShoppingListModule.html":{},"modules.html":{},"overview.html":{}}}],["shoppinglistschema",{"_index":1002,"title":{},"body":{"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["shoppinglistservice",{"_index":1019,"title":{"injectables/ShoppingListService.html":{}},"body":{"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"coverage.html":{},"overview.html":{}}}],["shoppinglistupdated",{"_index":1050,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["side",{"_index":1196,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{},"modules/ShoppingListModule.html":{}}}],["singlenotificationdata",{"_index":700,"title":{},"body":{"injectables/NotificationService.html":{}}}],["slices",{"_index":250,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":1226,"title":{},"body":{"index.html":{}}}],["src/.../comment.schema.ts",{"_index":1256,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../group.schema.ts",{"_index":1257,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../ingredient.schema.ts",{"_index":1258,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt.constants.ts",{"_index":1263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1186,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../notification.schema.ts",{"_index":1259,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../recipe.schema.ts",{"_index":1260,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":1181,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":1264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../shopping_list.schema.ts",{"_index":1265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":1261,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":69,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":70,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:11",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:11",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:19",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants/jwt.constants",{"_index":1036,"title":{},"body":{"modules/ShoppingListModule.html":{}}}],["src/auth/constants/jwt.constants.ts",{"_index":1142,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/roles.decorator",{"_index":845,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":1145,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login",{"_index":642,"title":{},"body":{"classes/LoginAuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/register",{"_index":972,"title":{},"body":{"classes/RegisterAuthDto.html":{},"coverage.html":{}}}],["src/auth/guards/compare",{"_index":296,"title":{},"body":{"guards/CompareIdGuard.html":{},"controllers/ShoppingListController.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":614,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard",{"_index":846,"title":{},"body":{"controllers/RecipeController.html":{},"modules/RecipeModule.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":977,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:12",{"_index":981,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:9",{"_index":980,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/models/role.enum",{"_index":197,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"controllers/RecipeController.html":{},"classes/User.html":{}}}],["src/auth/models/role.enum.ts",{"_index":1182,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/schemas/auth.entity.ts",{"_index":75,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":620,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:19",{"_index":624,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:7",{"_index":622,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/favorites/dto/create",{"_index":327,"title":{},"body":{"classes/CreateFavoriteDto.html":{},"coverage.html":{}}}],["src/favorites/dto/update",{"_index":1057,"title":{},"body":{"classes/UpdateFavoriteDto.html":{},"coverage.html":{}}}],["src/favorites/favorites.controller.ts",{"_index":432,"title":{},"body":{"controllers/FavoritesController.html":{},"coverage.html":{}}}],["src/favorites/favorites.controller.ts:11",{"_index":439,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["src/favorites/favorites.controller.ts:16",{"_index":440,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["src/favorites/favorites.controller.ts:21",{"_index":443,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["src/favorites/favorites.controller.ts:26",{"_index":451,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["src/favorites/favorites.controller.ts:31",{"_index":447,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["src/favorites/favorites.module.ts",{"_index":469,"title":{},"body":{"modules/FavoritesModule.html":{}}}],["src/favorites/favorites.service.ts",{"_index":471,"title":{},"body":{"injectables/FavoritesService.html":{},"coverage.html":{}}}],["src/favorites/favorites.service.ts:11",{"_index":473,"title":{},"body":{"injectables/FavoritesService.html":{}}}],["src/favorites/favorites.service.ts:15",{"_index":474,"title":{},"body":{"injectables/FavoritesService.html":{}}}],["src/favorites/favorites.service.ts:19",{"_index":476,"title":{},"body":{"injectables/FavoritesService.html":{}}}],["src/favorites/favorites.service.ts:23",{"_index":475,"title":{},"body":{"injectables/FavoritesService.html":{}}}],["src/favorites/favorites.service.ts:7",{"_index":472,"title":{},"body":{"injectables/FavoritesService.html":{}}}],["src/favorites/schemas/favorite.entity.ts",{"_index":429,"title":{},"body":{"classes/Favorite.html":{},"coverage.html":{}}}],["src/group/dto/create",{"_index":333,"title":{},"body":{"classes/CreateGroupDto.html":{},"coverage.html":{}}}],["src/group/dto/filter",{"_index":482,"title":{},"body":{"classes/GetGroupFilterDto.html":{},"coverage.html":{}}}],["src/group/dto/update",{"_index":1059,"title":{},"body":{"classes/UpdateGroupDto.html":{},"coverage.html":{}}}],["src/group/group.controller.ts",{"_index":508,"title":{},"body":{"controllers/GroupController.html":{},"coverage.html":{}}}],["src/group/group.controller.ts:11",{"_index":510,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:16",{"_index":511,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:21",{"_index":512,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:26",{"_index":515,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:31",{"_index":513,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.module.ts",{"_index":527,"title":{},"body":{"modules/GroupModule.html":{}}}],["src/group/group.service.ts",{"_index":529,"title":{},"body":{"injectables/GroupService.html":{},"coverage.html":{}}}],["src/group/group.service.ts:15",{"_index":533,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:20",{"_index":534,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:32",{"_index":536,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:47",{"_index":538,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:52",{"_index":537,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:9",{"_index":531,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/schemas/group.schema.ts",{"_index":500,"title":{},"body":{"classes/Group.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/group/schemas/group.schema.ts:10",{"_index":502,"title":{},"body":{"classes/Group.html":{}}}],["src/group/schemas/group.schema.ts:13",{"_index":501,"title":{},"body":{"classes/Group.html":{}}}],["src/group/schemas/group.schema.ts:16",{"_index":503,"title":{},"body":{"classes/Group.html":{}}}],["src/ingredient/dto/create",{"_index":349,"title":{},"body":{"classes/CreateIngredientDto.html":{},"coverage.html":{}}}],["src/ingredient/dto/update",{"_index":1061,"title":{},"body":{"classes/UpdateIngredientDto.html":{},"coverage.html":{}}}],["src/ingredient/ingredient.controller.ts",{"_index":573,"title":{},"body":{"controllers/IngredientController.html":{},"coverage.html":{}}}],["src/ingredient/ingredient.controller.ts:11",{"_index":575,"title":{},"body":{"controllers/IngredientController.html":{}}}],["src/ingredient/ingredient.controller.ts:16",{"_index":576,"title":{},"body":{"controllers/IngredientController.html":{}}}],["src/ingredient/ingredient.controller.ts:21",{"_index":577,"title":{},"body":{"controllers/IngredientController.html":{}}}],["src/ingredient/ingredient.controller.ts:26",{"_index":580,"title":{},"body":{"controllers/IngredientController.html":{}}}],["src/ingredient/ingredient.controller.ts:31",{"_index":578,"title":{},"body":{"controllers/IngredientController.html":{}}}],["src/ingredient/ingredient.module.ts",{"_index":592,"title":{},"body":{"modules/IngredientModule.html":{}}}],["src/ingredient/ingredient.service.ts",{"_index":599,"title":{},"body":{"injectables/IngredientService.html":{},"coverage.html":{}}}],["src/ingredient/ingredient.service.ts:17",{"_index":603,"title":{},"body":{"injectables/IngredientService.html":{}}}],["src/ingredient/ingredient.service.ts:22",{"_index":604,"title":{},"body":{"injectables/IngredientService.html":{}}}],["src/ingredient/ingredient.service.ts:26",{"_index":605,"title":{},"body":{"injectables/IngredientService.html":{}}}],["src/ingredient/ingredient.service.ts:30",{"_index":607,"title":{},"body":{"injectables/IngredientService.html":{}}}],["src/ingredient/ingredient.service.ts:34",{"_index":606,"title":{},"body":{"injectables/IngredientService.html":{}}}],["src/ingredient/ingredient.service.ts:9",{"_index":601,"title":{},"body":{"injectables/IngredientService.html":{}}}],["src/ingredient/schemas/ingredient.schema.ts",{"_index":566,"title":{},"body":{"classes/Ingredient.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/ingredient/schemas/ingredient.schema.ts:12",{"_index":567,"title":{},"body":{"classes/Ingredient.html":{}}}],["src/ingredient/schemas/ingredient.schema.ts:9",{"_index":568,"title":{},"body":{"classes/Ingredient.html":{}}}],["src/main.ts",{"_index":1148,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/notifications/dto/create",{"_index":357,"title":{},"body":{"classes/CreateNotificationDto.html":{},"coverage.html":{}}}],["src/notifications/dto/update",{"_index":1063,"title":{},"body":{"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["src/notifications/notifications.controller.ts",{"_index":665,"title":{},"body":{"controllers/NotificationController.html":{},"coverage.html":{}}}],["src/notifications/notifications.controller.ts:12",{"_index":668,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notifications.controller.ts:17",{"_index":669,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notifications.controller.ts:22",{"_index":670,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notifications.controller.ts:27",{"_index":673,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notifications.controller.ts:32",{"_index":671,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notifications.module.ts",{"_index":709,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["src/notifications/notifications.service.ts",{"_index":683,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["src/notifications/notifications.service.ts:10",{"_index":685,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notifications.service.ts:15",{"_index":687,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notifications.service.ts:20",{"_index":688,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notifications.service.ts:28",{"_index":689,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notifications.service.ts:35",{"_index":691,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notifications.service.ts:41",{"_index":690,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/schemas/notification.schema.ts",{"_index":653,"title":{},"body":{"classes/Notification.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/notifications/schemas/notification.schema.ts:11",{"_index":657,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/schemas/notification.schema.ts:14",{"_index":655,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/schemas/notification.schema.ts:17",{"_index":659,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/schemas/notification.schema.ts:20",{"_index":658,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/schemas/notification.schema.ts:23",{"_index":660,"title":{},"body":{"classes/Notification.html":{}}}],["src/recipe/dto/add",{"_index":312,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/recipe/dto/create",{"_index":215,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"coverage.html":{}}}],["src/recipe/dto/filter",{"_index":487,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{},"coverage.html":{}}}],["src/recipe/dto/update",{"_index":1065,"title":{},"body":{"classes/UpdateRecipeDto.html":{},"coverage.html":{}}}],["src/recipe/recipe.controller.ts",{"_index":763,"title":{},"body":{"controllers/RecipeController.html":{},"coverage.html":{}}}],["src/recipe/recipe.controller.ts:103",{"_index":789,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:107",{"_index":793,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:111",{"_index":814,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:115",{"_index":817,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:119",{"_index":799,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:123",{"_index":796,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:127",{"_index":802,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:131",{"_index":823,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:135",{"_index":811,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:143",{"_index":826,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:148",{"_index":779,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:21",{"_index":783,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:31",{"_index":786,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:36",{"_index":827,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:43",{"_index":832,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:54",{"_index":829,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:63",{"_index":808,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:99",{"_index":820,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.module.ts",{"_index":899,"title":{},"body":{"modules/RecipeModule.html":{}}}],["src/recipe/recipe.service.ts",{"_index":903,"title":{},"body":{"injectables/RecipeService.html":{},"coverage.html":{}}}],["src/recipe/recipe.service.ts:10",{"_index":905,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:112",{"_index":921,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:119",{"_index":911,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:126",{"_index":912,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:133",{"_index":919,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:140",{"_index":920,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:147",{"_index":914,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:154",{"_index":913,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:16",{"_index":909,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:161",{"_index":915,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:168",{"_index":922,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:175",{"_index":918,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:182",{"_index":923,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:190",{"_index":907,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:21",{"_index":910,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:32",{"_index":924,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:48",{"_index":926,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:53",{"_index":925,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:58",{"_index":917,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/schemas/comment.schema",{"_index":744,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/comment.schema.ts",{"_index":755,"title":{},"body":{"classes/RecipeComment.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/recipe/schemas/comment.schema.ts:12",{"_index":758,"title":{},"body":{"classes/RecipeComment.html":{}}}],["src/recipe/schemas/comment.schema.ts:15",{"_index":757,"title":{},"body":{"classes/RecipeComment.html":{}}}],["src/recipe/schemas/comment.schema.ts:18",{"_index":756,"title":{},"body":{"classes/RecipeComment.html":{}}}],["src/recipe/schemas/recipe.schema.ts",{"_index":724,"title":{},"body":{"classes/Recipe.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/recipe/schemas/recipe.schema.ts:35",{"_index":742,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:38",{"_index":733,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:41",{"_index":726,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:44",{"_index":727,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:47",{"_index":736,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:50",{"_index":740,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:53",{"_index":739,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:56",{"_index":741,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:59",{"_index":732,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:62",{"_index":731,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:65",{"_index":734,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:68",{"_index":743,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:71",{"_index":735,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:74",{"_index":730,"title":{},"body":{"classes/Recipe.html":{}}}],["src/shopping_list/dto/update",{"_index":1067,"title":{},"body":{"classes/UpdateShoppingListDto.html":{},"coverage.html":{}}}],["src/shopping_list/dto/upsert",{"_index":1075,"title":{},"body":{"classes/UpsertShoppingListDto.html":{},"coverage.html":{}}}],["src/shopping_list/schema/shopping_list.schema.ts",{"_index":996,"title":{},"body":{"classes/ShoppingList.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shopping_list/schema/shopping_list.schema.ts:14",{"_index":999,"title":{},"body":{"classes/ShoppingList.html":{}}}],["src/shopping_list/schema/shopping_list.schema.ts:8",{"_index":997,"title":{},"body":{"classes/ShoppingList.html":{}}}],["src/shopping_list/shopping_list.controller.ts",{"_index":1005,"title":{},"body":{"controllers/ShoppingListController.html":{},"coverage.html":{}}}],["src/shopping_list/shopping_list.controller.ts:15",{"_index":1017,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["src/shopping_list/shopping_list.controller.ts:20",{"_index":1009,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["src/shopping_list/shopping_list.controller.ts:25",{"_index":1010,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["src/shopping_list/shopping_list.controller.ts:30",{"_index":1013,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["src/shopping_list/shopping_list.controller.ts:35",{"_index":1011,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["src/shopping_list/shopping_list.module.ts",{"_index":1033,"title":{},"body":{"modules/ShoppingListModule.html":{}}}],["src/shopping_list/shopping_list.service.ts",{"_index":1038,"title":{},"body":{"injectables/ShoppingListService.html":{},"coverage.html":{}}}],["src/shopping_list/shopping_list.service.ts:10",{"_index":1040,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["src/shopping_list/shopping_list.service.ts:17",{"_index":1046,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["src/shopping_list/shopping_list.service.ts:25",{"_index":1042,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["src/shopping_list/shopping_list.service.ts:34",{"_index":1043,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["src/shopping_list/shopping_list.service.ts:50",{"_index":1045,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["src/shopping_list/shopping_list.service.ts:54",{"_index":1044,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["src/user/dto/create",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":1072,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/schemas/user.schema",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/RecipeComment.html":{},"guards/RolesGuard.html":{}}}],["src/user/schemas/user.schema.ts",{"_index":191,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/user/schemas/user.schema.ts:10",{"_index":430,"title":{},"body":{"classes/Favorites.html":{}}}],["src/user/schemas/user.schema.ts:16",{"_index":194,"title":{},"body":{"classes/Badges.html":{}}}],["src/user/schemas/user.schema.ts:23",{"_index":706,"title":{},"body":{"classes/Notification_list.html":{}}}],["src/user/schemas/user.schema.ts:29",{"_index":564,"title":{},"body":{"classes/Groups.html":{}}}],["src/user/schemas/user.schema.ts:35",{"_index":1083,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:38",{"_index":1085,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:41",{"_index":1089,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:44",{"_index":1081,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:47",{"_index":1087,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:50",{"_index":1088,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:53",{"_index":1082,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:56",{"_index":1078,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:59",{"_index":1080,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:62",{"_index":1086,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:65",{"_index":1084,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.controller.ts",{"_index":1091,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:13",{"_index":1093,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:20",{"_index":1095,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:27",{"_index":1097,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:34",{"_index":1101,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:41",{"_index":1099,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/user/user.module.ts",{"_index":1113,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":1116,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:15",{"_index":1118,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:20",{"_index":1119,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:28",{"_index":1120,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:40",{"_index":1122,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:45",{"_index":1121,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:9",{"_index":1117,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utilities/parse",{"_index":713,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"coverage.html":{}}}],["start",{"_index":1208,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1211,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1213,"title":{},"body":{"index.html":{}}}],["started",{"_index":1188,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1200,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1138,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":1234,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":627,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":346,"title":{},"body":{"classes/CreateGroupDto.html":{},"classes/Group.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["successfully",{"_index":853,"title":{},"body":{"controllers/RecipeController.html":{}}}],["sugar",{"_index":244,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["super",{"_index":632,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":1227,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1244,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1176,"title":{},"body":{"dependencies.html":{}}}],["system",{"_index":1184,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["table",{"_index":1156,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1155,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":790,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["taste",{"_index":256,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["tasty",{"_index":318,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["test",{"_index":1216,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1219,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1218,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1215,"title":{},"body":{"index.html":{}}}],["text_field",{"_index":361,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/Notification.html":{}}}],["thanks",{"_index":1225,"title":{},"body":{"index.html":{}}}],["third",{"_index":254,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(userobjectlogin",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(userobject",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.favoritesservice.create(createfavoritedto",{"_index":459,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["this.favoritesservice.findall",{"_index":460,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["this.favoritesservice.findone(+id",{"_index":462,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["this.favoritesservice.remove(+id",{"_index":466,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["this.favoritesservice.update(+id",{"_index":464,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["this.findall",{"_index":941,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.groupmodel(creategroupdto",{"_index":542,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupmodel.find",{"_index":545,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupmodel.findbyid(id",{"_index":557,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupmodel.findbyidanddelete(id",{"_index":563,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupmodel.findbyidandupdate(id,updategroupdto",{"_index":561,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupservice.create(creategroupdto",{"_index":520,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.findall",{"_index":521,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.findone(id",{"_index":522,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.remove(id",{"_index":524,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.update(id",{"_index":523,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.ingredientmodel(createingredientdto",{"_index":610,"title":{},"body":{"injectables/IngredientService.html":{}}}],["this.ingredientmodel.find",{"_index":612,"title":{},"body":{"injectables/IngredientService.html":{}}}],["this.ingredientservice.create(createingredientdto",{"_index":585,"title":{},"body":{"controllers/IngredientController.html":{}}}],["this.ingredientservice.findall",{"_index":586,"title":{},"body":{"controllers/IngredientController.html":{}}}],["this.ingredientservice.findone(+id",{"_index":587,"title":{},"body":{"controllers/IngredientController.html":{}}}],["this.ingredientservice.remove(+id",{"_index":589,"title":{},"body":{"controllers/IngredientController.html":{}}}],["this.ingredientservice.update(+id",{"_index":588,"title":{},"body":{"controllers/IngredientController.html":{}}}],["this.jwtauthservice.sign(payload",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.notificationmodel(createnotificationdto",{"_index":695,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationmodel.find",{"_index":698,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationmodel.findbyid(id",{"_index":701,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationmodel.findbyidanddelete(id",{"_index":705,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationmodel.findbyidandupdate(id,updatenotificationdto",{"_index":703,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationservice.create(createnotificationdto",{"_index":678,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.findall",{"_index":679,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.findone(id",{"_index":680,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.remove(id",{"_index":682,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.update(id",{"_index":681,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.recipemodel(createrecipedto",{"_index":930,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find",{"_index":933,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find().sort({\"views",{"_index":968,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({author",{"_index":959,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({avg_rating",{"_index":960,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({cooking_time",{"_index":964,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({country",{"_index":963,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({difficulty",{"_index":965,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({food_type",{"_index":967,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({is_public",{"_index":961,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({meal_type",{"_index":962,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({name",{"_index":958,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({views",{"_index":966,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.findbyid(id",{"_index":937,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.findbyidanddelete(id",{"_index":940,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.findbyidandupdate(id,updaterecipedto",{"_index":938,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipeservice.addcomment(id",{"_index":896,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.create(createrecipedto",{"_index":850,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findall",{"_index":855,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbyauthor(tag",{"_index":883,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbyav_rating(tag",{"_index":884,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbycooking_time(tag",{"_index":888,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbycountry(tag",{"_index":887,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbydifficulty(tag",{"_index":889,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbyfilter(queries",{"_index":880,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbyfood_type(tag",{"_index":891,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbyis_public(tag",{"_index":885,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbymeal_type(tag",{"_index":886,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbyname(tag",{"_index":882,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbyviews(tag",{"_index":890,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findmostviewed",{"_index":894,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findone(id",{"_index":856,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.remove(id",{"_index":863,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.update(id",{"_index":859,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":988,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.shoppinglistmodel.find",{"_index":1053,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["this.shoppinglistmodel.find({'ingredients.ingredient':'63d0f9903dccc038d38d416c",{"_index":1049,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["this.shoppinglistmodel.findbyid(id",{"_index":1055,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["this.shoppinglistmodel.findoneandupdate",{"_index":1051,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["this.shoppinglistservice.findall",{"_index":1027,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["this.shoppinglistservice.findone(id",{"_index":1028,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["this.shoppinglistservice.remove(number(id",{"_index":1030,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["this.shoppinglistservice.update(number(id",{"_index":1029,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["this.shoppinglistservice.upsertshoppinglist(upsertshoppinglistdto",{"_index":1026,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["this.usermodel(createuserdto",{"_index":1124,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.create(userobject",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel.find",{"_index":1127,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(id",{"_index":1130,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyidanddelete(id",{"_index":1134,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyidandupdate(id,updateuserdto",{"_index":1132,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone({email",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.create(createuserdto",{"_index":1105,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":1106,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(id",{"_index":1107,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(id",{"_index":1109,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(id",{"_index":1108,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipe.html":{}}}],["tiny",{"_index":249,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["title",{"_index":219,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"classes/Notification.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{}}}],["title:\"nice",{"_index":283,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["token",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["touch",{"_index":1235,"title":{},"body":{"index.html":{}}}],["transform",{"_index":715,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{}}}],["transform(value",{"_index":716,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{}}}],["transformer",{"_index":233,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateGroupDto.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"dependencies.html":{}}}],["true",{"_index":203,"title":{},"body":{"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateRecipeDto.html":{},"classes/Favorites.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/IngredientNested.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{}}}],["true'})@isdefined()@isboolean",{"_index":395,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["twitter",{"_index":1240,"title":{},"body":{"index.html":{}}}],["type",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1254,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":1199,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1177,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":737,"title":{},"body":{"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"classes/User.html":{}}}],["unit",{"_index":1214,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1253,"title":{},"body":{"properties.html":{}}}],["update",{"_index":437,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":463,"title":{},"body":{"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":448,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated",{"_index":860,"title":{},"body":{"controllers/RecipeController.html":{}}}],["updatedgroup",{"_index":560,"title":{},"body":{"injectables/GroupService.html":{}}}],["updatednotification",{"_index":702,"title":{},"body":{"injectables/NotificationService.html":{}}}],["updatedrecipe",{"_index":858,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["updateduser",{"_index":1131,"title":{},"body":{"injectables/UserService.html":{}}}],["updatefavoritedto",{"_index":449,"title":{"classes/UpdateFavoriteDto.html":{}},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/UpdateFavoriteDto.html":{},"coverage.html":{}}}],["updategroupdto",{"_index":514,"title":{"classes/UpdateGroupDto.html":{}},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/UpdateGroupDto.html":{},"coverage.html":{}}}],["updateingredientdto",{"_index":579,"title":{"classes/UpdateIngredientDto.html":{}},"body":{"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"classes/UpdateIngredientDto.html":{},"coverage.html":{}}}],["updatenotificationdto",{"_index":672,"title":{"classes/UpdateNotificationDto.html":{}},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["updaterecipedto",{"_index":830,"title":{"classes/UpdateRecipeDto.html":{}},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/UpdateRecipeDto.html":{},"coverage.html":{}}}],["updates",{"_index":479,"title":{},"body":{"injectables/FavoritesService.html":{},"injectables/IngredientService.html":{},"injectables/ShoppingListService.html":{}}}],["updateshoppinglistdto",{"_index":1012,"title":{"classes/UpdateShoppingListDto.html":{}},"body":{"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateShoppingListDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":1071,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["upsert",{"_index":1069,"title":{},"body":{"classes/UpdateShoppingListDto.html":{}}}],["upsertshoppinglist",{"_index":1008,"title":{},"body":{"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{}}}],["upsertshoppinglist(@body",{"_index":1025,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["upsertshoppinglist(upsertshoppinglistdto",{"_index":1014,"title":{},"body":{"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{}}}],["upsertshoppinglistdto",{"_index":1015,"title":{"classes/UpsertShoppingListDto.html":{}},"body":{"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpsertShoppingListDto.html":{},"coverage.html":{}}}],["useguards",{"_index":834,"title":{},"body":{"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":848,"title":{},"body":{"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":116,"title":{"classes/User.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"guards/CompareIdGuard.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user.controller",{"_index":1115,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":1073,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":419,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:15",{"_index":426,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":413,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":422,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":424,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":414,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":409,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":411,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":420,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:39",{"_index":417,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:9",{"_index":415,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":309,"title":{},"body":{"guards/CompareIdGuard.html":{}}}],["user.name",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["user.role?.includes(role",{"_index":994,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.service",{"_index":1103,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["user:finduser",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["user_name",{"_index":206,"title":{},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"injectables/JwtStrategy.html":{},"classes/Notification_list.html":{},"classes/RegisterAuthDto.html":{},"classes/User.html":{}}}],["usercontroller",{"_index":1090,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":1129,"title":{},"body":{"injectables/UserService.html":{}}}],["userdocument",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["userid",{"_index":637,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usermodel",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":42,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userobject",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["userobjectlogin",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["userschema",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{},"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersdata",{"_index":1126,"title":{},"body":{"injectables/UserService.html":{}}}],["usersdata.length",{"_index":1128,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":1102,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["valid",{"_index":558,"title":{},"body":{"injectables/GroupService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["validate",{"_index":621,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":623,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":230,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateGroupDto.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["validatenested()@type(undefined",{"_index":380,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["validator",{"_index":232,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateGroupDto.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"classes/LoginAuthDto.html":{},"classes/RegisterAuthDto.html":{},"dependencies.html":{}}}],["validobjectid",{"_index":721,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{}}}],["value",{"_index":718,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1143,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1262,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1251,"title":{},"body":{"properties.html":{}}}],["views",{"_index":280,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["watch",{"_index":1209,"title":{},"body":{"index.html":{}}}],["website",{"_index":1238,"title":{},"body":{"index.html":{}}}],["world",{"_index":72,"title":{},"body":{"injectables/AppService.html":{}}}],["yarn",{"_index":1203,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1230,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FavoritesModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nFavoritesModule\n\nFavoritesModule\n\nAppModule -->\n\nFavoritesModule->AppModule\n\n\n\n\n\nGroupModule\n\nGroupModule\n\nAppModule -->\n\nGroupModule->AppModule\n\n\n\n\n\nIngredientModule\n\nIngredientModule\n\nAppModule -->\n\nIngredientModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nRecipeModule\n\nRecipeModule\n\nAppModule -->\n\nRecipeModule->AppModule\n\n\n\n\n\nShoppingListModule\n\nShoppingListModule\n\nAppModule -->\n\nShoppingListModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            FavoritesModule\n                        \n                        \n                            GroupModule\n                        \n                        \n                            IngredientModule\n                        \n                        \n                            NotificationsModule\n                        \n                        \n                            RecipeModule\n                        \n                        \n                            ShoppingListModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport * as dotenv from 'dotenv';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RecipeModule } from './recipe/recipe.module';\nimport { GroupModule } from './group/group.module';\nimport { IngredientModule } from './ingredient/ingredient.module';\nimport { UserModule } from './user/user.module';\nimport { NotificationsModule } from './notifications/notifications.module';\nimport { AuthModule } from './auth/auth.module';\nimport { APP_GUARD } from '@nestjs/core';\nimport { RolesGuard } from './auth/guards/roles.guard';\nimport { FavoritesModule } from './favorites/favorites.module';\nimport { ShoppingListModule } from './shopping_list/shopping_list.module';\n\ndotenv.config()\n\n\n@Module({\n  imports: [\n    MongooseModule.forRoot(process.env.MONGODB_URL),\n    RecipeModule,\n    GroupModule,\n    IngredientModule,\n    UserModule,\n    NotificationsModule,\n    AuthModule,\n    FavoritesModule,\n    ShoppingListModule\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/schemas/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loginUser\n                            \n                            \n                                registerUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loginUser\n                        \n                    \n                \n            \n            \n                \nloginUser(userObjectLogin: LoginAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userObjectLogin\n                                    \n                                                LoginAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerUser\n                        \n                    \n                \n            \n            \n                \nregisterUser(userObject: RegisterAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userObject\n                                    \n                                                RegisterAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginAuthDto } from './dto/login-auth.dto';\nimport { RegisterAuthDto } from './dto/register-auth.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('register')\n  registerUser(@Body() userObject: RegisterAuthDto) {\n    return this.authService.register(userObject);\n  }\n\n  @Post('login')\n  loginUser(@Body() userObjectLogin: LoginAuthDto) {\n    return this.authService.login(userObjectLogin);\n  }\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { User, UserSchema } from 'src/user/schemas/user.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { JwtModule } from \"@nestjs/jwt\";\nimport { jwtConstants } from './constants/jwt.constants';\nimport { UserModule } from 'src/user/user.module';\nimport { JwtStrategy  } from \"./strategies/jwt.strategy\";\nimport { RolesGuard } from './guards/roles.guard';\n\n@Module({\n  imports:[\n    MongooseModule.forFeature([\n      { \n        name: User.name,\n        schema: UserSchema,\n      },\n    ]),\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '1440h' },\n    }),\n    UserModule\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, RolesGuard]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, jwtAuthService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtAuthService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(userObjectLogin: LoginAuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userObjectLogin\n                                    \n                                                LoginAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(userObject: RegisterAuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userObject\n                                    \n                                                RegisterAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User, UserDocument } from 'src/user/schemas/user.schema';\nimport { LoginAuthDto } from './dto/login-auth.dto';\nimport { RegisterAuthDto } from './dto/register-auth.dto';\nimport { hash, compare } from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n\n  constructor(\n    @InjectModel(User.name) \n    private readonly userModel: Model,\n    private jwtAuthService:JwtService\n  ){}\n\n  async register(userObject: RegisterAuthDto) {\n    const { password } = userObject;\n    const plainToHash = await hash(password, 10)\n    userObject = {...userObject, password:plainToHash};\n    return this.userModel.create(userObject);\n  }\n\n  async login(userObjectLogin: LoginAuthDto) {\n\n    const { email, password } = userObjectLogin;\n    const findUser = await this.userModel.findOne({email})\n    if (!findUser) {\n      throw new HttpException('USER_NOT_FOUND', 404);\n    }\n    const checkPassword = await compare(password, findUser.password);\n\n    if (!checkPassword) {\n      throw new HttpException('PASSWORD_INVALID', 403);\n    }\n\n    const payload = {id:findUser._id, name: findUser.user_name, role: findUser.role};\n    const token = this.jwtAuthService.sign(payload);\n    \n    const data = {\n      user:findUser,\n      token\n    };\n\n    return data;\n\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Badges.html":{"url":"classes/Badges.html","title":"class - Badges","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Badges\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\nimport { Role } from \"src/auth/models/role.enum\";\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class Favorites{\n    @Prop()\n    _id: string; \n}\n\n@Schema()\nexport class Badges{\n    @Prop()\n    name: string;\n}\n\n\n@Schema()\nexport class Notification_list{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class Groups{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    fisrt_name: string;\n\n    @Prop()\n    last_name: string;\n\n    @Prop({ required: true })\n    user_name: string;\n\n    @Prop({ required: true })\n    email: string;\n\n    @Prop({ required: true })\n    password: string;\n\n    @Prop({ required: true, default: Role.USER })\n    role: Role;\n\n    @Prop([Object])\n    favorites: Array;\n\n    @Prop()\n    address: string;\n\n    @Prop([Object])\n    badges: Array;\n\n    @Prop([Object])\n    notifications_list: Array;\n\n    @Prop([Object])\n    groups: Array;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentNested.html":{"url":"classes/CommentNested.html","title":"class - CommentNested","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentNested\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/dto/create-recipe.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                comment\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsHexadecimal()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsBoolean, IsNumber, ValidateNested, IsDefined, IsHexadecimal } from \"class-validator\";\nimport { Type } from 'class-transformer';\nimport mongoose from 'mongoose';\n\n\nclass IngredientNested {\n\t@IsDefined()\t\n    @IsHexadecimal()\n    _id: {\n\t\ttype: mongoose.Types.ObjectId;\n\t}\n\n\t@IsDefined()\t\n\t@IsNumber()\n\tqty: number;\n}\n\nclass CommentNested {\t\n    @IsString()\n    title: string;\n\t\n    @IsString()\n    comment: string;\t\n\n\t@IsHexadecimal()\n\tauthor:  {\n\t\ttype: mongoose.Types.ObjectId;\n\t}\n}\n\nexport class CreateRecipeDto {\n\n\t@ApiProperty( {example: 'Chocolate pie'})\n\t@IsDefined()\n\t@IsString()\n\tname: string;\n\n\t@ApiProperty( {example: 'Delicious chocolate pie with high sugar dose. First: cut onions in tiny slices. Second: Mix chocolate and onion. Third: let your pet taste it. Fourth: enjoy it.'})\n\t@IsString()\n\t@IsDefined()\n\tdescription: string;\n\n\t@ApiProperty( {example: 'John'})\n\t@IsDefined()\n\t@IsString()\n\tauthor: string;\n\n\t@ApiProperty( {example: 8})\n\t@IsNumber()\n\tavg_rating: number;\n\n\t@ApiProperty( {example: '/images/chocolate-pie.png'})\n\t@IsString()\n\timg: string;\n\n\t@ApiProperty( {example: 'true'})\n\t@IsDefined()\t\n\t@IsBoolean()\n\tis_public: boolean;\n\n\t@ApiProperty( {example: '[{ _id: \"2943823572034\", qty: 200 }]'})\n\t@ValidateNested()\n\t@Type(() => IngredientNested) \t\n\tingredients: IngredientNested[];\n\n\t@ApiProperty( {example: 'Lunch'})\n\t@IsString()\n\tmeal_type: string;\n\n\t@ApiProperty( {example: 'France'})\n\t@IsString()\n\tcountry: string;\n\n\t@ApiProperty( {example: 30})\n\t@IsNumber()\n\tcooking_time: number;\n\n\t@ApiProperty( {example: 'Easy'})\n\t@IsString()\n\tdifficulty: string;\n\n\t@ApiProperty( {example: 9421})\n\t@IsNumber()\n\tviews: number;\n\n\t@ApiProperty( {example: 'Mediterranean'})\n\t@IsString()\n\tfood_type: string;\n\n\t@ApiProperty( {example: '[{ title:\"Nice recipe\", comment:\"I love this kind of recipies, please more!\", id_user: \"2943823572034\" }]'})\n\t@ValidateNested() \n\t@Type(() => CommentNested) \t\t\n\tcomments: CommentNested[];\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/CompareIdGuard.html":{"url":"guards/CompareIdGuard.html","title":"guard - CompareIdGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    CompareIdGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/compare-id.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/compare-id.guard.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\n\n@Injectable()\nexport class CompareIdGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const body = request.body;\n    if (body._id !== user.id) {\n      return false;\n    }\n    return true;\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/dto/add-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                comment\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Doe'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/add-comment.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'I like this recipe, really tasty, but could be improved adding cinamon'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/add-comment.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Good enough'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/add-comment.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateCommentDto {\n  @ApiProperty({example: 'Good enough'})\n  title: string;\n\n  @ApiProperty({example: 'I like this recipe, really tasty, but could be improved adding cinamon'})\n  comment: string;\n\n\t@ApiProperty({example: 'John Doe'})\n  author: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFavoriteDto.html":{"url":"classes/CreateFavoriteDto.html","title":"class - CreateFavoriteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFavoriteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/favorites/dto/create-favorite.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ews6f54we654efw651few6'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/favorites/dto/create-favorite.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { ObjectId } from \"mongoose\";\n\n\nexport class CreateFavoriteDto {\n\n    @ApiProperty( {example: 'ews6f54we654efw651few6'})\n    _id: ObjectId;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateGroupDto.html":{"url":"classes/CreateGroupDto.html","title":"class - CreateGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/dto/create-group.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admin_id\n                            \n                            \n                                group_name\n                            \n                            \n                                member_username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admin_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Admin_ID number'})@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group/dto/create-group.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        group_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Choco'})@IsDefined()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group/dto/create-group.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        member_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Member_user name '})@IsDefined()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group/dto/create-group.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsBoolean, IsNumber, ValidateNested, IsDefined, IsHexadecimal } from \"class-validator\";\nimport { Type } from 'class-transformer';\nimport mongoose from 'mongoose';\nimport internal from \"stream\";\n\n\n\n\nexport class CreateGroupDto {\n    @ApiProperty( {example: 'Choco'})\n\t@IsDefined()\n\t@IsString()\n\tgroup_name: string;\n\n    @ApiProperty( {example: 'Admin_ID number'})\n\t@IsDefined()\n\tadmin_id: string;\n\n    @ApiProperty( {example: 'Member_user name '})\n\t@IsDefined()\n\t@IsString()\n\tmember_username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateIngredientDto.html":{"url":"classes/CreateIngredientDto.html","title":"class - CreateIngredientDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateIngredientDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ingredient/dto/create-ingredient.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                measure_unit\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        measure_unit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Grams'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ingredient/dto/create-ingredient.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Flour'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ingredient/dto/create-ingredient.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class CreateIngredientDto {\n\n    @ApiProperty( {example: 'Flour'})\n    name: string;\n\n    @ApiProperty( {example: 'Grams'})\n    measure_unit: string;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNotificationDto.html":{"url":"classes/CreateNotificationDto.html","title":"class - CreateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/dto/create-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                emitter\n                            \n                            \n                                text_field\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2023-01-20'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/dto/create-notification.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emitter\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '63cb0277ee58877e63e36fcc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/dto/create-notification.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text_field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Sergi liked your recipe'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/dto/create-notification.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'New like'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/dto/create-notification.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'likes'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/dto/create-notification.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger/dist/decorators/api-property.decorator\";\nimport { Date, ObjectId } from \"mongoose\";\n\n\nexport class CreateNotificationDto {\n\t\n\t@ApiProperty( {example: '63cb0277ee58877e63e36fcc'})\n\temitter: ObjectId;\n\n\t@ApiProperty( {example: '2023-01-20'})\n\tdate: Date;\n\n    @ApiProperty( {example: 'New like'})\n\ttitle: string;\n\t\n\t@ApiProperty( {example: 'Sergi liked your recipe'})\n\ttext_field: string;\n\n\t@ApiProperty( {example: 'likes'})\n\ttype: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRecipeDto.html":{"url":"classes/CreateRecipeDto.html","title":"class - CreateRecipeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRecipeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/dto/create-recipe.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                avg_rating\n                            \n                            \n                                comments\n                            \n                            \n                                cooking_time\n                            \n                            \n                                country\n                            \n                            \n                                description\n                            \n                            \n                                difficulty\n                            \n                            \n                                food_type\n                            \n                            \n                                img\n                            \n                            \n                                ingredients\n                            \n                            \n                                is_public\n                            \n                            \n                                meal_type\n                            \n                            \n                                name\n                            \n                            \n                                views\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John'})@IsDefined()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avg_rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 8})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CommentNested[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '[{ title:\"Nice recipe\", comment:\"I love this kind of recipies, please more!\", id_user: \"2943823572034\" }]'})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cooking_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 30})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'France'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Delicious chocolate pie with high sugar dose. First: cut onions in tiny slices. Second: Mix chocolate and onion. Third: let your pet taste it. Fourth: enjoy it.'})@IsString()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        difficulty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Easy'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        food_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Mediterranean'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        img\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '/images/chocolate-pie.png'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     IngredientNested[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '[{ _id: \"2943823572034\", qty: 200 }]'})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'true'})@IsDefined()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        meal_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Lunch'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Chocolate pie'})@IsDefined()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        views\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 9421})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:85\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsBoolean, IsNumber, ValidateNested, IsDefined, IsHexadecimal } from \"class-validator\";\nimport { Type } from 'class-transformer';\nimport mongoose from 'mongoose';\n\n\nclass IngredientNested {\n\t@IsDefined()\t\n    @IsHexadecimal()\n    _id: {\n\t\ttype: mongoose.Types.ObjectId;\n\t}\n\n\t@IsDefined()\t\n\t@IsNumber()\n\tqty: number;\n}\n\nclass CommentNested {\t\n    @IsString()\n    title: string;\n\t\n    @IsString()\n    comment: string;\t\n\n\t@IsHexadecimal()\n\tauthor:  {\n\t\ttype: mongoose.Types.ObjectId;\n\t}\n}\n\nexport class CreateRecipeDto {\n\n\t@ApiProperty( {example: 'Chocolate pie'})\n\t@IsDefined()\n\t@IsString()\n\tname: string;\n\n\t@ApiProperty( {example: 'Delicious chocolate pie with high sugar dose. First: cut onions in tiny slices. Second: Mix chocolate and onion. Third: let your pet taste it. Fourth: enjoy it.'})\n\t@IsString()\n\t@IsDefined()\n\tdescription: string;\n\n\t@ApiProperty( {example: 'John'})\n\t@IsDefined()\n\t@IsString()\n\tauthor: string;\n\n\t@ApiProperty( {example: 8})\n\t@IsNumber()\n\tavg_rating: number;\n\n\t@ApiProperty( {example: '/images/chocolate-pie.png'})\n\t@IsString()\n\timg: string;\n\n\t@ApiProperty( {example: 'true'})\n\t@IsDefined()\t\n\t@IsBoolean()\n\tis_public: boolean;\n\n\t@ApiProperty( {example: '[{ _id: \"2943823572034\", qty: 200 }]'})\n\t@ValidateNested()\n\t@Type(() => IngredientNested) \t\n\tingredients: IngredientNested[];\n\n\t@ApiProperty( {example: 'Lunch'})\n\t@IsString()\n\tmeal_type: string;\n\n\t@ApiProperty( {example: 'France'})\n\t@IsString()\n\tcountry: string;\n\n\t@ApiProperty( {example: 30})\n\t@IsNumber()\n\tcooking_time: number;\n\n\t@ApiProperty( {example: 'Easy'})\n\t@IsString()\n\tdifficulty: string;\n\n\t@ApiProperty( {example: 9421})\n\t@IsNumber()\n\tviews: number;\n\n\t@ApiProperty( {example: 'Mediterranean'})\n\t@IsString()\n\tfood_type: string;\n\n\t@ApiProperty( {example: '[{ title:\"Nice recipe\", comment:\"I love this kind of recipies, please more!\", id_user: \"2943823572034\" }]'})\n\t@ValidateNested() \n\t@Type(() => CommentNested) \t\t\n\tcomments: CommentNested[];\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                adress\n                            \n                            \n                                badges\n                            \n                            \n                                email\n                            \n                            \n                                favorites\n                            \n                            \n                                fisrt_name\n                            \n                            \n                                groups\n                            \n                            \n                                last_name\n                            \n                            \n                                notifications_list\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        adress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'c/Bla, Barcelona'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        badges\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '[{badges: 3}]'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'alolocosevivemejor@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favorites\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '[{ObjectID: \"2943823572034\",}]'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fisrt_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Sergi'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        groups\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '[{ _id: ObjectId(\"2943823572034\") }]'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Alsina'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifications_list\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '[{ _id: ObjectId(\"2943823572034\") }]'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'qwerty1234'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'registered'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'SergiAl'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Badges, Favorites, Groups, Notification_list } from \"../schemas/user.schema\";\n\n\n\nexport class CreateUserDto {\n\n    @ApiProperty( {example: 'Sergi'})\n    fisrt_name: string;\n\n    @ApiProperty({example: 'Alsina'})\n    last_name: string;\n\n    @ApiProperty({example: 'SergiAl'})\n    user_name: string;\n\n    @ApiProperty({example: 'alolocosevivemejor@gmail.com'})\n    email: string;\n\n    @ApiProperty({example: 'qwerty1234'})\n    password: string;\n\n    @ApiProperty({example: 'registered'})\n    role: string;\n\n    @ApiProperty({example: '[{ObjectID: \"2943823572034\",}]'})\n    favorites: Array;\n\n    @ApiProperty({example: 'c/Bla, Barcelona'})\n    adress: string;\n\n    @ApiProperty({example: '[{badges: 3}]'})\n    badges: Array;\n\n    @ApiProperty({example: '[{ _id: ObjectId(\"2943823572034\") }]'})\n    notifications_list: Array;\n\n    @ApiProperty({example: '[{ _id: ObjectId(\"2943823572034\") }]'})\n    groups: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Favorite.html":{"url":"classes/Favorite.html","title":"class - Favorite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Favorite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/favorites/schemas/favorite.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Favorite {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Favorites.html":{"url":"classes/Favorites.html","title":"class - Favorites","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Favorites\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\nimport { Role } from \"src/auth/models/role.enum\";\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class Favorites{\n    @Prop()\n    _id: string; \n}\n\n@Schema()\nexport class Badges{\n    @Prop()\n    name: string;\n}\n\n\n@Schema()\nexport class Notification_list{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class Groups{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    fisrt_name: string;\n\n    @Prop()\n    last_name: string;\n\n    @Prop({ required: true })\n    user_name: string;\n\n    @Prop({ required: true })\n    email: string;\n\n    @Prop({ required: true })\n    password: string;\n\n    @Prop({ required: true, default: Role.USER })\n    role: Role;\n\n    @Prop([Object])\n    favorites: Array;\n\n    @Prop()\n    address: string;\n\n    @Prop([Object])\n    badges: Array;\n\n    @Prop([Object])\n    notifications_list: Array;\n\n    @Prop([Object])\n    groups: Array;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FavoritesController.html":{"url":"controllers/FavoritesController.html","title":"controller - FavoritesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FavoritesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/favorites/favorites.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                favorites\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createFavoriteDto: CreateFavoriteDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/favorites/favorites.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createFavoriteDto\n                                    \n                                                CreateFavoriteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/favorites/favorites.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/favorites/favorites.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/favorites/favorites.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateFavoriteDto: UpdateFavoriteDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/favorites/favorites.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateFavoriteDto\n                                    \n                                                UpdateFavoriteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { FavoritesService } from './favorites.service';\nimport { CreateFavoriteDto } from './dto/create-favorite.dto';\nimport { UpdateFavoriteDto } from './dto/update-favorite.dto';\n\n@Controller('favorites')\nexport class FavoritesController {\n  constructor(private readonly favoritesService: FavoritesService) {}\n\n  @Post()\n  create(@Body() createFavoriteDto: CreateFavoriteDto) {\n    return this.favoritesService.create(createFavoriteDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.favoritesService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.favoritesService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateFavoriteDto: UpdateFavoriteDto) {\n    return this.favoritesService.update(+id, updateFavoriteDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.favoritesService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FavoritesModule.html":{"url":"modules/FavoritesModule.html","title":"module - FavoritesModule","body":"\n                   \n\n\n\n\n    Modules\n    FavoritesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FavoritesModule\n\n\n\ncluster_FavoritesModule_providers\n\n\n\n\nFavoritesService\n\nFavoritesService\n\n\n\nFavoritesModule\n\nFavoritesModule\n\nFavoritesModule -->\n\nFavoritesService->FavoritesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/favorites/favorites.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FavoritesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FavoritesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FavoritesService } from './favorites.service';\nimport { FavoritesController } from './favorites.controller';\n\n@Module({\n  controllers: [FavoritesController],\n  providers: [FavoritesService]\n})\nexport class FavoritesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FavoritesService.html":{"url":"injectables/FavoritesService.html","title":"injectable - FavoritesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FavoritesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/favorites/favorites.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createFavoriteDto: CreateFavoriteDto)\n                \n            \n\n\n            \n                \n                    Defined in src/favorites/favorites.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createFavoriteDto\n                                    \n                                                CreateFavoriteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/favorites/favorites.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/favorites/favorites.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/favorites/favorites.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateFavoriteDto: UpdateFavoriteDto)\n                \n            \n\n\n            \n                \n                    Defined in src/favorites/favorites.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateFavoriteDto\n                                    \n                                                UpdateFavoriteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateFavoriteDto } from './dto/create-favorite.dto';\nimport { UpdateFavoriteDto } from './dto/update-favorite.dto';\n\n@Injectable()\nexport class FavoritesService {\n  create(createFavoriteDto: CreateFavoriteDto) {\n    return 'This action adds a new favorite';\n  }\n\n  findAll() {\n    return `This action returns all favorites`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} favorite`;\n  }\n\n  update(id: number, updateFavoriteDto: UpdateFavoriteDto) {\n    return `This action updates a #${id} favorite`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} favorite`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetGroupFilterDto.html":{"url":"classes/GetGroupFilterDto.html","title":"class - GetGroupFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetGroupFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/dto/filter-group.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                admin_id\n                            \n                            \n                                    Optional\n                                group_name\n                            \n                            \n                                    Optional\n                                member_username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        admin_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/group/dto/filter-group.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        group_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/group/dto/filter-group.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        member_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/group/dto/filter-group.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetGroupFilterDto {\n    group_name?: string;\n    admin_id?: string;\n    member_username?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetRecipiesFilterDto.html":{"url":"classes/GetRecipiesFilterDto.html","title":"class - GetRecipiesFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetRecipiesFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/dto/filter-recipe.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                author\n                            \n                            \n                                    Optional\n                                avg_rating\n                            \n                            \n                                    Optional\n                                cooking_time\n                            \n                            \n                                    Optional\n                                country\n                            \n                            \n                                    Optional\n                                difficulty\n                            \n                            \n                                    Optional\n                                food_type\n                            \n                            \n                                    Optional\n                                ingredients\n                            \n                            \n                                    Optional\n                                is_public\n                            \n                            \n                                    Optional\n                                meal_type\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                views\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avg_rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        cooking_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        difficulty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        food_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        meal_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        views\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetRecipiesFilterDto {\n    name?: string;\n    author?: string;\n    avg_rating?: number;\n    is_public?: any;\n    ingredients?: string;\n    meal_type?: string;\n    country?: string;\n    cooking_time?: number;\n    difficulty?: string;\n    views?: number;\n    food_type?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Group.html":{"url":"classes/Group.html","title":"class - Group","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Group\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/schemas/group.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admin_id\n                            \n                            \n                                group_name\n                            \n                            \n                                member_username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admin_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group/schemas/group.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        group_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group/schemas/group.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        member_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group/schemas/group.schema.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport internal from 'stream';\n\nexport type GroupDocument = Group & Document;\n\n@Schema()\nexport class Group {\n \t@Prop()\n      group_name: string;\n\n\t@Prop()\n      admin_id: string;\n\n\t@Prop()\n\t  member_username: string;\n\n}\n\nexport const GroupSchema = SchemaFactory.createForClass(Group);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GroupController.html":{"url":"controllers/GroupController.html","title":"controller - GroupController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GroupController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/group.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                group\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createGroupDto: CreateGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createGroupDto\n                                    \n                                                CreateGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateGroupDto: UpdateGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateGroupDto\n                                    \n                                                UpdateGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { GroupService } from './group.service';\nimport { CreateGroupDto } from './dto/create-group.dto';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\n@Controller('group')\nexport class GroupController {\n  constructor(private readonly groupService: GroupService) {}\n\n  @Post()\n  create(@Body() createGroupDto: CreateGroupDto) {\n    return this.groupService.create(createGroupDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.groupService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.groupService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateGroupDto: UpdateGroupDto) {\n    return this.groupService.update(id, updateGroupDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.groupService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GroupModule.html":{"url":"modules/GroupModule.html","title":"module - GroupModule","body":"\n                   \n\n\n\n\n    Modules\n    GroupModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GroupModule\n\n\n\ncluster_GroupModule_providers\n\n\n\n\nGroupService\n\nGroupService\n\n\n\nGroupModule\n\nGroupModule\n\nGroupModule -->\n\nGroupService->GroupModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/group/group.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GroupService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GroupController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GroupService } from './group.service';\nimport { GroupController } from './group.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  controllers: [GroupController],\n  providers: [GroupService]\n})\nexport class GroupModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GroupService.html":{"url":"injectables/GroupService.html","title":"injectable - GroupService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GroupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/group.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(groupModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/group/group.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        groupModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createGroupDto: CreateGroupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createGroupDto\n                                    \n                                                CreateGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateGroupDto: UpdateGroupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateGroupDto\n                                    \n                                                UpdateGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateGroupDto } from './dto/create-group.dto';\nimport { UpdateGroupDto } from './dto/update-group.dto';\nimport { Group, GroupDocument } from \"./schemas/group.schema\";\nimport mongoose from 'mongoose';\n@Injectable()\nexport class GroupService {\n\n  constructor( \n    @InjectModel(Group.name) private readonly groupModel: Model, \n  ) {}\n\n  async create(createGroupDto: CreateGroupDto) {\n    const newGroup = new this.groupModel(createGroupDto);\n    return await newGroup.save();\n  }\n\n  async findAll(): Promise {\n    const groupsData = await this.groupModel.find()\n      .populate({ path: 'recepies._id' })\n      .setOptions({ sanitizeFilter: true })\n      .exec();\n    if (!groupsData || groupsData.length == 0) {\n        console.log(\"Error: no data\");\n    }\n    return groupsData;\n  }\n\n\n  async findOne(id: string): Promise {\n    if (mongoose.Types.ObjectId.isValid(id)) {\n        const groupData = await this.groupModel.findById(id)\n      \n      if (!groupData) {\n          console.log(\"Error: no data\");\n      }\n      return groupData;\n    }\n      else {\n          console.log(\"Error: the id is not in a valid format\");\n      }\n  }\n\n\n  async update(id: string, updateGroupDto: UpdateGroupDto) {\n    const updatedGroup = await this.groupModel.findByIdAndUpdate(id,updateGroupDto);\n    return updatedGroup;\n  }\n\n  async remove(id: string) {\n    const removedGroup = await this.groupModel.findByIdAndDelete(id);\n    return removedGroup;\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Groups.html":{"url":"classes/Groups.html","title":"class - Groups","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Groups\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\nimport { Role } from \"src/auth/models/role.enum\";\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class Favorites{\n    @Prop()\n    _id: string; \n}\n\n@Schema()\nexport class Badges{\n    @Prop()\n    name: string;\n}\n\n\n@Schema()\nexport class Notification_list{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class Groups{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    fisrt_name: string;\n\n    @Prop()\n    last_name: string;\n\n    @Prop({ required: true })\n    user_name: string;\n\n    @Prop({ required: true })\n    email: string;\n\n    @Prop({ required: true })\n    password: string;\n\n    @Prop({ required: true, default: Role.USER })\n    role: Role;\n\n    @Prop([Object])\n    favorites: Array;\n\n    @Prop()\n    address: string;\n\n    @Prop([Object])\n    badges: Array;\n\n    @Prop([Object])\n    notifications_list: Array;\n\n    @Prop([Object])\n    groups: Array;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Ingredient.html":{"url":"classes/Ingredient.html","title":"class - Ingredient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Ingredient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ingredient/schemas/ingredient.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                measure_unit\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        measure_unit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ingredient/schemas/ingredient.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ingredient/schemas/ingredient.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type IngredientDocument = Ingredient & Document;\n\n@Schema()\nexport class Ingredient {\n    @Prop()\n\tname: string;\n\n\t@Prop()\n\tmeasure_unit: string;\n}\n\nexport const IngredientSchema = SchemaFactory.createForClass(Ingredient);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IngredientController.html":{"url":"controllers/IngredientController.html","title":"controller - IngredientController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IngredientController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ingredient/ingredient.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                ingredient\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createIngredientDto: CreateIngredientDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/ingredient/ingredient.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createIngredientDto\n                                    \n                                                CreateIngredientDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/ingredient/ingredient.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/ingredient/ingredient.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/ingredient/ingredient.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateIngredientDto: UpdateIngredientDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/ingredient/ingredient.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateIngredientDto\n                                    \n                                                UpdateIngredientDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { IngredientService } from './ingredient.service';\nimport { CreateIngredientDto } from './dto/create-ingredient.dto';\nimport { UpdateIngredientDto } from './dto/update-ingredient.dto';\n\n@Controller('ingredient')\nexport class IngredientController {\n  constructor(private readonly ingredientService: IngredientService) {}\n\n  @Post()\n  create(@Body() createIngredientDto: CreateIngredientDto) {\n    return this.ingredientService.create(createIngredientDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.ingredientService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.ingredientService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateIngredientDto: UpdateIngredientDto) {\n    return this.ingredientService.update(+id, updateIngredientDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.ingredientService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IngredientModule.html":{"url":"modules/IngredientModule.html","title":"module - IngredientModule","body":"\n                   \n\n\n\n\n    Modules\n    IngredientModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_IngredientModule\n\n\n\ncluster_IngredientModule_providers\n\n\n\n\nIngredientService\n\nIngredientService\n\n\n\nIngredientModule\n\nIngredientModule\n\nIngredientModule -->\n\nIngredientService->IngredientModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/ingredient/ingredient.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            IngredientService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            IngredientController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { IngredientService } from './ingredient.service';\nimport { IngredientController } from './ingredient.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { IngredientSchema, Ingredient } from './schemas/ingredient.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Ingredient.name, schema: IngredientSchema }]),\n  ],\n  controllers: [IngredientController],\n  providers: [IngredientService]\n})\nexport class IngredientModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IngredientNested.html":{"url":"classes/IngredientNested.html","title":"class - IngredientNested","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IngredientNested\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/dto/create-recipe.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                qty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsHexadecimal()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        qty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsBoolean, IsNumber, ValidateNested, IsDefined, IsHexadecimal } from \"class-validator\";\nimport { Type } from 'class-transformer';\nimport mongoose from 'mongoose';\n\n\nclass IngredientNested {\n\t@IsDefined()\t\n    @IsHexadecimal()\n    _id: {\n\t\ttype: mongoose.Types.ObjectId;\n\t}\n\n\t@IsDefined()\t\n\t@IsNumber()\n\tqty: number;\n}\n\nclass CommentNested {\t\n    @IsString()\n    title: string;\n\t\n    @IsString()\n    comment: string;\t\n\n\t@IsHexadecimal()\n\tauthor:  {\n\t\ttype: mongoose.Types.ObjectId;\n\t}\n}\n\nexport class CreateRecipeDto {\n\n\t@ApiProperty( {example: 'Chocolate pie'})\n\t@IsDefined()\n\t@IsString()\n\tname: string;\n\n\t@ApiProperty( {example: 'Delicious chocolate pie with high sugar dose. First: cut onions in tiny slices. Second: Mix chocolate and onion. Third: let your pet taste it. Fourth: enjoy it.'})\n\t@IsString()\n\t@IsDefined()\n\tdescription: string;\n\n\t@ApiProperty( {example: 'John'})\n\t@IsDefined()\n\t@IsString()\n\tauthor: string;\n\n\t@ApiProperty( {example: 8})\n\t@IsNumber()\n\tavg_rating: number;\n\n\t@ApiProperty( {example: '/images/chocolate-pie.png'})\n\t@IsString()\n\timg: string;\n\n\t@ApiProperty( {example: 'true'})\n\t@IsDefined()\t\n\t@IsBoolean()\n\tis_public: boolean;\n\n\t@ApiProperty( {example: '[{ _id: \"2943823572034\", qty: 200 }]'})\n\t@ValidateNested()\n\t@Type(() => IngredientNested) \t\n\tingredients: IngredientNested[];\n\n\t@ApiProperty( {example: 'Lunch'})\n\t@IsString()\n\tmeal_type: string;\n\n\t@ApiProperty( {example: 'France'})\n\t@IsString()\n\tcountry: string;\n\n\t@ApiProperty( {example: 30})\n\t@IsNumber()\n\tcooking_time: number;\n\n\t@ApiProperty( {example: 'Easy'})\n\t@IsString()\n\tdifficulty: string;\n\n\t@ApiProperty( {example: 9421})\n\t@IsNumber()\n\tviews: number;\n\n\t@ApiProperty( {example: 'Mediterranean'})\n\t@IsString()\n\tfood_type: string;\n\n\t@ApiProperty( {example: '[{ title:\"Nice recipe\", comment:\"I love this kind of recipies, please more!\", id_user: \"2943823572034\" }]'})\n\t@ValidateNested() \n\t@Type(() => CommentNested) \t\t\n\tcomments: CommentNested[];\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IngredientService.html":{"url":"injectables/IngredientService.html","title":"injectable - IngredientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IngredientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ingredient/ingredient.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ingredientModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/ingredient/ingredient.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ingredientModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createIngredientDto: CreateIngredientDto)\n                \n            \n\n\n            \n                \n                    Defined in src/ingredient/ingredient.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createIngredientDto\n                                    \n                                                CreateIngredientDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/ingredient/ingredient.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/ingredient/ingredient.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/ingredient/ingredient.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateIngredientDto: UpdateIngredientDto)\n                \n            \n\n\n            \n                \n                    Defined in src/ingredient/ingredient.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateIngredientDto\n                                    \n                                                UpdateIngredientDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateIngredientDto } from './dto/create-ingredient.dto';\nimport { UpdateIngredientDto } from './dto/update-ingredient.dto';\nimport { Ingredient } from \"./schemas/ingredient.schema\";\n\n@Injectable()\nexport class IngredientService { \n\n  constructor( \n    @InjectModel(Ingredient.name) \n    private readonly ingredientModel: Model, \n  ) {} \n  \n\n  async create(createIngredientDto: CreateIngredientDto) {\n    const newIngredient = new this.ingredientModel(createIngredientDto);\n    return await newIngredient.save();\n  }\n\n  findAll() {\n    return this.ingredientModel.find();\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} ingredient`;\n  }\n\n  update(id: number, updateIngredientDto: UpdateIngredientDto) {\n    return `This action updates a #${id} ingredient`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} ingredient`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { jwtConstants } from \"../constants/jwt.constants\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy){\n    constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n//   async validate(payload: any) {\n//     return { userId: payload.id, user_name: payload.user_name };\n\n    async validate(payload: any): Promise {\n    if (!payload) {\n      throw new HttpException('Invalid token', HttpStatus.UNAUTHORIZED);\n    }\n    return payload;\n  }\n  }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginAuthDto.html":{"url":"classes/LoginAuthDto.html","title":"class - LoginAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(4)@MaxLength(12)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-auth.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, MaxLength, MinLength } from \"class-validator\";\n\nexport class LoginAuthDto {\n    @IsEmail()\n    email: string;\n\n    @MinLength(4)\n    @MaxLength(12)\n    password: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Notification.html":{"url":"classes/Notification.html","title":"class - Notification","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Notification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/schemas/notification.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                emitter\n                            \n                            \n                                text_field\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emitter\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text_field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Date, ObjectId } from \"mongoose\";\nimport { Document } from \"mongoose\";\n\nexport type NotificationDocument = Notification & Document;\n\n@Schema()\nexport class Notification {\n\n\t@Prop({type: Object})\n\temitter: ObjectId;\n\n\t@Prop({type: Date})\n\tdate: Date;\n\n\t@Prop()\n\ttitle: string;\n\n\t@Prop()\n\ttext_field: string;\n\n\t@Prop()\n\ttype: string;\n}\n\nexport const NotificationSchema = SchemaFactory.createForClass(Notification);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationController.html":{"url":"controllers/NotificationController.html","title":"controller - NotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notifications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                notification\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createNotificationDto: CreateNotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')\n                \n            \n\n            \n                \n                    Defined in src/notifications/notifications.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createNotificationDto\n                                    \n                                                CreateNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/notifications/notifications.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/notifications/notifications.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/notifications/notifications.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateNotificationDto: UpdateNotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/notifications/notifications.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateNotificationDto\n                                    \n                                                UpdateNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { NotificationService } from './notifications.service';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\nimport { UpdateNotificationDto } from './dto/update-notification.dto';\n\n@Controller('notification')\nexport class NotificationController {\n\n  constructor(private readonly notificationService: NotificationService) {}\n\n  @Post('/create')\n  async create(@Body() createNotificationDto: CreateNotificationDto) {\n    return this.notificationService.create(createNotificationDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.notificationService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.notificationService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateNotificationDto: UpdateNotificationDto) {\n    return this.notificationService.update(id, updateNotificationDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.notificationService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notifications.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/notifications/notifications.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notificationModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createNotificationDto: CreateNotificationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createNotificationDto\n                                    \n                                                CreateNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateNotificationDto: UpdateNotificationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateNotificationDto\n                                    \n                                                UpdateNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport mongoose, { Model } from 'mongoose';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\nimport { UpdateNotificationDto } from './dto/update-notification.dto';\nimport { Notification } from './schemas/notification.schema';\n\n\n@Injectable()\nexport class NotificationService {\n  constructor(\n    @InjectModel(Notification.name) private readonly notificationModel: Model,\n  ) {}\n\n  async create(createNotificationDto: CreateNotificationDto) {\n    const newNotification = new this.notificationModel(createNotificationDto);\n    return await newNotification.save();\n  }\n\n  async findAll(): Promise {\n    const notificationsData = await this.notificationModel.find();\nif (!notificationsData || notificationsData.length == 0) {\n  console.log(\"Error: no data\");\n}\n    return notificationsData;\n  }\n\n  async findOne(id: string) {\n    if (mongoose.Types.ObjectId.isValid(id)) {\n    const singleNotificationData = await this.notificationModel.findById(id)\n    return singleNotificationData;\n  }\n}\n\n  async update(id: string, updateNotificationDto: UpdateNotificationDto) {\n    const updatedNotification = await this.notificationModel.findByIdAndUpdate(id,updateNotificationDto);\n\n    return updatedNotification;\n  }\n\n  async remove(id: string) {\n    const removedNotification = await this.notificationModel.findByIdAndDelete(id)\n    return removedNotification;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Notification_list.html":{"url":"classes/Notification_list.html","title":"class - Notification_list","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Notification_list\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\nimport { Role } from \"src/auth/models/role.enum\";\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class Favorites{\n    @Prop()\n    _id: string; \n}\n\n@Schema()\nexport class Badges{\n    @Prop()\n    name: string;\n}\n\n\n@Schema()\nexport class Notification_list{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class Groups{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    fisrt_name: string;\n\n    @Prop()\n    last_name: string;\n\n    @Prop({ required: true })\n    user_name: string;\n\n    @Prop({ required: true })\n    email: string;\n\n    @Prop({ required: true })\n    password: string;\n\n    @Prop({ required: true, default: Role.USER })\n    role: Role;\n\n    @Prop([Object])\n    favorites: Array;\n\n    @Prop()\n    address: string;\n\n    @Prop([Object])\n    badges: Array;\n\n    @Prop([Object])\n    notifications_list: Array;\n\n    @Prop([Object])\n    groups: Array;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationsModule.html":{"url":"modules/NotificationsModule.html","title":"module - NotificationsModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_providers\n\n\n\n\nNotificationService\n\nNotificationService\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nNotificationsModule -->\n\nNotificationService->NotificationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/notifications/notifications.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotificationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { NotificationService } from './notifications.service';\nimport { NotificationController } from './notifications.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { NotificationSchema, Notification } from './schemas/notification.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Notification.name, schema: NotificationSchema }]),\n  ],\n  controllers: [NotificationController],\n  providers: [NotificationService],\n})\nexport class NotificationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseObjectIdPipe.html":{"url":"injectables/ParseObjectIdPipe.html","title":"injectable - ParseObjectIdPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseObjectIdPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utilities/parse-object-id-pipe.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/utilities/parse-object-id-pipe.pipe.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     mongoose.Types.ObjectId\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PipeTransform, Injectable, BadRequestException } from '@nestjs/common';\nimport mongoose from 'mongoose';\n\n@Injectable()\nexport class ParseObjectIdPipe\n  implements PipeTransform\n{\n  transform(value: any): mongoose.Types.ObjectId {\n    const validObjectId: boolean = mongoose.isObjectIdOrHexString(value); \n    if (!validObjectId) {\n      throw new BadRequestException('Invalid ObjectId'); \n    }\n    return value; \n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Recipe.html":{"url":"classes/Recipe.html","title":"class - Recipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Recipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/schemas/recipe.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                avg_rating\n                            \n                            \n                                comments\n                            \n                            \n                                cooking_time\n                            \n                            \n                                country\n                            \n                            \n                                description\n                            \n                            \n                                difficulty\n                            \n                            \n                                food_type\n                            \n                            \n                                img\n                            \n                            \n                                ingredients\n                            \n                            \n                                is_public\n                            \n                            \n                                meal_type\n                            \n                            \n                                name\n                            \n                            \n                                views\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: 'Unknown'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avg_rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RecipeComment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['RecipeComment'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cooking_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        difficulty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        food_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        img\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Ingredient'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        meal_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        views\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:68\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\nimport { RecipeComment } from 'src/recipe/schemas/comment.schema';\n\nexport type RecipeDocument = Recipe & Document;\n\n// @Schema()\n// export class IngredientsContent {\n// \t@Prop({required: true, type: IsObject})\n// \t_id: {\n// \t\ttype: mongoose.Types.ObjectId;\n// \t}\n\n// \t@Prop()\n// \tqty: number;\n// }\n\n\n// @Schema()\n// export class CommentsContent {\n// \t@Prop()\n// \ttitle: string;\n\n// \t@Prop()\n// \tcomment: string;\n\n// \t@Prop({type: mongoose.Schema.Types.ObjectId, ref: 'User'})\n// \tauthor_id: User;\n\n// }\n\n@Schema()\nexport class Recipe {\n\t@Prop({required: true})\n\tname: string;\n\n\t@Prop({required: true})\n\tdescription: string;\n\n\t@Prop({required: true, default: \"Unknown\"})\n\tauthor: string;\n\n\t@Prop()\n\tavg_rating: number;\n\n\t@Prop()\n\timg: string;\n\n\t@Prop({required: true, default: true})\n\tis_public: boolean;\n\n\t@Prop({type: mongoose.Types.ObjectId, ref:'Ingredient'})\n\tingredients: any[];\n\n\t@Prop()\n\tmeal_type: string;\n\n\t@Prop()\n\tcountry: string;\n\n\t@Prop()\n\tcooking_time: number;\n\n\t@Prop()\n\tdifficulty: string;\n\n\t@Prop()\n\tviews: number;\n\n\t@Prop()\n\tfood_type: string;\n\n\t@Prop([RecipeComment])\n\tcomments: RecipeComment[];\n\n}\n\nexport const RecipeSchema = SchemaFactory.createForClass(Recipe);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecipeComment.html":{"url":"classes/RecipeComment.html","title":"class - RecipeComment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecipeComment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/schemas/comment.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                comment\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/comment.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/comment.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/comment.schema.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\nimport { User } from 'src/user/schemas/user.schema';\n\n\nexport type CommentDocument = Comment & Document;\n\n\n@Schema()\nexport class RecipeComment {\n\t@Prop()\n\ttitle: string;\n\n\t@Prop()\n\tcomment: string;\n\n\t@Prop({type: mongoose.Schema.Types.ObjectId, ref: 'User'})\n\tauthor: any;\n\n}\n\nexport const CommentSchema = SchemaFactory.createForClass(RecipeComment);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RecipeController.html":{"url":"controllers/RecipeController.html","title":"controller - RecipeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RecipeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/recipe.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                recipe\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByAuthor\n                            \n                            \n                                    Async\n                                findByAv_rating\n                            \n                            \n                                    Async\n                                findByCooking_time\n                            \n                            \n                                    Async\n                                findByCountry\n                            \n                            \n                                    Async\n                                findByDifficulty\n                            \n                            \n                                    Async\n                                findByFilter\n                            \n                            \n                                    Async\n                                findByFood_type\n                            \n                            \n                                    Async\n                                findByIs_public\n                            \n                            \n                                    Async\n                                findByMeal_type\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findByViews\n                            \n                            \n                                    Async\n                                findMostViewed\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(id: string, comment: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/comment')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    comment\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(res: Response, createRecipeDto: CreateRecipeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post('/create')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createRecipeDto\n                                    \n                                                CreateRecipeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByAuthor\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByAuthor(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/author/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByAv_rating\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByAv_rating(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/av_rating/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCooking_time\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCooking_time(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/cooking_time/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCountry\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCountry(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/country/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByDifficulty\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByDifficulty(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/difficulty/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByFilter(name: string, author: string, _avg_rating: number, is_public: boolean, meal_type: string, country: string, _cooking_time: number, difficulty: string, _views: number, food_type: string, ingredients: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/filter/by')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    author\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _avg_rating\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    is_public\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    meal_type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    country\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _cooking_time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    difficulty\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _views\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    food_type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ingredients\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByFood_type\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByFood_type(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/food_type/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByIs_public\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIs_public(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/is_public/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByMeal_type\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByMeal_type(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/meal_type/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByName(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/name/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByViews\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByViews(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/views/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findMostViewed\n                        \n                    \n                \n            \n            \n                \n                    \n                    findMostViewed()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Roles(Role.ADMIN)@UseGuards(JwtAuthGuard, RolesGuard)@Get('/top10/views')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Delete('delete/:id')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateRecipeDto: UpdateRecipeDto, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Patch('modify/:id')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRecipeDto\n                                    \n                                                UpdateRecipeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, Res, HttpStatus, Query, UseGuards } from '@nestjs/common';\nimport { RecipeService } from './recipe.service';\nimport { CreateRecipeDto } from './dto/create-recipe.dto';\nimport { UpdateRecipeDto } from './dto/update-recipe.dto';\nimport { Response } from 'express';\nimport { ApiBearerAuth } from '@nestjs/swagger';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { ParseObjectIdPipe } from 'src/utilities/parse-object-id-pipe.pipe';\nimport { CreateCommentDto } from './dto/add-comment.dto';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { Role } from 'src/auth/models/role.enum';\nimport { RolesGuard } from 'src/auth/guards/roles.guard';\n\n@Controller('recipe')\nexport class RecipeController {\n  constructor(private readonly recipeService: RecipeService) {}\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post('/create')\n  async create(@Res() res: Response, @Body() createRecipeDto: CreateRecipeDto) {\n    const recipe = await this.recipeService.create(createRecipeDto);\n    return res.status(HttpStatus.OK).json({\n      message: 'Recipe successfully created',\n      recipe\n    });\n\n  }\n\n  @Get('/list')\n  async findAll() {\n    return await this.recipeService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id', ParseObjectIdPipe) id: string) {\n    return await this.recipeService.findOne(id);\n  }\n  \n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Patch('modify/:id')\n  async update(@Param('id', ParseObjectIdPipe) id: string, @Body() updateRecipeDto: UpdateRecipeDto, @Res() res: Response) {\n    const updatedRecipe = await this.recipeService.update(id, updateRecipeDto);\n    return res.status(HttpStatus.OK).json({\n      message: 'Recipe successfully updated',\n      updatedRecipe\n    });\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete('delete/:id')\n  async remove(@Param('id', ParseObjectIdPipe) id: string, @Res() res: Response) {\n    const deletededRecipe = await this.recipeService.remove(id);\n    return res.status(HttpStatus.OK).json({\n      message: 'Recipe successfully deleted',\n      deletededRecipe\n    });    \n  }\n\n  @Get('/filter/by')\n  async findByFilter(\n    @Query('name') name: string,\n    @Query('author') author: string,\n    @Query('avg_rating') _avg_rating: number,\n    @Query('is_public') is_public: boolean,\n    @Query('meal_type') meal_type: string,\n    @Query('country') country: string,\n    @Query('cooking_time') _cooking_time: number,\n    @Query('difficulty') difficulty: string,\n    @Query('views') _views: number,\n    @Query('food_type') food_type: string,\n    @Query('ingredients') ingredients: string\n\n  ){\n\n    let avg_rating = undefined;\n    let views = undefined;\n    let cooking_time = undefined;\n\n    if (_avg_rating) {\n      avg_rating = Number(_avg_rating);\n    }\n    if (_views) {\n      views = Number(_views); \n    }\n    if (_cooking_time) {\n      cooking_time = Number(_cooking_time); \n    }    \n\n    let queries = {name, author, avg_rating, is_public, meal_type, country, cooking_time, difficulty, views, food_type, ingredients};\n\n    return await this.recipeService.findByFilter(queries);   \n\n  }\n\n  @Get('filter/name/:tag')\n  async findByName (@Param('tag') tag: string) {\n    return await this.recipeService.findByName(tag);\n  }\n  @Get('filter/author/:tag')\n  async findByAuthor (@Param('tag') tag: string) {\n    return await this.recipeService.findByAuthor(tag);\n  }\n  @Get('filter/av_rating/:tag')\n  async findByAv_rating (@Param('tag') tag: string) {\n    return await this.recipeService.findByAv_rating(tag);\n  }\n  @Get('filter/is_public/:tag')\n  async findByIs_public (@Param('tag') tag: string) {\n    return await this.recipeService.findByIs_public(tag);\n  }\n  @Get('filter/meal_type/:tag')\n  async findByMeal_type (@Param('tag') tag: string) {\n    return await this.recipeService.findByMeal_type(tag);\n  }\n  @Get('filter/country/:tag')\n  async findByCountry (@Param('tag') tag: string) {\n    return await this.recipeService.findByCountry(tag);\n  }\n  @Get('filter/cooking_time/:tag')\n  async findByCooking_time (@Param('tag') tag: string) {\n    return await this.recipeService.findByCooking_time(tag);\n  }\n  @Get('filter/difficulty/:tag')\n  async findByDifficulty (@Param('tag') tag: string) {\n    return await this.recipeService.findByDifficulty(tag);\n  }\n  @Get('filter/views/:tag')\n  async findByViews (@Param('tag') tag: string) {\n    return await this.recipeService.findByViews(tag);\n  }\n  @Get('filter/food_type/:tag')\n  async findByFood_type (@Param('tag') tag: string) {\n    return await this.recipeService.findByFood_type(tag);\n  }                  \n\n  @ApiBearerAuth()\n  @Roles(Role.ADMIN)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get('/top10/views')\n  async findMostViewed() {\n    return await this.recipeService.findMostViewed();\n  }\n\n  @Post(':id/comment') \n  async addComment(\n    @Param('id', ParseObjectIdPipe) id: string, \n    @Body() comment: CreateCommentDto, \n  ) {\n    return this.recipeService.addComment(id, comment); \n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RecipeModule.html":{"url":"modules/RecipeModule.html","title":"module - RecipeModule","body":"\n                   \n\n\n\n\n    Modules\n    RecipeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RecipeModule\n\n\n\ncluster_RecipeModule_providers\n\n\n\n\nRecipeService\n\nRecipeService\n\n\n\nRecipeModule\n\nRecipeModule\n\nRecipeModule -->\n\nRecipeService->RecipeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/recipe/recipe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RecipeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RecipeController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RecipeService } from './recipe.service';\nimport { RecipeController } from './recipe.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RecipeSchema, Recipe } from './schemas/recipe.schema';\nimport { RolesGuard } from 'src/auth/guards/roles.guard';\nimport { APP_GUARD } from '@nestjs/core';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Recipe.name, schema: RecipeSchema }]),\n  ],\n  controllers: [RecipeController],\n  providers: [RecipeService]\n})\nexport class RecipeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RecipeService.html":{"url":"injectables/RecipeService.html","title":"injectable - RecipeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RecipeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/recipe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByAuthor\n                            \n                            \n                                    Async\n                                findByAv_rating\n                            \n                            \n                                    Async\n                                findByCooking_time\n                            \n                            \n                                    Async\n                                findByCountry\n                            \n                            \n                                    Async\n                                findByDifficulty\n                            \n                            \n                                    Async\n                                findByFilter\n                            \n                            \n                                    Async\n                                findByFood_type\n                            \n                            \n                                    Async\n                                findByIs_public\n                            \n                            \n                                    Async\n                                findByMeal_type\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findByViews\n                            \n                            \n                                    Async\n                                findMostViewed\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(recipeModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/recipe/recipe.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        recipeModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(id: string, comment: any)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    comment\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createRecipeDto: CreateRecipeDto)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRecipeDto\n                                    \n                                                CreateRecipeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByAuthor\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByAuthor(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByAv_rating\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByAv_rating(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCooking_time\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCooking_time(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCountry\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCountry(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByDifficulty\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByDifficulty(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByFilter(queries: GetRecipiesFilterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queries\n                                    \n                                                GetRecipiesFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByFood_type\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByFood_type(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByIs_public\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIs_public(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByMeal_type\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByMeal_type(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByName(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByViews\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByViews(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findMostViewed\n                        \n                    \n                \n            \n            \n                \n                    \n                    findMostViewed()\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateRecipeDto: UpdateRecipeDto)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRecipeDto\n                                    \n                                                UpdateRecipeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateRecipeDto } from './dto/create-recipe.dto';\nimport { GetRecipiesFilterDto } from './dto/filter-recipe.dto';\nimport { UpdateRecipeDto } from './dto/update-recipe.dto';\nimport { Recipe, RecipeDocument } from \"./schemas/recipe.schema\";\nimport mongoose from 'mongoose';\n@Injectable()\nexport class RecipeService {\n\n    constructor( \n    @InjectModel(Recipe.name) private readonly recipeModel: Model, \n  ) {}\n\n  async create(createRecipeDto: CreateRecipeDto) {\n    const newRecipe = new this.recipeModel(createRecipeDto);\n    return await newRecipe.save();\n  }\n\n  async findAll(): Promise {\n    const recipiesData = await this.recipeModel.find()\n      .populate({ path: 'ingredients._id' })\n      .setOptions({ sanitizeFilter: true })\n      .exec();\n    if (!recipiesData || recipiesData.length == 0) {\n        console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }\n\n  async findOne(id: string): Promise {\n    if (mongoose.Types.ObjectId.isValid(id)) {\n          const recipeData = await this.recipeModel.findById(id)\n          .populate({ path: 'ingredients._id' })\n          .exec();\n    if (!recipeData) {\n        console.log(\"Error: no data\");\n    }\n    return recipeData;\n    }else {\n      console.log(\"Error: the id is not in a valid format\");\n    }\n\n\n  }\n\n  async update(id: string, updateRecipeDto: UpdateRecipeDto) {\n    const updatedRecipe = await this.recipeModel.findByIdAndUpdate(id,updateRecipeDto);\n    return updatedRecipe;\n  }\n\n  async remove(id: string) {\n    const removedRecipe = await this.recipeModel.findByIdAndDelete(id);\n    return removedRecipe;\n  }\n\n  async findByFilter(queries: GetRecipiesFilterDto) {\n\n    let recipies = await this.findAll();\n\n    let {name, author, avg_rating, is_public, meal_type, country, cooking_time, difficulty, views, food_type, ingredients} = queries;\n\n    if (name) {\n      recipies = recipies.filter( recipe => recipe.name === name);\n    }\n\n    if (author) {\n      recipies = recipies.filter( recipe => recipe.author === author);\n    }\n\n    if (avg_rating) {\n      recipies = recipies.filter( recipe => recipe.avg_rating == avg_rating);\n    }    \n\n    if (is_public != undefined) {\n      let is_publicBoolean = (is_public.toLowerCase() === \"true\");\n      recipies = recipies.filter( recipe => recipe.is_public == is_publicBoolean);\n    }   \n    \n    if (meal_type) {\n      recipies = recipies.filter( recipe => recipe.meal_type === meal_type);\n    }     \n\n    if (country) {\n      recipies = recipies.filter( recipe => recipe.country === country);\n    }  \n    if (cooking_time) {\n      recipies = recipies.filter( recipe => recipe.cooking_time == cooking_time);\n    }    \n    if (difficulty) {\n      recipies = recipies.filter( recipe => recipe.difficulty === difficulty);\n    }   \n    if (views) {\n      recipies = recipies.filter( recipe => recipe.views == views);\n    }   \n    if (food_type) {\n      recipies = recipies.filter( recipe => recipe.food_type === food_type);\n    }   \n\n    // if (ingredients) {\n    //   let ingredientsArray = ingredients.split(',');\n    //   recipies = recipies.filter(({ ingredients }) =>\n    //   ingredients.some(({ _id }) => ingredientsArray.includes(_id.toString()))\n    //   );\n    // }\n\n    return recipies;\n\n  }\n\n  async findByName(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({name: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }\n  async findByAuthor(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({author: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findByAv_rating(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({avg_rating: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findByIs_public(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({is_public: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findByMeal_type(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({meal_type: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findByCountry(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({country: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findByCooking_time(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({cooking_time: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findByDifficulty(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({difficulty: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findByViews(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({views: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findByFood_type(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({food_type: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findMostViewed(): Promise{\n    const recipiesData = await this.recipeModel.find().sort({\"views\":-1}).limit(10);\n    if (!recipiesData || recipiesData.length == 0) {\n        console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }\n\n  async addComment(id: string, comment: any) { \n    let recipe: RecipeDocument = await this.recipeModel.findById(id); \n    recipe.comments.push(comment); \n    recipe.save(); \n    return recipe;\n  }\n\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterAuthDto.html":{"url":"classes/RegisterAuthDto.html","title":"class - RegisterAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-auth.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\nimport { LoginAuthDto } from './login-auth.dto';\n\nexport class RegisterAuthDto extends PartialType(LoginAuthDto) {\n    @IsNotEmpty()\n    user_name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/roles.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { User } from 'src/user/schemas/user.schema';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\nimport { Role } from '../models/role.enum';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const req = context.switchToHttp().getRequest();\n    const user = req.user as User;\n    return requiredRoles.some((role) => user.role?.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShoppingList.html":{"url":"classes/ShoppingList.html","title":"class - ShoppingList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShoppingList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shopping_list/schema/shopping_list.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                \n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shopping_list/schema/shopping_list.schema.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(undefined, ingredients, ['undefined'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shopping_list/schema/shopping_list.schema.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport mongoose, { ObjectId } from \"mongoose\";\n\n@Schema()\nexport class ShoppingList {\n\n\t@Prop({type: mongoose.Types.ObjectId, ref: 'User'})\n\t_id: ObjectId;\n\n\t@Prop(Array)\n\tingredients: [{\n\t\tingredient: {type: mongoose.Types.ObjectId, ref:'Ingredient'},\n\t\tquantity: number\n\t}] \n}\n\n\nexport const ShoppingListSchema = SchemaFactory.createForClass(ShoppingList);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ShoppingListController.html":{"url":"controllers/ShoppingListController.html","title":"controller - ShoppingListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ShoppingListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shopping_list/shopping_list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                shopping-list\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                upsertShoppingList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/shopping_list/shopping_list.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/shopping_list/shopping_list.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/shopping_list/shopping_list.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateShoppingListDto: UpdateShoppingListDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/shopping_list/shopping_list.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateShoppingListDto\n                                    \n                                                UpdateShoppingListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upsertShoppingList\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsertShoppingList(UpsertShoppingListDto: UpsertShoppingListDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, CompareIdGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/shopping_list/shopping_list.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    UpsertShoppingListDto\n                                    \n                                                UpsertShoppingListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, Headers, UseGuards, Request  } from '@nestjs/common';\nimport { ShoppingListService } from './shopping_list.service';\nimport { UpsertShoppingListDto } from './dto/upsert-shopping_list.dto';\nimport { UpdateShoppingListDto } from './dto/update-shopping_list.dto';\nimport { ParseObjectIdPipe } from 'src/utilities/parse-object-id-pipe.pipe';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { CompareIdGuard } from 'src/auth/guards/compare-id.guard';\n\n@Controller('shopping-list')\nexport class ShoppingListController {\n  constructor(private readonly shoppingListService: ShoppingListService) {}\n\n  @UseGuards(JwtAuthGuard, CompareIdGuard)\n  @Post()\n  async upsertShoppingList(@Body() UpsertShoppingListDto: UpsertShoppingListDto) {\n    return this.shoppingListService.upsertShoppingList(UpsertShoppingListDto);\n  }\n\n  @Get()\n  async findAll() {\n    return this.shoppingListService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id', ParseObjectIdPipe) id: string) {\n    return this.shoppingListService.findOne(id);\n  }\n\n  @Patch(':id')\n  async update(@Param('id') id: string, @Body() updateShoppingListDto: UpdateShoppingListDto) {\n    return this.shoppingListService.update(Number(id), updateShoppingListDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string) {\n    return this.shoppingListService.remove(Number(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ShoppingListModule.html":{"url":"modules/ShoppingListModule.html","title":"module - ShoppingListModule","body":"\n                   \n\n\n\n\n    Modules\n    ShoppingListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ShoppingListModule\n\n\n\ncluster_ShoppingListModule_providers\n\n\n\n\nShoppingListService\n\nShoppingListService\n\n\n\nShoppingListModule\n\nShoppingListModule\n\nShoppingListModule -->\n\nShoppingListService->ShoppingListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shopping_list/shopping_list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ShoppingListService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ShoppingListController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ShoppingListService } from './shopping_list.service';\nimport { ShoppingListController } from './shopping_list.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ShoppingList, ShoppingListSchema } from './schema/shopping_list.schema';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from 'src/auth/constants/jwt.constants';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: ShoppingList.name, schema: ShoppingListSchema }]),\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '1440h' },\n    })\n  ],\n  controllers: [ShoppingListController],\n  providers: [ShoppingListService]\n})\nexport class ShoppingListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShoppingListService.html":{"url":"injectables/ShoppingListService.html","title":"injectable - ShoppingListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ShoppingListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shopping_list/shopping_list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                    Async\n                                upsertShoppingList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(shoppingListModel: Model, jwtAuthService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/shopping_list/shopping_list.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        shoppingListModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtAuthService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/shopping_list/shopping_list.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shopping_list/shopping_list.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/shopping_list/shopping_list.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateShoppingListDto: UpdateShoppingListDto)\n                \n            \n\n\n            \n                \n                    Defined in src/shopping_list/shopping_list.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateShoppingListDto\n                                    \n                                                UpdateShoppingListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upsertShoppingList\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsertShoppingList(upsertShoppingListDto: UpsertShoppingListDto)\n                \n            \n\n\n            \n                \n                    Defined in src/shopping_list/shopping_list.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    upsertShoppingListDto\n                                    \n                                                UpsertShoppingListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport mongoose, { Model } from 'mongoose';\nimport { UpsertShoppingListDto } from './dto/upsert-shopping_list.dto';\nimport { UpdateShoppingListDto } from './dto/update-shopping_list.dto';\nimport { ShoppingList } from './schema/shopping_list.schema';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class ShoppingListService {\n\n  constructor( \n    @InjectModel(ShoppingList.name) private readonly shoppingListModel: Model,\n    private jwtAuthService:JwtService\n  ) {}\n\n  async upsertShoppingList(upsertShoppingListDto: UpsertShoppingListDto) {\n\n    const shoppingListFound = await this.shoppingListModel.find({'ingredients.ingredient':'63d0f9903dccc038d38d416c'});\n    return shoppingListFound;\n    // const shoppingListUpdated = await this.shoppingListModel.findOneAndUpdate();\n\n  }\n\n  async findAll(): Promise {\n    const shoppingListData = await this.shoppingListModel.find();\n    if (!shoppingListData || shoppingListData.length == 0) {\n        console.log(\"Error: no data\");\n    }\n    return shoppingListData;\n  }\n\n\n  async findOne(id: string) {\n\n    if (mongoose.Types.ObjectId.isValid(id)) {\n          const shoppingListData = await this.shoppingListModel.findById(id)\n          .populate({ path: 'ingredients.ingredient' })\n          .exec();\n    if (!shoppingListData) {\n        console.log(\"Error: no data\");\n    }\n    return shoppingListData;\n    }else {\n      console.log(\"Error: the id is not in a valid format\");\n    }\n\n  }\n\n  update(id: number, updateShoppingListDto: UpdateShoppingListDto) {\n    return `This action updates a #${id} shoppingList`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} shoppingList`;\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateFavoriteDto.html":{"url":"classes/UpdateFavoriteDto.html","title":"class - UpdateFavoriteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFavoriteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/favorites/dto/update-favorite.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateFavoriteDto } from './create-favorite.dto';\n\nexport class UpdateFavoriteDto extends PartialType(CreateFavoriteDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateGroupDto.html":{"url":"classes/UpdateGroupDto.html","title":"class - UpdateGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/dto/update-group.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateGroupDto } from './create-group.dto';\n\nexport class UpdateGroupDto extends PartialType(CreateGroupDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateIngredientDto.html":{"url":"classes/UpdateIngredientDto.html","title":"class - UpdateIngredientDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateIngredientDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ingredient/dto/update-ingredient.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateIngredientDto } from './create-ingredient.dto';\n\nexport class UpdateIngredientDto extends PartialType(CreateIngredientDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateNotificationDto.html":{"url":"classes/UpdateNotificationDto.html","title":"class - UpdateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/dto/update-notification.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateNotificationDto } from './create-notification.dto';\n\nexport class UpdateNotificationDto extends PartialType(CreateNotificationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRecipeDto.html":{"url":"classes/UpdateRecipeDto.html","title":"class - UpdateRecipeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRecipeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/dto/update-recipe.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateRecipeDto } from './create-recipe.dto';\n\nexport class UpdateRecipeDto extends PartialType(CreateRecipeDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateShoppingListDto.html":{"url":"classes/UpdateShoppingListDto.html","title":"class - UpdateShoppingListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateShoppingListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shopping_list/dto/update-shopping_list.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { UpsertShoppingListDto } from './upsert-shopping_list.dto';\n\nexport class UpdateShoppingListDto extends PartialType(UpsertShoppingListDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpsertShoppingListDto.html":{"url":"classes/UpsertShoppingListDto.html","title":"class - UpsertShoppingListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpsertShoppingListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shopping_list/dto/upsert-shopping_list.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                ingredients\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '63cb0277ee58877e63e36fcc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shopping_list/dto/upsert-shopping_list.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     [literal type]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shopping_list/dto/upsert-shopping_list.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport mongoose, { ObjectId } from \"mongoose\";\n\nexport class UpsertShoppingListDto {\n\n\t@ApiProperty( {example: '63cb0277ee58877e63e36fcc'})\n\t_id: ObjectId;\n\n    @ApiProperty( {example:''})\n\tingredients: [{\n\t\tingredient: {type: mongoose.Types.ObjectId, ref:'Ingredient'},\n\t\tquantity: number\n\t}] \n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                badges\n                            \n                            \n                                email\n                            \n                            \n                                favorites\n                            \n                            \n                                fisrt_name\n                            \n                            \n                                groups\n                            \n                            \n                                last_name\n                            \n                            \n                                notifications_list\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        badges\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['Object'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favorites\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['Object'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fisrt_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        groups\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['Object'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifications_list\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['Object'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\nimport { Role } from \"src/auth/models/role.enum\";\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class Favorites{\n    @Prop()\n    _id: string; \n}\n\n@Schema()\nexport class Badges{\n    @Prop()\n    name: string;\n}\n\n\n@Schema()\nexport class Notification_list{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class Groups{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    fisrt_name: string;\n\n    @Prop()\n    last_name: string;\n\n    @Prop({ required: true })\n    user_name: string;\n\n    @Prop({ required: true })\n    email: string;\n\n    @Prop({ required: true })\n    password: string;\n\n    @Prop({ required: true, default: Role.USER })\n    role: Role;\n\n    @Prop([Object])\n    favorites: Array;\n\n    @Prop()\n    address: string;\n\n    @Prop([Object])\n    badges: Array;\n\n    @Prop([Object])\n    notifications_list: Array;\n\n    @Prop([Object])\n    groups: Array;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { ApiBearerAuth } from '@nestjs/swagger';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.create(createUserDto);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  findAll() {\n    return this.userService.findAll();\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.userService.findOne(id);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.userService.update(id, updateUserDto);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserSchema, User } from './schemas/user.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }])\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService]\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport mongoose, { Model } from 'mongoose';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User, UserDocument } from './schemas/user.schema';\n\n@Injectable()\nexport class UserService {\n\n  constructor(\n    @InjectModel(User.name) private readonly userModel: Model,\n  ) {}\n\n  async create(createUserDto: CreateUserDto) {\n    const newUser = new this.userModel(createUserDto);\n    return await newUser.save();\n  }\n\n  async findAll(): Promise {\n    const usersData = await this.userModel.find();\n    if (!usersData || usersData.length == 0) {\n        console.log(\"Error: no data\");\n    }\n    return usersData;\n  }\n\n  async findOne(id: string): Promise {\n    if (mongoose.Types.ObjectId.isValid(id)) {\n          const userData = await this.userModel.findById(id);\n    if (!userData) {\n        console.log(\"Error: no data\");\n    }\n    return userData;\n    }else {\n      console.log(\"Error: the id is not in a valid format\");\n    }\n  }\n\n  async update(id: string, updateUserDto: UpdateUserDto) {\n    const updatedUser = await this.userModel.findByIdAndUpdate(id,updateUserDto);\n    return updatedUser;\n  }\n\n  async remove(id: string) {\n    const removedUser = await this.userModel.findByIdAndDelete(id);\n    return removedUser;\n  }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/constants/jwt.constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login-auth.dto.ts\n            \n            class\n            LoginAuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register-auth.dto.ts\n            \n            class\n            RegisterAuthDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/compare-id.guard.ts\n            \n            guard\n            CompareIdGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/schemas/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/favorites/dto/create-favorite.dto.ts\n            \n            class\n            CreateFavoriteDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/favorites/dto/update-favorite.dto.ts\n            \n            class\n            UpdateFavoriteDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/favorites/favorites.controller.ts\n            \n            controller\n            FavoritesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/favorites/favorites.service.ts\n            \n            injectable\n            FavoritesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/favorites/schemas/favorite.entity.ts\n            \n            class\n            Favorite\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/group/dto/create-group.dto.ts\n            \n            class\n            CreateGroupDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/group/dto/filter-group.dto.ts\n            \n            class\n            GetGroupFilterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/group/dto/update-group.dto.ts\n            \n            class\n            UpdateGroupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/group/group.controller.ts\n            \n            controller\n            GroupController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/group/group.service.ts\n            \n            injectable\n            GroupService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/group/schemas/group.schema.ts\n            \n            class\n            Group\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/group/schemas/group.schema.ts\n            \n            variable\n            GroupSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/ingredient/dto/create-ingredient.dto.ts\n            \n            class\n            CreateIngredientDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/ingredient/dto/update-ingredient.dto.ts\n            \n            class\n            UpdateIngredientDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/ingredient/ingredient.controller.ts\n            \n            controller\n            IngredientController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/ingredient/ingredient.service.ts\n            \n            injectable\n            IngredientService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/ingredient/schemas/ingredient.schema.ts\n            \n            class\n            Ingredient\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/ingredient/schemas/ingredient.schema.ts\n            \n            variable\n            IngredientSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notifications/dto/create-notification.dto.ts\n            \n            class\n            CreateNotificationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/notifications/dto/update-notification.dto.ts\n            \n            class\n            UpdateNotificationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notifications/notifications.controller.ts\n            \n            controller\n            NotificationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/notifications/notifications.service.ts\n            \n            injectable\n            NotificationService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/notifications/schemas/notification.schema.ts\n            \n            class\n            Notification\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/notifications/schemas/notification.schema.ts\n            \n            variable\n            NotificationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/recipe/dto/add-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/recipe/dto/create-recipe.dto.ts\n            \n            class\n            CommentNested\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/recipe/dto/create-recipe.dto.ts\n            \n            class\n            CreateRecipeDto\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/recipe/dto/create-recipe.dto.ts\n            \n            class\n            IngredientNested\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/recipe/dto/filter-recipe.dto.ts\n            \n            class\n            GetRecipiesFilterDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/recipe/dto/update-recipe.dto.ts\n            \n            class\n            UpdateRecipeDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/recipe/recipe.controller.ts\n            \n            controller\n            RecipeController\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/recipe/recipe.service.ts\n            \n            injectable\n            RecipeService\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/recipe/schemas/comment.schema.ts\n            \n            class\n            RecipeComment\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/recipe/schemas/comment.schema.ts\n            \n            variable\n            CommentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/recipe/schemas/recipe.schema.ts\n            \n            class\n            Recipe\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/recipe/schemas/recipe.schema.ts\n            \n            variable\n            RecipeSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shopping_list/dto/update-shopping_list.dto.ts\n            \n            class\n            UpdateShoppingListDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shopping_list/dto/upsert-shopping_list.dto.ts\n            \n            class\n            UpsertShoppingListDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shopping_list/schema/shopping_list.schema.ts\n            \n            class\n            ShoppingList\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shopping_list/schema/shopping_list.schema.ts\n            \n            variable\n            ShoppingListSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shopping_list/shopping_list.controller.ts\n            \n            controller\n            ShoppingListController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/shopping_list/shopping_list.service.ts\n            \n            injectable\n            ShoppingListService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/schemas/user.schema.ts\n            \n            class\n            Badges\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/schemas/user.schema.ts\n            \n            class\n            Favorites\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/schemas/user.schema.ts\n            \n            class\n            Groups\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/schemas/user.schema.ts\n            \n            class\n            Notification_list\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/user/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/utilities/parse-object-id-pipe.pipe.ts\n            \n            injectable\n            ParseObjectIdPipe\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.1\n        \n            @nestjs/mongoose : ^9.2.1\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.4\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            dotenv : ^16.0.3\n        \n            mongoose : ^6.8.4\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.6.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/models/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 SYSTEM\n                            \n                        \n                        \n                            \n                                Value : system\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ yarn installRunning the app\n# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\n# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FavoritesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GroupModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IngredientModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecipeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ShoppingListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_FavoritesModule\n\n\n\ncluster_FavoritesModule_providers\n\n\n\ncluster_GroupModule\n\n\n\ncluster_GroupModule_providers\n\n\n\ncluster_IngredientModule\n\n\n\ncluster_IngredientModule_providers\n\n\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_providers\n\n\n\ncluster_RecipeModule\n\n\n\ncluster_RecipeModule_providers\n\n\n\ncluster_ShoppingListModule\n\n\n\ncluster_ShoppingListModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nFavoritesModule\n\nFavoritesModule\n\nAppModule -->\n\nFavoritesModule->AppModule\n\n\n\n\n\nGroupModule\n\nGroupModule\n\nAppModule -->\n\nGroupModule->AppModule\n\n\n\n\n\nIngredientModule\n\nIngredientModule\n\nAppModule -->\n\nIngredientModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nRecipeModule\n\nRecipeModule\n\nAppModule -->\n\nRecipeModule->AppModule\n\n\n\n\n\nShoppingListModule\n\nShoppingListModule\n\nAppModule -->\n\nShoppingListModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nFavoritesService\n\nFavoritesService\n\nFavoritesModule -->\n\nFavoritesService->FavoritesModule\n\n\n\n\n\nGroupService\n\nGroupService\n\nGroupModule -->\n\nGroupService->GroupModule\n\n\n\n\n\nIngredientService\n\nIngredientService\n\nIngredientModule -->\n\nIngredientService->IngredientModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationsModule -->\n\nNotificationService->NotificationsModule\n\n\n\n\n\nRecipeService\n\nRecipeService\n\nRecipeModule -->\n\nRecipeService->RecipeModule\n\n\n\n\n\nShoppingListService\n\nShoppingListService\n\nShoppingListModule -->\n\nShoppingListService->ShoppingListModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    34 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CommentDocument   (src/.../comment.schema.ts)\n                        \n                        \n                            GroupDocument   (src/.../group.schema.ts)\n                        \n                        \n                            IngredientDocument   (src/.../ingredient.schema.ts)\n                        \n                        \n                            NotificationDocument   (src/.../notification.schema.ts)\n                        \n                        \n                            RecipeDocument   (src/.../recipe.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/recipe/schemas/comment.schema.ts\n    \n    \n        \n            \n                \n                    \n                    CommentDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/group/schemas/group.schema.ts\n    \n    \n        \n            \n                \n                    \n                    GroupDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/ingredient/schemas/ingredient.schema.ts\n    \n    \n        \n            \n                \n                    \n                    IngredientDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/notifications/schemas/notification.schema.ts\n    \n    \n        \n            \n                \n                    \n                    NotificationDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/recipe/schemas/recipe.schema.ts\n    \n    \n        \n            \n                \n                    \n                    RecipeDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/user/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CommentSchema   (src/.../comment.schema.ts)\n                        \n                        \n                            GroupSchema   (src/.../group.schema.ts)\n                        \n                        \n                            IngredientSchema   (src/.../ingredient.schema.ts)\n                        \n                        \n                            jwtConstants   (src/.../jwt.constants.ts)\n                        \n                        \n                            NotificationSchema   (src/.../notification.schema.ts)\n                        \n                        \n                            RecipeSchema   (src/.../recipe.schema.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            ShoppingListSchema   (src/.../shopping_list.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/recipe/schemas/comment.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CommentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(RecipeComment)\n                    \n                \n\n\n        \n    \n\n    src/group/schemas/group.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GroupSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Group)\n                    \n                \n\n\n        \n    \n\n    src/ingredient/schemas/ingredient.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IngredientSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Ingredient)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants/jwt.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.SECRET\n}\n                    \n                \n\n\n        \n    \n\n    src/notifications/schemas/notification.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NotificationSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Notification)\n                    \n                \n\n\n        \n    \n\n    src/recipe/schemas/recipe.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RecipeSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Recipe)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/shopping_list/schema/shopping_list.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ShoppingListSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ShoppingList)\n                    \n                \n\n\n        \n    \n\n    src/user/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
