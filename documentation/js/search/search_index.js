var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.399,1,2.892]],["body/controllers/AppController.html",[0,2.293,1,4.741,2,1.847,3,0.197,4,0.177,5,0.177,6,4.61,7,0.541,8,2.054,9,6.506,10,1.202,11,0.014,12,0.678,13,5.297,14,1.655,15,1.157,16,0.375,17,1.119,18,4.487,19,4.61,20,0.197,21,0.299,22,2.68,23,2.156,24,1.655,25,5.297,26,0.011,27,0.011]],["title/modules/AppModule.html",[28,1.452,29,2.892]],["body/modules/AppModule.html",[1,4.158,2,1.723,3,0.129,4,0.116,5,0.116,11,0.014,16,0.449,17,0.73,18,4.346,19,3.007,20,0.129,21,0.195,26,0.008,27,0.008,28,1.789,29,5.847,30,1.595,31,2.281,32,3.007,33,3.007,34,3.007,35,4.64,36,4.64,37,4.64,38,4.64,39,4.64,40,4.64,41,4.64,42,4.346,43,2.5,44,1.748,45,1.748,46,3.456,47,2.625,48,2.922,49,3.456,50,4.3,51,1.934,52,0.903,53,3.456,54,3.456,55,3.456,56,3.456,57,3.456,58,3.456,59,3.007,60,2.492,61,2.043,62,3.456,63,3.456,64,3.456,65,3.456,66,3.456]],["title/injectables/AppService.html",[18,2.517,67,1.049]],["body/injectables/AppService.html",[3,0.206,4,0.185,5,0.185,7,0.566,8,2.111,9,6.608,11,0.013,12,0.709,14,1.73,15,1.189,16,0.316,17,1.17,18,4.241,20,0.206,21,0.312,24,1.73,26,0.011,27,0.011,67,1.766,68,2.448,69,4.819,70,5.537,71,5.537,72,5.537]],["title/classes/Auth.html",[21,0.226,73,2.892]],["body/classes/Auth.html",[3,0.23,4,0.206,5,0.206,11,0.013,20,0.23,21,0.348,26,0.012,27,0.012,73,5.199,74,1.214,75,5.373]],["title/controllers/AuthController.html",[0,1.399,76,2.892]],["body/controllers/AuthController.html",[0,1.518,2,1.518,3,0.162,4,0.146,5,0.146,7,0.444,8,1.81,10,1.315,11,0.014,12,0.742,14,1.81,16,0.396,17,0.92,20,0.162,21,0.246,22,2.202,23,1.771,24,1.81,26,0.01,27,0.01,73,3.138,76,4.178,77,3.788,78,2.435,79,5.794,80,5.794,81,4.352,82,4.359,83,5.794,84,4.352,85,1.947,86,0.982,87,0.711,88,1.81,89,5.042,90,4.352,91,4.653,92,5.794,93,4.352,94,5.042,95,2.435,96,2.312,97,2.435,98,2.435,99,2.435,100,4.088,101,3.788,102,3.788,103,4.547,104,3.788,105,4.352,106,4.352,107,4.352,108,4.352,109,4.352]],["title/modules/AuthModule.html",[28,1.452,35,2.687]],["body/modules/AuthModule.html",[2,1.921,3,0.15,4,0.135,5,0.135,11,0.014,16,0.444,17,0.853,20,0.15,21,0.228,26,0.009,27,0.009,28,1.995,30,1.864,31,2.543,35,5.209,42,4.566,43,2.787,44,2.043,45,2.043,47,2.927,48,3.257,51,2.259,52,1.056,61,3.257,76,4.521,86,0.684,100,4.566,101,3.514,110,3.514,111,4.038,112,3.514,113,4.875,114,4.038,115,4.038,116,1.462,117,2.927,118,2.911,119,3.514,120,2.706,121,2.706,122,3.514,123,4.038,124,4.038,125,4.038,126,2.534,127,3.514,128,1.519,129,3.514,130,3.169,131,3.169,132,3.514,133,3.514,134,3.514]],["title/injectables/AuthService.html",[67,1.049,100,2.517]],["body/injectables/AuthService.html",[3,0.122,4,0.11,5,0.11,7,0.335,8,1.486,11,0.014,12,0.717,14,1.486,16,0.41,17,0.693,20,0.122,21,0.185,23,1.334,24,1.486,26,0.008,27,0.008,52,0.857,67,1.244,68,1.449,82,3.855,85,1.881,86,1.041,87,0.687,88,1.749,89,4.14,91,4.116,94,5.345,100,2.986,102,2.853,103,3.733,104,2.853,116,1.187,118,2.364,120,2.197,135,2.853,136,3.441,137,4.14,138,4.757,139,2.662,140,2.853,141,3.632,142,4.14,143,4.872,144,3.278,145,4.14,146,4.757,147,3.278,148,2.406,149,4.757,150,3.278,151,2.853,152,1.939,153,0.827,154,1.834,155,3.278,156,3.278,157,2.853,158,2.853,159,2.986,160,2.853,161,2.245,162,2.662,163,3.278,164,3.311,165,3.278,166,3.278,167,3.278,168,3.278,169,1.834,170,4.757,171,3.278,172,3.733,173,2.297,174,3.278,175,3.278,176,4.757,177,3.278,178,3.278,179,3.278,180,3.278,181,2.853,182,3.278,183,3.278,184,1.583,185,3.278,186,4.14,187,3.278,188,3.187,189,3.278]],["title/classes/Badges.html",[21,0.226,190,2.244]],["body/classes/Badges.html",[3,0.145,4,0.131,5,0.131,7,0.399,10,0.887,11,0.014,12,0.501,15,1.373,16,0.352,20,0.275,21,0.393,26,0.009,27,0.009,52,1.022,74,0.768,86,1.181,87,0.661,116,1.951,117,2.077,128,2.71,153,0.986,154,2.187,161,1.221,162,2.187,169,2.187,184,2.976,190,3.449,191,2.187,192,1.459,193,3.825,194,3.908,195,1.887,196,2.725,197,2.453,198,2.725,199,1.657,200,2.187,201,3.014,202,4.67,203,3.217,204,2.453,205,2.453,206,2.187,207,2.311,208,2.619,209,4.452,210,4.17,211,2.619,212,2.453,213,2.453]],["title/classes/CommentNested.html",[21,0.226,214,2.687]],["body/classes/CommentNested.html",[3,0.113,4,0.101,5,0.101,7,0.309,10,1.213,11,0.013,12,0.685,15,1.32,16,0.337,20,0.113,21,0.356,26,0.007,27,0.007,74,0.595,86,0.513,87,0.881,153,1.132,192,1.215,199,1.902,203,1.397,214,3.961,215,4.263,216,1.9,217,2.854,218,2.991,219,2.991,220,2.376,221,4.64,222,3.027,223,5.948,224,3.027,225,3.027,226,4.095,227,1.056,228,3.521,229,4.955,230,4.196,231,5.371,232,1.9,233,2.183,234,3.582,235,2.653,236,3.235,237,2.614,238,1.694,239,4.279,240,4.196,241,3.521,242,2.376,243,2.376,244,2.376,245,2.376,246,2.376,247,2.376,248,2.376,249,2.376,250,2.376,251,2.376,252,2.376,253,2.376,254,2.376,255,2.376,256,2.376,257,2.376,258,2.376,259,1.9,260,2.183,261,2.376,262,1.79,263,2.376,264,2.376,265,2.183,266,1.79,267,1.694,268,3.235,269,2.376,270,1.608,271,2.376,272,1.79,273,2.376,274,1.79,275,2.376,276,1.79,277,2.376,278,1.79,279,2.376,280,1.79,281,2.376,282,1.79,283,2.376,284,1.461,285,2.376,286,2.376,287,2.376,288,2.183,289,2.183,290,2.183,291,2.376,292,2.183]],["title/guards/CompareIdGuard.html",[293,3.148,294,2.892]],["body/guards/CompareIdGuard.html",[3,0.181,4,0.163,5,0.163,7,0.498,8,1.949,11,0.014,12,0.624,14,1.522,16,0.278,17,1.03,20,0.181,21,0.275,24,1.949,26,0.01,27,0.01,67,1.631,85,1.638,86,0.826,87,0.598,88,1.522,96,2.589,116,1.765,161,2.149,203,2.25,267,3.491,294,4.498,295,3.825,296,4.896,297,4.242,298,6.313,299,5.429,300,6.313,301,4.874,302,4.242,303,3.825,304,4.242,305,4.242,306,4.874,307,4.874,308,4.874,309,4.874,310,4.242]],["title/classes/CreateCommentDto.html",[21,0.226,311,2.892]],["body/classes/CreateCommentDto.html",[3,0.173,4,0.155,5,0.155,7,0.474,10,1.525,11,0.013,12,0.861,15,1.332,16,0.265,20,0.173,21,0.262,26,0.01,27,0.01,74,0.912,87,0.824,192,1.636,217,3.244,218,3.76,219,3.76,226,2.464,227,1.617,260,4.356,284,2.917,311,4.356,312,6.196,313,4.036,314,4.476,315,6.042,316,4.638,317,6.042,318,6.042,319,6.042,320,6.042,321,6.042,322,4.638,323,6.042,324,6.042,325,4.638]],["title/classes/CreateFavoriteDto.html",[21,0.226,326,2.517]],["body/classes/CreateFavoriteDto.html",[3,0.2,4,0.18,5,0.18,7,0.55,10,1.221,11,0.014,12,0.689,16,0.379,20,0.2,21,0.304,26,0.011,27,0.011,74,1.058,87,0.66,153,1.358,192,1.798,199,3.053,226,3.528,227,1.877,239,3.011,314,3.183,326,4.168,327,5.778,328,4.224,329,4.258,330,6.64,331,5.382]],["title/classes/CreateGroupDto.html",[21,0.226,332,2.517]],["body/classes/CreateGroupDto.html",[3,0.229,4,0.205,5,0.205,11,0.013,20,0.229,21,0.347,26,0.012,27,0.012,74,1.208,332,4.514,333,5.349,334,4.432]],["title/classes/CreateIngredientDto.html",[21,0.226,335,2.517]],["body/classes/CreateIngredientDto.html",[3,0.191,4,0.172,5,0.172,7,0.524,10,1.463,11,0.013,12,0.826,15,1.301,16,0.293,20,0.191,21,0.29,26,0.011,27,0.011,74,1.009,86,1.195,87,0.791,192,1.746,226,3.745,227,1.791,239,3.608,314,3.813,335,4.047,336,6.135,337,4.03,338,6.135,339,6.448,340,5.135,341,6.448,342,5.135]],["title/classes/CreateNotificationDto.html",[21,0.226,343,2.517]],["body/classes/CreateNotificationDto.html",[3,0.153,4,0.137,5,0.137,7,0.419,10,1.608,11,0.013,12,0.907,15,1.286,16,0.318,20,0.153,21,0.231,26,0.009,27,0.009,74,0.806,87,0.933,153,1.035,173,2.687,192,1.507,219,3.536,226,3.883,239,3.965,284,2.687,314,4.19,329,3.737,343,3.493,344,6.36,345,3.218,346,6.36,347,5.499,348,5.499,349,5.566,350,5.566,351,5.566,352,4.099,353,4.844,354,4.099,355,4.844,356,5.566,357,4.099,358,4.099,359,5.566,360,4.099,361,4.099,362,4.099]],["title/classes/CreateRecipeDto.html",[21,0.226,238,2.244]],["body/classes/CreateRecipeDto.html",[3,0.081,4,0.073,5,0.073,7,0.223,10,1.622,11,0.014,12,0.915,15,1.309,16,0.284,20,0.081,21,0.307,26,0.006,27,0.006,74,0.429,86,0.738,87,0.919,153,0.879,192,0.944,199,1.845,203,1.007,214,3.331,215,5.214,216,1.369,217,2.4,218,1.22,219,1.22,221,3.416,223,5.353,226,3.842,227,0.761,228,2.735,229,4.265,230,3.416,231,4.773,232,1.369,233,1.572,234,3.331,235,2.061,236,3.138,237,2.689,238,1.95,239,3.999,240,4.547,241,3.416,242,2.735,243,2.735,244,2.735,245,2.735,246,2.735,247,2.735,248,2.735,249,2.735,250,2.735,251,2.735,252,2.735,253,2.735,254,2.735,255,2.735,256,2.735,257,2.735,258,2.735,259,2.732,260,1.572,261,1.712,262,2.573,263,2.735,264,1.712,265,3.138,266,2.573,267,1.95,268,3.584,269,2.735,270,2.312,271,1.712,272,2.573,273,1.712,274,2.573,275,1.712,276,2.573,277,1.712,278,2.573,279,1.712,280,2.573,281,1.712,282,2.573,283,2.735,284,1.682,285,2.735,286,2.735,287,2.735,288,2.513,289,2.513,290,2.513,291,2.735,292,3.138,314,4.226,363,2.181,364,2.181,365,2.181,366,2.181,367,3.485,368,2.181,369,2.181,370,2.181,371,2.181,372,2.181,373,2.181,374,2.181,375,2.181,376,2.181,377,2.181,378,2.181,379,2.181,380,2.181,381,2.181,382,2.181,383,2.181,384,2.181,385,2.181,386,2.181,387,2.181,388,2.181,389,2.181]],["title/classes/CreateUserDto.html",[21,0.226,390,2.517]],["body/classes/CreateUserDto.html",[3,0.116,4,0.104,5,0.104,7,0.318,10,1.693,11,0.014,12,0.955,15,1.353,16,0.262,20,0.116,21,0.176,26,0.008,27,0.008,74,0.613,87,0.915,162,3.044,169,3.044,184,2.626,190,3.74,192,1.242,198,3.034,199,2.543,200,1.745,201,3.356,204,3.414,205,3.414,206,3.044,210,4.449,212,3.414,226,2.437,227,1.087,239,1.745,268,3.307,314,4.724,329,2.712,355,3.991,390,2.879,391,6.567,392,2.447,393,5.44,394,4.586,395,4.586,396,3.118,397,4.586,398,3.118,399,4.586,400,3.118,401,3.118,402,3.118,403,5.998,404,3.118,405,4.586,406,3.118,407,3.118,408,4.586,409,3.118,410,4.586,411,3.118,412,4.586,413,3.118,414,2.447]],["title/classes/Favorite.html",[21,0.226,415,2.892]],["body/classes/Favorite.html",[3,0.23,4,0.206,5,0.206,11,0.013,20,0.23,21,0.348,26,0.012,27,0.012,74,1.214,415,5.199,416,5.373]],["title/classes/Favorites.html",[21,0.226,198,2.029]],["body/classes/Favorites.html",[3,0.145,4,0.131,5,0.131,7,0.399,10,0.887,11,0.014,12,0.501,15,1.373,16,0.352,20,0.275,21,0.393,26,0.009,27,0.009,52,1.022,74,0.768,86,1.045,87,0.661,116,1.951,117,2.077,128,2.71,153,0.986,154,2.187,161,1.221,162,2.187,169,2.187,184,2.976,190,3.014,191,2.187,192,1.459,193,3.825,195,1.887,196,2.725,197,2.453,198,3.118,199,2.613,200,2.187,201,3.014,202,4.67,203,3.217,204,2.453,205,2.453,206,2.187,207,2.311,208,2.619,209,4.452,210,4.17,211,2.619,212,2.453,213,2.453,417,3.908]],["title/controllers/FavoritesController.html",[0,1.399,418,2.892]],["body/controllers/FavoritesController.html",[0,1.224,2,1.224,3,0.131,4,0.117,5,0.117,7,0.358,8,1.561,10,1.52,11,0.014,12,0.858,14,2.092,15,1.311,16,0.362,17,0.742,20,0.131,21,0.198,22,1.776,23,1.429,24,2.092,26,0.008,27,0.008,78,1.964,85,2.13,86,1.074,87,0.777,88,1.98,95,3.255,96,2.654,97,1.964,98,1.964,99,1.964,198,1.776,326,4.369,418,3.602,419,3.055,420,1.809,421,2.687,422,2.118,423,2.118,424,2.118,425,3.055,426,3.51,427,3.51,428,1.488,429,2.954,430,3.51,431,2.723,432,1.488,433,3.136,434,3.51,435,1.488,436,4.905,437,3.136,438,3.51,439,3.651,440,3.055,441,1.62,442,3.921,443,1.488,444,3.51,445,2.352,446,3.51,447,3.51,448,2.075,449,3.51,450,2.075,451,3.51,452,2.075,453,3.51]],["title/modules/FavoritesModule.html",[28,1.452,36,2.687]],["body/modules/FavoritesModule.html",[2,2.265,3,0.193,4,0.174,5,0.174,11,0.014,16,0.404,17,1.098,20,0.193,21,0.293,26,0.011,27,0.011,28,2.352,30,2.398,31,2.998,36,5.224,43,3.286,44,2.628,45,2.628,47,3.451,418,5.11,439,4.894,440,4.521,454,4.521,455,4.521,456,5.194,457,5.194]],["title/injectables/FavoritesService.html",[67,1.049,439,2.517]],["body/injectables/FavoritesService.html",[3,0.139,4,0.125,5,0.125,7,0.38,8,1.627,11,0.014,12,0.877,14,2.275,15,1.205,16,0.343,17,0.787,20,0.139,21,0.21,24,2.139,26,0.009,27,0.009,67,1.362,68,1.646,85,2.186,86,1.103,87,0.798,88,2.033,173,1.798,198,1.884,237,3.338,326,4.298,415,4.691,420,1.886,421,2.758,422,2.208,423,2.208,424,2.208,425,4.534,428,2.208,431,2.775,432,2.208,435,2.208,436,4.881,439,3.27,441,1.719,442,4.088,443,1.579,458,3.241,459,3.724,460,3.724,461,3.724,462,3.724,463,3.724,464,4.937,465,3.241,466,2.685,467,2.685]],["title/classes/GetGroupFilterDto.html",[21,0.226,468,2.892]],["body/classes/GetGroupFilterDto.html",[3,0.193,4,0.174,5,0.174,7,0.531,11,0.013,12,0.908,15,1.307,20,0.193,21,0.293,26,0.011,27,0.011,74,1.021,87,0.869,88,2.435,192,1.759,237,2.871,334,3.745,468,4.683,469,6.461,470,6.167,471,6.167,472,6.167,473,5.194,474,5.194,475,5.194]],["title/classes/GetRecipiesFilterDto.html",[21,0.226,476,2.892]],["body/classes/GetRecipiesFilterDto.html",[3,0.142,4,0.127,5,0.127,7,0.389,11,0.013,12,0.994,15,1.398,20,0.142,21,0.215,26,0.009,27,0.009,74,0.749,86,1.031,87,0.952,88,2.558,192,1.433,216,2.391,217,2.936,237,3.159,262,3.596,266,3.596,270,3.231,272,3.596,274,3.596,276,3.596,278,3.596,280,3.596,282,3.596,476,3.815,477,6.816,478,3.809,479,3.809,480,3.809,481,3.809,482,3.315,483,3.809,484,3.809,485,3.809,486,3.809,487,3.809,488,3.809]],["title/classes/Group.html",[21,0.226,489,2.687]],["body/classes/Group.html",[3,0.166,4,0.149,5,0.149,7,0.455,10,1.59,11,0.014,12,0.897,15,1.317,16,0.376,20,0.245,21,0.251,26,0.01,27,0.01,52,1.164,74,0.875,86,1.117,87,0.894,128,2.213,153,1.124,161,1.391,192,1.593,193,3.785,195,2.15,196,2.976,470,5.733,471,5.733,472,5.733,489,4.414,490,3.211,491,6.588,492,4.453,493,4.453,494,4.453,495,4.453,496,4.453,497,3.495,498,3.495,499,3.876]],["title/controllers/GroupController.html",[0,1.399,500,2.892]],["body/controllers/GroupController.html",[0,1.224,2,1.224,3,0.131,4,0.117,5,0.117,7,0.358,8,1.561,10,1.52,11,0.014,12,0.858,14,2.092,15,1.311,16,0.362,17,0.742,20,0.131,21,0.198,22,1.776,23,1.429,24,2.092,26,0.008,27,0.008,78,1.964,85,2.13,86,1.074,87,0.777,88,1.98,95,3.255,96,2.654,97,1.964,98,1.964,99,1.964,332,4.369,420,1.809,421,2.687,422,2.118,423,2.118,424,2.118,428,1.488,429,2.954,431,2.723,432,1.488,433,3.136,435,1.488,437,3.136,441,1.62,443,1.488,445,2.352,448,2.075,450,2.075,452,2.075,489,2.352,500,3.602,501,3.055,502,3.055,503,3.51,504,3.51,505,3.51,506,3.51,507,4.905,508,3.51,509,3.651,510,3.055,511,3.921,512,3.51,513,3.51,514,3.51,515,3.51,516,3.51,517,3.51]],["title/modules/GroupModule.html",[28,1.452,37,2.687]],["body/modules/GroupModule.html",[2,2.238,3,0.19,4,0.17,5,0.17,11,0.014,16,0.421,17,1.077,20,0.19,21,0.287,26,0.011,27,0.011,28,2.324,30,2.352,31,2.962,37,5.199,43,3.247,44,2.578,45,2.578,47,3.41,51,2.851,52,1.332,500,5.065,509,4.87,510,4.435,518,4.435,519,4.435,520,5.096,521,5.096]],["title/injectables/GroupService.html",[67,1.049,509,2.517]],["body/injectables/GroupService.html",[3,0.128,4,0.115,5,0.115,7,0.351,8,1.538,11,0.014,12,0.851,14,2.224,15,1.169,16,0.416,17,0.726,20,0.128,21,0.194,24,2.076,26,0.008,27,0.008,52,0.899,67,1.287,68,1.52,85,2.11,86,1.064,87,0.77,88,1.961,141,2.033,152,2.033,153,1.242,161,1.074,173,1.66,237,3.277,332,4.17,420,1.782,421,2.662,422,2.087,423,2.087,424,2.087,428,2.087,431,2.704,432,2.087,435,2.087,441,1.587,443,1.457,464,4.791,465,2.992,466,2.479,467,2.479,468,2.479,489,4.632,497,2.698,502,4.284,507,4.77,509,3.09,511,4.513,522,2.698,523,3.438,524,3.438,525,3.438,526,3.438,527,3.438,528,2.698,529,2.992,530,3.438,531,2.992]],["title/classes/Groups.html",[21,0.226,201,2.244]],["body/classes/Groups.html",[3,0.145,4,0.131,5,0.131,7,0.399,10,0.887,11,0.014,12,0.501,15,1.373,16,0.352,20,0.275,21,0.393,26,0.009,27,0.009,52,1.022,74,0.768,86,1.181,87,0.661,116,1.951,117,2.077,128,2.71,153,0.986,154,2.187,161,1.221,162,2.187,169,2.187,184,2.976,190,3.014,191,2.187,192,1.459,193,3.825,195,1.887,196,2.725,197,2.453,198,2.725,199,1.657,200,2.187,201,3.449,202,4.67,203,3.217,204,2.453,205,2.453,206,2.187,207,2.311,208,2.619,209,4.452,210,4.17,211,2.619,212,2.453,213,2.453,532,3.908]],["title/classes/Ingredient.html",[21,0.226,533,2.131]],["body/classes/Ingredient.html",[3,0.183,4,0.165,5,0.165,7,0.503,10,1.426,11,0.014,12,0.805,15,1.282,16,0.359,20,0.257,21,0.278,26,0.01,27,0.01,52,1.288,74,0.969,86,1.172,87,0.848,128,2.363,153,1.243,161,1.539,192,1.701,193,3.632,195,2.379,196,3.178,338,6.019,533,3.675,534,3.553,535,4.927,536,4.927,537,4.288,538,3.553,539,4.288]],["title/controllers/IngredientController.html",[0,1.399,540,2.892]],["body/controllers/IngredientController.html",[0,1.224,2,1.224,3,0.131,4,0.117,5,0.117,7,0.358,8,1.561,10,1.52,11,0.014,12,0.858,14,2.092,15,1.311,16,0.362,17,0.742,20,0.131,21,0.198,22,1.776,23,1.429,24,2.092,26,0.008,27,0.008,78,1.964,85,2.13,86,1.074,87,0.777,88,1.98,95,3.255,96,2.654,97,1.964,98,1.964,99,1.964,335,4.369,420,1.809,421,2.687,422,2.118,423,2.118,424,2.118,428,1.488,429,2.954,431,2.723,432,1.488,433,3.136,435,1.488,437,3.136,441,1.62,443,1.488,445,2.352,448,2.075,450,2.075,452,2.075,533,1.865,540,3.602,541,3.055,542,3.055,543,3.51,544,3.51,545,3.51,546,3.51,547,4.905,548,3.51,549,3.651,550,3.055,551,3.921,552,3.51,553,3.51,554,3.51,555,3.51,556,3.51,557,3.51]],["title/modules/IngredientModule.html",[28,1.452,38,2.687]],["body/modules/IngredientModule.html",[2,2.16,3,0.179,4,0.161,5,0.161,11,0.014,16,0.426,17,1.019,20,0.179,21,0.272,26,0.01,27,0.01,28,2.243,30,2.226,31,2.86,38,5.125,43,3.134,44,2.439,45,2.439,47,3.292,48,2.851,51,2.698,52,1.26,86,0.817,126,3.026,128,1.814,533,2.562,538,4.467,540,4.936,549,4.801,550,4.196,558,4.196,559,4.196,560,4.821,561,4.821,562,4.196,563,4.821]],["title/classes/IngredientNested.html",[21,0.226,234,2.687]],["body/classes/IngredientNested.html",[3,0.116,4,0.104,5,0.104,7,0.317,10,1.037,11,0.013,12,0.585,15,1.293,16,0.342,20,0.116,21,0.36,26,0.008,27,0.008,74,0.61,86,0.526,87,0.868,153,1.153,192,1.238,199,2.537,203,1.433,214,3.635,215,3.912,216,1.948,217,2.207,218,1.737,219,1.737,220,2.436,221,4.258,223,5.848,226,4.112,227,1.082,228,3.587,229,5.007,230,4.258,231,5.415,232,1.948,233,2.238,234,4.01,235,2.703,236,4.315,237,2.82,238,1.737,239,4.298,240,4.258,241,3.587,242,2.436,243,2.436,244,2.436,245,2.436,246,2.436,247,2.436,248,2.436,249,2.436,250,2.436,251,2.436,252,2.436,253,2.436,254,2.436,255,2.436,256,2.436,257,2.436,258,2.436,259,1.948,260,2.238,261,2.436,262,1.835,263,2.436,264,2.436,265,2.238,266,1.835,267,1.737,268,3.296,269,2.436,270,1.649,271,2.436,272,1.835,273,2.436,274,1.835,275,2.436,276,1.835,277,2.436,278,1.835,279,2.436,280,1.835,281,2.436,282,1.835,283,2.436,284,1.499,285,2.436,286,2.436,287,2.436,288,2.238,289,2.238,290,2.238,291,2.436,292,2.238,482,2.701,564,3.104,565,3.104,566,3.104]],["title/injectables/IngredientService.html",[67,1.049,549,2.517]],["body/injectables/IngredientService.html",[3,0.125,4,0.113,5,0.113,7,0.344,8,1.516,11,0.014,12,0.879,14,2.145,15,1.001,16,0.392,17,0.712,20,0.125,21,0.19,23,1.371,24,2.059,26,0.008,27,0.008,52,0.881,67,1.268,68,1.489,85,2.215,86,1.117,87,0.809,88,2.059,136,2.876,139,2.715,141,3.678,148,1.704,152,1.992,153,0.85,159,2.115,161,1.052,164,1.992,173,1.626,237,3.261,335,4.138,420,1.757,421,2.637,422,2.057,423,2.057,424,2.057,428,2.057,431,2.685,432,2.057,435,2.057,441,1.555,443,1.428,464,4.099,466,2.429,467,2.429,533,3.305,542,4.222,547,4.741,549,3.045,551,3.808,562,2.932,567,2.932,568,3.369,569,3.369,570,4.851,571,3.369,572,3.369,573,3.369,574,3.369,575,3.369,576,3.369,577,3.369,578,3.369,579,3.369,580,3.369]],["title/injectables/JwtAuthGuard.html",[67,1.049,581,2.517]],["body/injectables/JwtAuthGuard.html",[3,0.215,4,0.193,5,0.193,11,0.013,16,0.396,17,1.221,20,0.215,21,0.326,26,0.011,27,0.011,67,1.812,68,2.553,581,4.35,582,3.87,583,5.027,584,5.776,585,4.533,586,2.922,587,5.776]],["title/injectables/JwtStrategy.html",[67,1.049,113,2.687]],["body/injectables/JwtStrategy.html",[3,0.164,4,0.147,5,0.147,7,0.449,8,1.822,11,0.014,12,0.747,14,1.373,16,0.398,17,0.929,20,0.164,21,0.248,24,1.822,26,0.01,27,0.01,67,1.525,68,1.943,85,1.477,86,0.745,87,0.539,88,1.373,113,3.908,121,2.945,122,3.825,131,3.449,136,3.527,139,3.662,151,3.825,172,3.449,173,2.122,181,5.696,186,3.825,206,2.459,310,3.825,585,3.449,586,2.223,588,3.825,589,5.832,590,4.395,591,6.545,592,4.395,593,3.66,594,3.825,595,4.395,596,4.395,597,3.825,598,3.825,599,4.395,600,4.395,601,4.395,602,4.395,603,4.395,604,4.395,605,4.395,606,4.395,607,4.395,608,4.395,609,4.395,610,4.395]],["title/classes/LoginAuthDto.html",[21,0.226,82,2.517]],["body/classes/LoginAuthDto.html",[3,0.193,4,0.173,5,0.173,7,0.528,10,1.47,11,0.013,12,0.83,15,1.305,16,0.295,20,0.193,21,0.366,26,0.011,27,0.011,74,1.017,82,4.067,87,0.795,162,3.958,169,3.958,192,1.755,232,3.248,611,6.156,612,4.061,613,7.074,614,5.174,615,5.174,616,5.174,617,5.174,618,5.174,619,5.174,620,5.174]],["title/classes/Notification.html",[21,0.226,621,2.517]],["body/classes/Notification.html",[3,0.155,4,0.14,5,0.14,7,0.426,10,1.618,11,0.014,12,0.913,15,1.293,16,0.364,20,0.237,21,0.236,26,0.009,27,0.009,52,1.092,74,0.821,87,0.949,128,2.12,153,1.422,161,1.305,192,1.526,193,3.626,195,2.016,196,2.851,219,3.569,329,3.772,346,6.647,347,5.552,348,5.552,621,4.004,622,3.011,623,4.924,624,4.176,625,3.537,626,4.176,627,4.176,628,4.176,629,4.176,630,3.634,631,3.011,632,3.634]],["title/controllers/NotificationController.html",[0,1.399,633,2.892]],["body/controllers/NotificationController.html",[0,1.211,2,1.211,3,0.129,4,0.116,5,0.116,7,0.355,8,1.549,10,1.514,11,0.014,12,0.854,14,2.084,15,1.308,16,0.36,17,0.734,20,0.129,21,0.196,22,1.757,23,1.414,24,2.084,26,0.008,27,0.008,78,1.944,85,2.12,86,1.069,87,0.774,88,1.97,95,1.944,96,2.635,97,1.944,98,1.944,99,1.944,136,2.926,148,1.757,343,4.354,420,1.796,421,2.674,422,2.102,423,2.102,424,2.102,428,1.473,429,2.932,431,2.713,432,1.473,433,3.113,435,1.473,437,3.113,441,1.603,443,1.473,445,2.328,448,2.054,450,2.054,452,2.054,621,2.18,633,3.576,634,3.023,635,3.023,636,4.316,637,3.473,638,3.473,639,3.473,640,3.473,641,4.892,642,3.473,643,3.63,644,3.023,645,3.892,646,3.473,647,3.473,648,3.473,649,3.473,650,3.473,651,3.473]],["title/injectables/NotificationService.html",[67,1.049,643,2.517]],["body/injectables/NotificationService.html",[3,0.114,4,0.103,5,0.103,7,0.314,8,1.418,11,0.014,12,0.852,14,1.985,15,1.269,16,0.38,17,0.65,20,0.114,21,0.173,23,1.252,24,1.985,26,0.008,27,0.008,52,0.804,67,1.187,68,1.36,85,2.135,86,1.077,87,0.779,88,1.985,136,3.91,139,2.54,141,3.523,148,3.014,152,1.819,153,1.146,159,1.93,161,1.985,164,3.758,173,1.485,188,2.061,343,3.989,420,1.644,421,2.526,422,1.925,423,1.925,424,1.925,428,1.925,431,2.111,432,1.925,435,1.925,441,1.42,443,1.304,593,2.849,621,1.93,635,3.951,641,4.609,643,2.849,645,3.563,652,2.677,653,3.075,654,3.075,655,4.54,656,3.075,657,3.075,658,3.075,659,3.075,660,3.075,661,2.677,662,3.075,663,3.075,664,3.075,665,3.075,666,5.396,667,3.075,668,3.075,669,2.061,670,2.218,671,2.218,672,4.54,673,3.075,674,4.54,675,3.075,676,4.54,677,3.075]],["title/classes/Notification_list.html",[21,0.226,200,2.244]],["body/classes/Notification_list.html",[3,0.145,4,0.131,5,0.131,7,0.399,10,0.887,11,0.014,12,0.501,15,1.373,16,0.352,20,0.275,21,0.393,26,0.009,27,0.009,52,1.022,74,0.768,86,1.181,87,0.661,116,1.951,117,2.077,128,2.71,153,0.986,154,2.187,161,1.221,162,2.187,169,2.187,184,2.976,190,3.014,191,2.187,192,1.459,193,3.825,195,1.887,196,2.725,197,2.453,198,2.725,199,1.657,200,3.014,201,3.014,202,4.67,203,3.217,204,2.453,205,2.453,206,2.187,207,2.311,208,2.619,209,4.452,210,4.17,211,2.619,212,2.453,213,2.453,678,3.908]],["title/modules/NotificationsModule.html",[28,1.452,39,2.687]],["body/modules/NotificationsModule.html",[2,2.16,3,0.179,4,0.161,5,0.161,11,0.014,16,0.426,17,1.019,20,0.179,21,0.272,26,0.01,27,0.01,28,2.243,30,2.226,31,2.86,39,5.125,43,3.134,44,2.439,45,2.439,47,3.292,48,2.851,51,2.698,52,1.26,86,0.817,126,3.026,128,1.814,621,3.026,631,4.467,633,4.936,643,4.801,644,4.196,661,4.196,679,4.196,680,4.196,681,4.821,682,4.821,683,4.821]],["title/injectables/ParseObjectIdPipe.html",[67,1.049,684,2.687]],["body/injectables/ParseObjectIdPipe.html",[3,0.183,4,0.165,5,0.165,7,0.503,8,1.962,11,0.014,12,0.631,14,1.539,16,0.359,17,1.041,20,0.183,21,0.278,24,1.539,26,0.01,27,0.01,67,1.642,68,2.178,85,1.656,86,0.835,87,0.604,88,1.539,153,1.585,161,1.539,172,3.867,173,2.379,235,3.715,267,2.757,303,3.867,329,2.914,431,2.457,625,3.943,684,4.21,685,4.53,686,4.288,687,6.282,688,6.282,689,4.927,690,4.931,691,6.282,692,4.927,693,6.282,694,4.927,695,4.927]],["title/classes/Recipe.html",[21,0.226,284,1.936]],["body/classes/Recipe.html",[3,0.098,4,0.088,5,0.088,7,0.27,10,1.691,11,0.014,12,0.954,15,1.354,16,0.281,20,0.222,21,0.278,26,0.007,27,0.007,52,0.692,74,0.52,86,0.835,87,0.937,116,1.467,128,2.078,148,2.05,153,1.023,161,0.826,192,1.098,193,3.756,195,1.277,196,2.05,199,1.121,203,3.314,207,3.266,217,2.379,218,1.48,219,1.48,235,2.397,236,1.907,237,2.891,259,3.093,262,2.914,265,3.553,266,2.914,267,2.268,270,2.618,272,2.914,274,2.914,276,2.914,278,2.914,280,2.914,282,2.914,284,2.379,292,3.553,533,1.405,623,3.553,696,1.907,697,6.019,698,2.645,699,2.645,700,3.553,701,2.645,702,2.645,703,2.645,704,2.645,705,2.645,706,2.645,707,2.645,708,2.645,709,1.66,710,3.181,711,2.645,712,2.645,713,2.645,714,2.645,715,2.645,716,2.645,717,2.076,718,2.645,719,2.645,720,2.645,721,2.302,722,2.645,723,2.076,724,2.645,725,1.907,726,2.302]],["title/classes/RecipeComment.html",[21,0.226,700,2.892]],["body/classes/RecipeComment.html",[3,0.169,4,0.152,5,0.152,7,0.464,10,1.51,11,0.014,12,0.852,15,1.243,16,0.38,20,0.248,21,0.256,26,0.01,27,0.01,52,1.188,74,0.893,87,0.866,116,2.409,118,3.276,128,2.243,153,1.504,161,1.419,192,1.615,193,3.541,195,2.194,196,3.016,217,3.212,218,3.952,219,3.723,623,4.298,700,4.298,709,2.852,710,4.679,721,3.954,727,3.276,728,4.544,729,4.544,730,4.544,731,3.954,732,3.566,733,3.954]],["title/controllers/RecipeController.html",[0,1.399,734,2.892]],["body/controllers/RecipeController.html",[0,0.447,2,0.447,3,0.048,4,0.043,5,0.043,7,0.131,8,0.697,10,1.49,11,0.014,12,0.841,14,2.05,15,1.397,16,0.334,17,0.271,20,0.048,21,0.072,22,0.648,23,0.522,24,2.05,26,0.004,27,0.004,61,1.32,78,0.717,85,2.141,86,1.127,87,0.781,88,1.99,95,0.717,96,1.886,97,0.717,98,0.717,99,0.717,136,3.961,148,3.32,161,0.927,164,3.827,184,0.619,197,0.804,217,1.714,218,1.987,227,0.447,237,2.335,238,2.659,262,1.754,266,2.099,267,1.66,270,1.886,272,2.099,274,2.099,276,1.754,278,2.099,280,1.754,282,2.099,284,2.134,311,2.56,420,0.808,421,1.505,422,0.946,423,0.946,424,0.946,428,0.543,429,1.32,431,2.066,432,0.543,435,0.543,441,0.591,443,0.543,448,0.758,450,0.758,452,0.758,581,0.804,582,0.859,594,1.115,625,0.804,636,1.115,684,2.697,685,0.924,709,1.862,734,1.61,735,1.115,736,2.582,737,2.582,738,2.582,739,2.582,740,2.582,741,2.582,742,2.582,743,2.582,744,2.582,745,2.582,746,2.582,747,2.582,748,3.09,749,1.115,750,2.232,751,1.281,752,1.281,753,5.497,754,1.281,755,1.281,756,5.686,757,2.232,758,1.281,759,1.115,760,2.232,761,1.281,762,5.854,763,1.115,764,2.232,765,1.281,766,1.115,767,2.232,768,1.281,769,1.115,770,2.232,771,1.281,772,1.115,773,2.232,774,1.281,775,1.281,776,3.55,777,3.55,778,3.55,779,2.232,780,1.281,781,1.115,782,2.232,783,1.281,784,1.115,785,2.232,786,1.281,787,1.115,788,2.232,789,1.281,790,1.115,791,2.232,792,1.281,793,1.115,794,2.232,795,1.281,796,1.281,797,1.281,798,1.281,799,1.281,800,1.281,801,1.281,802,3.375,803,1.281,804,1.281,805,1.281,806,1.006,807,1.862,808,1.115,809,1.752,810,1.115,811,3.503,812,1.006,813,1.115,814,1.281,815,1.281,816,1.006,817,1.281,818,1.115,819,1.281,820,2.786,821,1.281,822,1.281,823,2.967,824,2.967,825,2.967,826,1.281,827,1.281,828,1.281,829,1.281,830,1.943,831,1.281,832,1.281,833,1.281,834,2.232,835,1.281,836,1.281,837,1.281,838,1.281,839,1.281,840,1.281,841,1.281,842,1.281,843,1.281,844,1.281,845,1.281,846,1.281,847,1.281,848,1.281,849,1.281,850,1.281,851,1.115,852,1.281,853,5.497,854,1.281,855,1.281,856,1.281,857,1.281,858,1.281,859,1.281,860,1.281,861,1.281,862,1.281,863,1.281,864,1.281,865,1.281,866,1.281,867,1.281,868,1.281]],["title/modules/RecipeModule.html",[28,1.452,40,2.687]],["body/modules/RecipeModule.html",[2,2.112,3,0.173,4,0.156,5,0.156,11,0.014,16,0.44,17,0.983,20,0.173,21,0.263,26,0.01,27,0.01,28,2.193,30,2.148,31,2.795,40,5.077,43,3.063,44,2.354,45,2.354,47,3.217,48,2.752,51,2.604,52,1.217,59,4.05,60,3.356,61,2.752,86,0.789,126,2.921,128,1.751,284,2.247,725,4.366,734,4.853,807,4.755,808,4.05,818,4.05,869,4.05,870,4.05,871,4.654,872,4.654,873,4.05,874,4.05]],["title/injectables/RecipeService.html",[67,1.049,807,2.517]],["body/injectables/RecipeService.html",[3,0.045,4,0.04,5,0.04,7,0.122,8,0.658,11,0.014,12,0.836,14,2.011,15,1.328,16,0.278,17,0.253,20,0.045,21,0.068,23,0.488,24,2.011,26,0.003,27,0.003,52,0.313,67,0.551,68,0.53,85,2.131,86,1.12,87,0.778,88,1.981,136,3.93,139,1.179,141,2.004,148,1.952,152,0.709,153,0.711,159,0.753,161,1.948,164,3.807,173,0.579,188,3.926,199,0.508,203,0.972,217,1.36,218,1.576,238,2.159,262,1.666,266,1.246,270,1.497,272,1.666,274,1.666,276,1.666,278,1.666,280,1.666,282,1.666,284,2.828,288,4.224,420,0.763,421,1.437,422,0.893,423,0.893,424,0.893,428,0.893,431,1.509,432,0.893,435,0.893,441,0.553,443,0.508,476,2.443,529,1.043,593,4.388,669,3.822,670,4.324,671,0.864,709,0.753,717,1.653,736,1.833,737,1.833,738,1.833,739,1.833,740,1.833,741,1.833,742,1.833,743,1.833,744,1.833,745,1.833,746,1.833,747,1.833,748,2.949,749,1.833,759,1.833,762,5.75,763,1.833,766,1.833,769,1.833,772,1.833,781,1.833,784,1.833,787,1.833,790,1.833,793,1.833,802,3.073,807,1.322,809,2.211,830,1.833,851,1.833,873,1.043,874,1.043,875,1.043,876,1.199,877,1.199,878,2.106,879,1.199,880,2.106,881,1.199,882,1.199,883,1.199,884,1.199,885,1.199,886,1.199,887,1.199,888,2.106,889,1.199,890,1.199,891,1.199,892,1.199,893,1.199,894,1.199,895,1.199,896,1.199,897,1.199,898,1.199,899,1.199,900,1.199,901,1.199,902,1.199,903,7.387,904,1.199,905,1.833,906,1.833,907,2.106,908,1.199,909,1.199,910,1.833,911,5.704,912,2.817,913,2.106,914,0.941,915,0.941,916,1.199,917,2.106,918,1.199,919,1.199,920,5.532,921,1.199,922,1.199,923,2.106,924,1.199,925,1.199,926,1.199,927,1.199,928,1.199,929,1.199,930,1.199,931,1.199,932,1.199,933,1.199,934,1.199,935,1.199,936,1.199,937,1.199,938,1.199,939,1.199,940,1.199,941,1.199,942,1.199,943,1.199,944,1.199,945,1.199,946,1.199,947,1.199,948,1.199,949,1.199]],["title/classes/RegisterAuthDto.html",[21,0.226,91,2.687]],["body/classes/RegisterAuthDto.html",[3,0.196,4,0.176,5,0.176,7,0.537,10,1.193,11,0.014,12,0.673,15,1.151,16,0.407,20,0.196,21,0.369,26,0.011,27,0.011,74,1.033,82,3.299,87,0.645,91,4.384,103,4.125,137,4.574,192,1.772,206,3.986,227,1.833,232,3.299,586,2.659,612,4.125,950,5.694,951,7.124,952,5.255,953,2.941,954,5.255]],["title/guards/RolesGuard.html",[61,2.372,293,3.148]],["body/guards/RolesGuard.html",[3,0.152,4,0.136,5,0.136,7,0.416,8,1.731,11,0.014,12,0.71,14,1.273,16,0.416,17,0.861,20,0.152,21,0.23,22,2.061,24,1.731,26,0.009,27,0.009,60,2.938,61,3.278,67,1.449,85,1.862,86,0.939,87,0.68,88,1.731,116,2.281,118,2.938,139,2.28,161,1.968,184,1.967,203,1.881,267,3.101,295,3.198,298,6.154,299,3.546,300,5.884,302,4.824,303,3.198,305,3.546,528,3.198,593,3.479,955,3.546,956,4.075,957,7.295,958,4.075,959,4.075,960,6.299,961,3.198,962,4.075,963,4.075,964,5.543,965,4.075,966,4.075,967,4.075,968,4.075,969,4.075,970,4.075,971,4.075]],["title/classes/ShoppingList.html",[21,0.226,972,2.687]],["body/classes/ShoppingList.html",[3,0.181,4,0.162,5,0.162,7,0.496,10,1.413,11,0.014,12,0.797,16,0.355,20,0.232,21,0.274,26,0.01,27,0.01,52,1.27,74,0.955,87,0.763,116,2.254,128,2.341,153,1.571,161,1.517,192,1.686,193,2.345,195,2.345,199,2.912,235,3.68,237,2.147,270,3.307,329,4.062,533,2.58,623,4.488,709,3.907,710,4.885,723,3.811,972,4.171,973,3.811,974,4.856,975,4.856,976,4.856,977,4.856,978,4.226,979,3.501,980,4.226]],["title/controllers/ShoppingListController.html",[0,1.399,981,2.892]],["body/controllers/ShoppingListController.html",[0,1.085,2,1.085,3,0.116,4,0.104,5,0.104,7,0.318,8,1.43,10,1.449,11,0.014,12,0.818,14,1.995,15,1.273,16,0.394,17,0.657,20,0.116,21,0.176,22,1.574,23,1.266,24,1.995,26,0.008,27,0.008,78,1.741,85,2.013,86,1.015,87,0.735,88,1.871,95,2.562,96,2.433,97,1.741,98,1.741,99,1.741,136,3.917,148,3.23,294,3.301,296,2.442,304,2.708,421,2.54,422,1.941,423,1.941,424,1.941,428,1.319,429,2.707,431,2.7,432,1.319,433,2.874,435,1.319,437,2.874,443,1.319,448,1.84,450,1.84,452,1.84,581,1.953,582,2.085,625,1.953,684,3.068,685,2.243,806,2.442,812,2.442,813,2.708,820,3.593,981,3.301,982,2.708,983,3.111,984,4.578,985,3.984,986,3.111,987,3.111,988,3.111,989,4.747,990,3.111,991,2.708,992,4.191,993,3.111,994,3.111,995,3.111,996,3.41,997,2.708,998,2.708,999,3.593,1000,3.111,1001,3.111,1002,3.111,1003,3.111,1004,3.111,1005,3.111,1006,3.111,1007,3.111]],["title/modules/ShoppingListModule.html",[28,1.452,41,2.687]],["body/modules/ShoppingListModule.html",[2,2.07,3,0.168,4,0.151,5,0.151,11,0.014,16,0.437,17,0.954,20,0.168,21,0.255,26,0.01,27,0.01,28,2.149,30,2.083,31,2.74,41,5.034,43,3.002,44,2.283,45,2.283,47,3.153,48,2.669,51,2.525,52,1.18,86,0.765,119,3.928,120,3.024,121,3.024,126,2.833,128,1.698,129,3.928,130,3.542,131,3.542,132,3.928,133,3.928,134,3.928,972,3.024,979,4.279,981,4.781,996,4.716,997,3.928,1008,3.928,1009,3.928,1010,4.513,1011,4.513,1012,3.928,1013,4.513,1014,4.513]],["title/injectables/ShoppingListService.html",[67,1.049,996,2.517]],["body/injectables/ShoppingListService.html",[3,0.109,4,0.098,5,0.098,7,0.3,8,1.369,11,0.014,12,0.837,14,1.946,15,1.097,16,0.387,17,0.62,20,0.109,21,0.166,23,1.194,24,1.946,26,0.007,27,0.007,52,0.767,67,1.146,68,1.297,85,2.094,86,1.056,87,0.764,88,1.946,120,1.966,136,3.602,139,2.453,141,3.443,142,3.815,143,4.567,148,2.218,152,1.735,153,1.106,159,2.752,160,2.554,161,1.819,164,3.443,188,2.938,237,2.89,421,2.468,422,1.859,423,1.859,424,1.859,428,1.859,431,2.557,432,1.859,435,1.859,443,1.244,464,3.161,466,2.116,467,2.116,593,2.752,669,1.966,670,3.784,671,2.116,905,2.554,906,2.554,910,2.554,914,2.303,915,2.303,972,3.517,985,3.815,989,4.539,991,3.815,992,3.911,996,2.752,998,2.554,999,3.441,1012,2.554,1015,2.554,1016,2.934,1017,2.934,1018,4.384,1019,2.934,1020,2.934,1021,2.934,1022,2.934,1023,2.934,1024,2.934,1025,4.384,1026,2.934,1027,2.934,1028,2.934,1029,6.537,1030,2.934,1031,2.934,1032,2.934,1033,2.934]],["title/classes/UpdateFavoriteDto.html",[21,0.226,436,2.687]],["body/classes/UpdateFavoriteDto.html",[3,0.216,4,0.194,5,0.194,11,0.013,16,0.397,20,0.216,21,0.327,26,0.011,27,0.011,74,1.14,227,2.023,326,3.641,328,4.553,420,2.1,436,4.656,442,4.553,586,2.935,953,3.246,1034,5.048,1035,5.801]],["title/classes/UpdateGroupDto.html",[21,0.226,507,2.687]],["body/classes/UpdateGroupDto.html",[3,0.216,4,0.194,5,0.194,11,0.013,16,0.397,20,0.216,21,0.327,26,0.011,27,0.011,74,1.14,227,2.023,332,3.641,334,4.183,420,2.1,507,4.656,511,4.553,586,2.935,953,3.246,1036,5.048,1037,5.801]],["title/classes/UpdateIngredientDto.html",[21,0.226,547,2.687]],["body/classes/UpdateIngredientDto.html",[3,0.216,4,0.194,5,0.194,11,0.013,16,0.397,20,0.216,21,0.327,26,0.011,27,0.011,74,1.14,227,2.023,335,3.641,337,4.553,420,2.1,547,4.656,551,4.553,586,2.935,953,3.246,1038,5.048,1039,5.801]],["title/classes/UpdateNotificationDto.html",[21,0.226,641,2.687]],["body/classes/UpdateNotificationDto.html",[3,0.216,4,0.194,5,0.194,11,0.013,16,0.397,20,0.216,21,0.327,26,0.011,27,0.011,74,1.14,227,2.023,343,3.641,345,4.553,420,2.1,586,2.935,641,4.656,645,4.553,953,3.246,1040,5.048,1041,5.801]],["title/classes/UpdateRecipeDto.html",[21,0.226,802,2.687]],["body/classes/UpdateRecipeDto.html",[3,0.216,4,0.194,5,0.194,11,0.013,16,0.397,20,0.216,21,0.327,26,0.011,27,0.011,74,1.14,216,3.641,227,2.023,238,3.246,420,2.1,586,2.935,802,4.656,809,4.553,953,3.246,1042,5.048,1043,5.801]],["title/classes/UpdateShoppingListDto.html",[21,0.226,989,2.687]],["body/classes/UpdateShoppingListDto.html",[3,0.216,4,0.194,5,0.194,11,0.013,16,0.397,20,0.216,21,0.327,26,0.011,27,0.011,74,1.14,227,2.023,586,2.935,953,3.246,989,4.656,992,3.641,999,4.553,1044,5.048,1045,4.553,1046,5.801,1047,5.801]],["title/classes/UpdateUserDto.html",[21,0.226,1048,2.687]],["body/classes/UpdateUserDto.html",[3,0.216,4,0.194,5,0.194,11,0.013,16,0.397,20,0.216,21,0.327,26,0.011,27,0.011,74,1.14,227,2.023,390,3.641,392,4.553,420,2.1,586,2.935,953,3.246,1048,4.656,1049,5.048,1050,4.553,1051,5.801]],["title/classes/UpsertShoppingListDto.html",[21,0.226,992,2.517]],["body/classes/UpsertShoppingListDto.html",[3,0.182,4,0.164,5,0.164,7,0.5,10,1.419,11,0.014,12,0.801,16,0.357,20,0.182,21,0.276,26,0.01,27,0.01,74,0.962,87,0.891,153,1.578,192,1.694,199,2.922,220,3.839,226,3.662,227,1.706,235,2.893,237,2.162,239,3.499,270,3.662,314,3.698,329,4.076,353,5.442,533,2.599,723,3.839,978,4.257,992,3.925,1045,3.839,1052,5.998,1053,4.891,1054,4.891]],["title/classes/User.html",[21,0.226,116,1.452]],["body/classes/User.html",[3,0.111,4,0.1,5,0.1,7,0.304,10,1.676,11,0.014,12,0.946,15,1.362,16,0.302,20,0.253,21,0.354,26,0.007,27,0.007,52,0.779,74,0.586,86,0.898,87,0.917,116,1.918,117,1.583,128,2.473,153,0.752,154,1.667,161,0.931,162,2.964,169,2.964,184,3.174,190,3.283,191,1.667,192,1.201,193,3.682,195,1.439,196,2.243,197,1.87,198,2.968,199,1.263,200,1.667,201,3.283,202,4.203,203,3.359,204,3.324,205,3.324,206,2.964,207,2.622,208,1.997,209,3.931,210,4.391,211,3.549,212,3.324,213,1.87,697,5.458,709,1.87,1055,2.98,1056,5.867,1057,2.98,1058,2.98,1059,2.98,1060,2.98,1061,2.98,1062,2.98,1063,2.98,1064,2.98,1065,2.98,1066,2.98]],["title/controllers/UserController.html",[0,1.399,1067,2.892]],["body/controllers/UserController.html",[0,1.16,2,1.16,3,0.124,4,0.111,5,0.111,7,0.34,8,1.502,10,1.489,11,0.014,12,0.84,14,2.049,15,1.294,16,0.39,17,0.703,20,0.124,21,0.188,22,1.683,23,1.354,24,2.049,26,0.008,27,0.008,78,1.862,85,2.078,86,1.048,87,0.759,88,1.932,95,3.159,96,2.555,97,1.862,98,1.862,99,1.862,116,1.205,227,1.16,390,4.291,420,1.741,421,2.622,422,2.038,423,2.038,424,2.038,428,1.411,429,1.967,431,2.674,432,1.411,433,2.088,435,1.411,437,2.088,441,1.536,443,1.411,445,2.229,448,1.967,450,1.967,452,1.967,581,2.088,582,2.229,806,2.611,811,5.709,812,2.611,820,4.854,1048,4.836,1050,3.774,1067,3.467,1068,2.896,1069,2.896,1070,3.327,1071,3.327,1072,3.327,1073,3.327,1074,3.327,1075,3.327,1076,3.327,1077,3.327,1078,3.327,1079,3.544,1080,2.896,1081,3.327,1082,3.327,1083,3.327,1084,3.327,1085,3.327,1086,3.327]],["title/modules/UserModule.html",[28,1.452,42,2.517]],["body/modules/UserModule.html",[2,2.107,3,0.173,4,0.155,5,0.155,11,0.014,16,0.421,17,0.98,20,0.173,21,0.262,26,0.01,27,0.01,28,2.188,30,2.141,31,2.789,42,4.838,43,3.057,44,2.346,45,2.346,47,3.21,48,2.743,51,2.595,52,1.213,86,0.786,116,1.679,117,3.21,126,2.911,127,4.036,128,1.745,414,3.64,1067,4.845,1079,5.071,1080,4.036,1087,4.036,1088,4.036,1089,4.036,1090,4.638,1091,6.042,1092,4.638]],["title/injectables/UserService.html",[67,1.049,1079,2.517]],["body/injectables/UserService.html",[3,0.111,4,0.1,5,0.1,7,0.306,8,1.39,11,0.014,12,0.843,14,1.963,15,1.26,16,0.376,17,0.633,20,0.111,21,0.169,23,1.218,24,1.963,26,0.007,27,0.007,52,0.783,67,1.163,68,1.323,85,2.111,86,1.065,87,0.771,88,1.963,116,1.084,136,3.892,139,2.49,140,2.605,141,3.477,145,3.872,148,2.687,152,1.77,153,1.123,154,1.675,158,2.605,159,1.879,161,1.963,164,3.716,173,1.445,188,2.981,390,3.944,414,2.349,420,1.611,421,2.493,422,1.886,423,1.886,424,1.886,428,1.886,431,2.3,432,1.886,435,1.886,441,1.382,443,1.269,593,3.69,669,2.006,670,3.829,671,2.158,914,2.349,915,2.349,1048,4.569,1050,3.492,1069,3.872,1079,2.793,1093,2.605,1094,2.993,1095,2.993,1096,2.993,1097,2.993,1098,2.993,1099,2.993,1100,2.993,1101,2.993,1102,2.993,1103,5.31,1104,2.993,1105,2.993,1106,5.31,1107,2.993,1108,4.449,1109,2.993,1110,4.449,1111,2.993]],["title/coverage.html",[1112,4.303]],["body/coverage.html",[0,2.222,1,1.474,5,0.068,6,1.779,11,0.014,18,1.283,21,0.446,26,0.005,27,0.005,61,1.209,67,1.784,69,1.779,73,1.474,75,1.779,76,1.474,77,1.779,82,1.283,87,0.251,91,1.37,100,1.283,113,1.37,116,0.74,117,1.086,121,1.37,135,1.779,153,0.516,173,0.987,190,1.144,191,3.149,198,1.034,200,1.144,201,1.144,214,1.37,215,3.005,216,3.301,234,1.37,238,1.144,284,0.987,293,2.597,294,1.474,296,1.605,297,1.779,311,1.474,312,1.779,313,1.779,326,1.283,327,1.779,328,2.597,332,1.283,333,1.779,334,3.005,335,1.283,336,1.779,337,2.597,343,1.283,344,1.779,345,2.597,390,1.283,391,1.779,392,2.597,415,1.474,416,1.779,418,1.474,419,1.779,431,0.8,436,1.37,439,1.283,458,1.779,468,1.474,469,1.779,476,1.474,477,1.779,489,1.37,490,2.386,498,1.605,500,1.474,501,1.779,507,1.37,509,1.283,522,2.597,533,1.086,534,2.386,538,1.474,540,1.474,541,1.779,547,1.37,549,1.283,567,1.779,581,1.283,582,1.37,583,1.779,588,1.779,611,1.779,612,2.597,621,1.283,622,2.386,625,1.283,631,1.474,633,1.474,634,1.779,641,1.37,643,1.283,652,1.779,669,5.546,684,1.37,685,1.474,686,1.779,696,2.386,700,1.474,725,1.474,727,2.386,732,1.605,734,1.474,735,1.779,802,1.37,807,1.283,816,1.605,875,1.779,950,1.779,955,1.779,961,1.605,972,1.37,973,2.597,979,1.474,981,1.474,982,1.779,989,1.37,992,1.283,996,1.283,1015,1.779,1034,1.779,1036,1.779,1038,1.779,1040,1.779,1042,1.779,1044,1.779,1045,2.597,1048,1.37,1049,1.779,1052,1.779,1067,1.474,1068,1.779,1079,1.283,1093,1.779,1112,1.605,1113,2.045,1114,2.045,1115,2.045,1116,6.545,1117,6.372,1118,5.259,1119,1.779,1120,6.694,1121,7.595,1122,2.879,1123,6.545,1124,2.045,1125,4.788,1126,1.779,1127,2.045,1128,1.779,1129,3.308,1130,4.167,1131,2.045,1132,2.045,1133,2.045,1134,2.045]],["title/dependencies.html",[31,2.228,1135,2.911]],["body/dependencies.html",[11,0.014,17,1.049,21,0.356,26,0.01,27,0.01,31,2.291,50,4.32,52,1.298,60,3.579,120,3.326,153,1.253,157,4.32,227,1.731,232,3.116,233,3.579,528,3.896,585,3.896,597,6.04,598,4.32,810,5.493,1136,7.303,1137,4.964,1138,4.964,1139,4.964,1140,4.964,1141,4.964,1142,4.964,1143,4.964,1144,4.964,1145,4.964,1146,4.964,1147,4.964,1148,4.964,1149,4.964,1150,4.964,1151,4.964,1152,4.964,1153,4.964,1154,4.964,1155,4.964,1156,4.964]],["title/miscellaneous/enumerations.html",[1157,1.871,1158,4.2]],["body/miscellaneous/enumerations.html",[7,0.606,11,0.013,26,0.012,27,0.012,116,2.549,184,3.399,690,5.894,1157,3.317,1158,5.16,1159,5.929,1160,5.929,1161,7.04,1162,7.04]],["title/miscellaneous/functions.html",[1157,1.871,1163,4.2]],["body/miscellaneous/functions.html",[7,0.636,11,0.012,26,0.012,27,0.012,1126,5.423,1128,6.672,1157,3.487,1163,5.423,1164,6.232]],["title/index.html",[7,0.342,1165,3.345,1166,3.345]],["body/index.html",[4,0.15,11,0.013,26,0.01,27,0.01,217,2.164,259,2.814,289,3.232,290,3.232,1112,3.518,1167,4.483,1168,4.483,1169,5.909,1170,4.483,1171,4.483,1172,4.483,1173,4.483,1174,4.483,1175,4.483,1176,6.609,1177,4.483,1178,4.483,1179,4.483,1180,4.483,1181,7.646,1182,4.483,1183,4.483,1184,4.483,1185,7.499,1186,4.483,1187,4.483,1188,5.909,1189,4.483,1190,4.483,1191,4.483,1192,4.483,1193,5.909,1194,5.909,1195,4.483,1196,4.483,1197,4.483,1198,5.909,1199,5.909,1200,4.483,1201,4.483,1202,4.483,1203,4.483,1204,4.483,1205,3.901,1206,4.483,1207,4.483,1208,4.483,1209,4.483,1210,4.483,1211,4.483,1212,4.483,1213,4.483,1214,4.483,1215,4.483,1216,4.483,1217,4.483,1218,4.483,1219,4.483,1220,3.901]],["title/modules.html",[30,2.531]],["body/modules.html",[11,0.011,26,0.011,27,0.011,29,3.819,30,2.445,35,3.549,36,3.549,37,3.549,38,3.549,39,3.549,40,3.549,41,3.549,42,3.325,1205,7.043,1221,8.093,1222,8.093,1223,8.093]],["title/overview.html",[1224,4.772]],["body/overview.html",[2,1.284,11,0.014,18,3.749,26,0.009,27,0.009,29,5.852,30,1.7,31,2.386,32,3.205,33,3.205,34,3.205,35,5.047,36,4.57,37,4.57,38,4.57,39,4.57,40,4.57,41,4.57,42,4.558,43,2.615,44,1.863,45,1.863,68,1.628,74,0.724,100,3.749,110,3.205,112,3.205,113,4.002,295,2.891,439,3.749,454,3.205,455,3.205,509,3.749,518,3.205,519,3.205,549,3.749,558,3.205,559,3.205,643,3.749,679,3.205,680,3.205,807,3.749,869,3.205,870,3.205,996,3.749,1008,3.205,1009,3.205,1079,4.558,1087,3.205,1088,3.205,1089,3.205,1224,3.205,1225,5.169,1226,3.683,1227,3.683,1228,3.683]],["title/properties.html",[192,1.307,1135,2.911]],["body/properties.html",[11,0.013,26,0.012,27,0.012,192,1.665,217,2.967,259,3.858,1220,5.349,1229,6.146,1230,6.146,1231,6.146]],["title/miscellaneous/typealiases.html",[1157,1.871,1232,4.826]],["body/miscellaneous/typealiases.html",[7,0.582,11,0.011,26,0.011,27,0.011,87,0.699,154,3.849,191,3.191,490,4.111,497,5.398,534,4.111,537,5.986,622,4.111,630,5.986,696,4.111,717,5.398,727,4.111,731,5.986,1157,3.191,1233,5.702,1234,4.962,1235,4.962,1236,4.962,1237,4.962,1238,4.962,1239,4.962]],["title/miscellaneous/variables.html",[1157,1.871,1240,4.2]],["body/miscellaneous/variables.html",[7,0.442,11,0.014,15,0.761,26,0.01,27,0.01,87,0.708,117,3.065,121,3.866,130,3.394,153,1.456,184,2.088,191,2.42,207,4.695,213,2.714,490,3.118,498,4.528,499,3.763,522,3.394,531,3.763,534,3.118,538,4.16,539,3.763,622,3.118,625,2.714,631,4.16,632,3.763,690,6.232,696,3.118,725,4.16,726,3.763,727,3.118,732,4.528,733,3.763,816,5.663,961,4.528,973,3.394,979,4.16,980,3.763,1119,3.763,1122,3.763,1157,2.42,1234,3.763,1235,3.763,1236,3.763,1237,3.763,1238,3.763,1239,3.763,1240,3.763,1241,4.324,1242,4.324,1243,5.769,1244,4.324,1245,4.324,1246,4.324]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":669,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1230,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1152,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1143,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1142,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1146,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1121,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1130,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1129,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":1131,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1116,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":1132,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1117,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1118,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1124,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1123,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1125,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":350,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["1.0.0",{"_index":1149,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["10.0.1",{"_index":1137,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":1226,"title":{},"body":{"overview.html":{}}}],["1440h",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"modules/ShoppingListModule.html":{}}}],["16.0.3",{"_index":1144,"title":{},"body":{"dependencies.html":{}}}],["1}).limit(10",{"_index":947,"title":{},"body":{"injectables/RecipeService.html":{}}}],["2",{"_index":1228,"title":{},"body":{"overview.html":{}}}],["20",{"_index":351,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["200",{"_index":269,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["2023",{"_index":349,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["2943823572034",{"_index":268,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/IngredientNested.html":{}}}],["3",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["30",{"_index":275,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["30})@isnumber",{"_index":369,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["34",{"_index":1227,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":1147,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":1156,"title":{},"body":{"dependencies.html":{}}}],["403",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["404",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["5.1.0",{"_index":1141,"title":{},"body":{"dependencies.html":{}}}],["6.1.4",{"_index":1140,"title":{},"body":{"dependencies.html":{}}}],["6.8.4",{"_index":1145,"title":{},"body":{"dependencies.html":{}}}],["63cb0277ee58877e63e36fcc",{"_index":353,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpsertShoppingListDto.html":{}}}],["7.2.0",{"_index":1153,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":261,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["8})@isnumber",{"_index":365,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["9",{"_index":1225,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":1136,"title":{},"body":{"dependencies.html":{}}}],["9.2.1",{"_index":1138,"title":{},"body":{"dependencies.html":{}}}],["9421",{"_index":279,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["9421})@isnumber",{"_index":388,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["_avg_rating",{"_index":776,"title":{},"body":{"controllers/RecipeController.html":{}}}],["_cooking_time",{"_index":777,"title":{},"body":{"controllers/RecipeController.html":{}}}],["_id",{"_index":199,"title":{},"body":{"classes/Badges.html":{},"classes/CommentNested.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/IngredientNested.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{}}}],["_views",{"_index":778,"title":{},"body":{"controllers/RecipeController.html":{}}}],["action",{"_index":464,"title":{},"body":{"injectables/FavoritesService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/ShoppingListService.html":{}}}],["addcomment",{"_index":736,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["addcomment(id",{"_index":749,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["adding",{"_index":320,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["address",{"_index":211,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["adds",{"_index":465,"title":{},"body":{"injectables/FavoritesService.html":{},"injectables/GroupService.html":{}}}],["admin",{"_index":1161,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["admin_id",{"_index":470,"title":{},"body":{"classes/GetGroupFilterDto.html":{},"classes/Group.html":{}}}],["adress",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["aliases",{"_index":1233,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alolocosevivemejor@gmail.com",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["alsina",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["amazing",{"_index":1206,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":811,"title":{},"body":{"controllers/RecipeController.html":{},"controllers/UserController.html":{}}}],["apibearerauth()@roles(role.admin)@useguards(jwtauthguard",{"_index":796,"title":{},"body":{"controllers/RecipeController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@delete(':id",{"_index":1075,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@delete('delete/:id",{"_index":800,"title":{},"body":{"controllers/RecipeController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get",{"_index":1071,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get(':id",{"_index":1073,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@patch(':id",{"_index":1077,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@patch('modify/:id",{"_index":803,"title":{},"body":{"controllers/RecipeController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@post('/create",{"_index":754,"title":{},"body":{"controllers/RecipeController.html":{}}}],["apiproperty",{"_index":226,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/IngredientNested.html":{},"classes/UpsertShoppingListDto.html":{}}}],["apiproperty({example",{"_index":314,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/UpsertShoppingListDto.html":{}}}],["app",{"_index":1183,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/RecipeModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1175,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":210,"title":{},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["async",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":73,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["auth.controller",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.dto",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterAuthDto.html":{}}}],["auth.dto.ts",{"_index":612,"title":{},"body":{"classes/LoginAuthDto.html":{},"classes/RegisterAuthDto.html":{},"coverage.html":{}}}],["auth.dto.ts:5",{"_index":614,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["auth.dto.ts:7",{"_index":952,"title":{},"body":{"classes/RegisterAuthDto.html":{}}}],["auth.dto.ts:9",{"_index":616,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["auth.guard",{"_index":812,"title":{},"body":{"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":583,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/roles.guard",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":76,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":584,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":587,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":35,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":217,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"index.html":{},"properties.html":{}}}],["author_id",{"_index":722,"title":{},"body":{"classes/Recipe.html":{}}}],["authservice",{"_index":100,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["avg_rating",{"_index":262,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["await",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IngredientService.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":1207,"title":{},"body":{"index.html":{}}}],["badges",{"_index":190,"title":{"classes/Badges.html":{}},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{},"coverage.html":{}}}],["badrequestexception",{"_index":692,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{}}}],["badrequestexception('invalid",{"_index":695,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{}}}],["barcelona",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["bcrypt",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["body",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"guards/CompareIdGuard.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["body._id",{"_index":308,"title":{},"body":{"guards/CompareIdGuard.html":{}}}],["boolean",{"_index":267,"title":{},"body":{"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":1128,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1223,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1221,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1170,"title":{},"body":{"index.html":{}}}],["c/bla",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["canactivate",{"_index":298,"title":{},"body":{"guards/CompareIdGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":299,"title":{},"body":{"guards/CompareIdGuard.html":{},"guards/RolesGuard.html":{}}}],["checkpassword",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["chocolate",{"_index":240,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["cinamon",{"_index":321,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["class",{"_index":21,"title":{"classes/Auth.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"classes/IngredientNested.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"classes/RegisterAuthDto.html":{},"classes/ShoppingList.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":74,"title":{},"body":{"classes/Auth.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"classes/IngredientNested.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"classes/RegisterAuthDto.html":{},"classes/ShoppingList.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_favoritesmodule",{"_index":454,"title":{},"body":{"modules/FavoritesModule.html":{},"overview.html":{}}}],["cluster_favoritesmodule_providers",{"_index":455,"title":{},"body":{"modules/FavoritesModule.html":{},"overview.html":{}}}],["cluster_groupmodule",{"_index":518,"title":{},"body":{"modules/GroupModule.html":{},"overview.html":{}}}],["cluster_groupmodule_providers",{"_index":519,"title":{},"body":{"modules/GroupModule.html":{},"overview.html":{}}}],["cluster_ingredientmodule",{"_index":558,"title":{},"body":{"modules/IngredientModule.html":{},"overview.html":{}}}],["cluster_ingredientmodule_providers",{"_index":559,"title":{},"body":{"modules/IngredientModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule",{"_index":679,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule_providers",{"_index":680,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_recipemodule",{"_index":869,"title":{},"body":{"modules/RecipeModule.html":{},"overview.html":{}}}],["cluster_recipemodule_providers",{"_index":870,"title":{},"body":{"modules/RecipeModule.html":{},"overview.html":{}}}],["cluster_shoppinglistmodule",{"_index":1008,"title":{},"body":{"modules/ShoppingListModule.html":{},"overview.html":{}}}],["cluster_shoppinglistmodule_providers",{"_index":1009,"title":{},"body":{"modules/ShoppingListModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1087,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1088,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1089,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["comment",{"_index":218,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["comment.dto",{"_index":815,"title":{},"body":{"controllers/RecipeController.html":{}}}],["comment.dto.ts",{"_index":313,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:11",{"_index":316,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:5",{"_index":325,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:8",{"_index":322,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment:\"i",{"_index":285,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["commentdocument",{"_index":731,"title":{},"body":{"classes/RecipeComment.html":{},"miscellaneous/typealiases.html":{}}}],["commentnested",{"_index":214,"title":{"classes/CommentNested.html":{}},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"coverage.html":{}}}],["comments",{"_index":292,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{}}}],["commentschema",{"_index":732,"title":{},"body":{"classes/RecipeComment.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["commentscontent",{"_index":720,"title":{},"body":{"classes/Recipe.html":{}}}],["compare",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["compare(password",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["compareidguard",{"_index":294,"title":{"guards/CompareIdGuard.html":{}},"body":{"guards/CompareIdGuard.html":{},"controllers/ShoppingListController.html":{},"coverage.html":{}}}],["compareidguard)@post",{"_index":993,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["console.log(\"error",{"_index":670,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["const",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"classes/Badges.html":{},"guards/CompareIdGuard.html":{},"classes/Favorites.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"injectables/IngredientService.html":{},"classes/Notification.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"injectables/ShoppingListService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["constants/jwt.constants",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["constructor(ingredientmodel",{"_index":568,"title":{},"body":{"injectables/IngredientService.html":{}}}],["constructor(notificationmodel",{"_index":653,"title":{},"body":{"injectables/NotificationService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"guards/RolesGuard.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["constructor(recipemodel",{"_index":876,"title":{},"body":{"injectables/RecipeService.html":{}}}],["constructor(reflector",{"_index":956,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(shoppinglistmodel",{"_index":1016,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["constructor(usermodel",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["context",{"_index":302,"title":{},"body":{"guards/CompareIdGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":967,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":966,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":305,"title":{},"body":{"guards/CompareIdGuard.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('favorites",{"_index":444,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["controller('group",{"_index":512,"title":{},"body":{"controllers/GroupController.html":{}}}],["controller('ingredient",{"_index":552,"title":{},"body":{"controllers/IngredientController.html":{}}}],["controller('notification",{"_index":646,"title":{},"body":{"controllers/NotificationController.html":{}}}],["controller('recipe",{"_index":819,"title":{},"body":{"controllers/RecipeController.html":{}}}],["controller('shopping",{"_index":1001,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["controller('user",{"_index":1081,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"controllers/NotificationController.html":{},"modules/NotificationsModule.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cooking_time",{"_index":276,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["country",{"_index":274,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["coverage",{"_index":1112,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":420,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":445,"title":{},"body":{"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["create(@res",{"_index":821,"title":{},"body":{"controllers/RecipeController.html":{}}}],["create(createfavoritedto",{"_index":425,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{}}}],["create(creategroupdto",{"_index":502,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["create(createingredientdto",{"_index":542,"title":{},"body":{"controllers/IngredientController.html":{},"injectables/IngredientService.html":{}}}],["create(createnotificationdto",{"_index":635,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["create(createrecipedto",{"_index":880,"title":{},"body":{"injectables/RecipeService.html":{}}}],["create(createuserdto",{"_index":1069,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(res",{"_index":752,"title":{},"body":{"controllers/RecipeController.html":{}}}],["createcommentdto",{"_index":311,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"controllers/RecipeController.html":{},"coverage.html":{}}}],["created",{"_index":826,"title":{},"body":{"controllers/RecipeController.html":{}}}],["createfavoritedto",{"_index":326,"title":{"classes/CreateFavoriteDto.html":{}},"body":{"classes/CreateFavoriteDto.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/UpdateFavoriteDto.html":{},"coverage.html":{}}}],["creategroupdto",{"_index":332,"title":{"classes/CreateGroupDto.html":{}},"body":{"classes/CreateGroupDto.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/UpdateGroupDto.html":{},"coverage.html":{}}}],["createingredientdto",{"_index":335,"title":{"classes/CreateIngredientDto.html":{}},"body":{"classes/CreateIngredientDto.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"classes/UpdateIngredientDto.html":{},"coverage.html":{}}}],["createnotificationdto",{"_index":343,"title":{"classes/CreateNotificationDto.html":{}},"body":{"classes/CreateNotificationDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["createrecipedto",{"_index":238,"title":{"classes/CreateRecipeDto.html":{}},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/UpdateRecipeDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":390,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["cut",{"_index":247,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["data",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["date",{"_index":346,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/Notification.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"classes/IngredientNested.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"classes/RegisterAuthDto.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["decorators/roles.decorator",{"_index":962,"title":{},"body":{"guards/RolesGuard.html":{}}}],["default",{"_index":207,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":433,"title":{},"body":{"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["delete('delete/:id",{"_index":833,"title":{},"body":{"controllers/RecipeController.html":{}}}],["deleted",{"_index":836,"title":{},"body":{"controllers/RecipeController.html":{}}}],["deletededrecipe",{"_index":834,"title":{},"body":{"controllers/RecipeController.html":{}}}],["delicious",{"_index":242,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FavoritesModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":259,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":1184,"title":{},"body":{"index.html":{}}}],["difficulty",{"_index":278,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["document",{"_index":196,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Group.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"classes/Notification.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"classes/User.html":{}}}],["documentation",{"_index":1113,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":315,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["dose",{"_index":245,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["dotenv",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["dotenv.config",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["dto/add",{"_index":814,"title":{},"body":{"controllers/RecipeController.html":{}}}],["dto/create",{"_index":441,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/filter",{"_index":529,"title":{},"body":{"injectables/GroupService.html":{},"injectables/RecipeService.html":{}}}],["dto/login",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/register",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":443,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/upsert",{"_index":998,"title":{},"body":{"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{}}}],["e2e",{"_index":1195,"title":{},"body":{"index.html":{}}}],["easy",{"_index":277,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["easy'})@isstring",{"_index":375,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["efficient",{"_index":1171,"title":{},"body":{"index.html":{}}}],["email",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/LoginAuthDto.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["emitter",{"_index":347,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/Notification.html":{}}}],["enjoy",{"_index":258,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["enough",{"_index":324,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["enumerations",{"_index":1158,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["ews6f54we654efw651few6",{"_index":330,"title":{},"body":{"classes/CreateFavoriteDto.html":{}}}],["example",{"_index":239,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/IngredientNested.html":{},"classes/UpsertShoppingListDto.html":{}}}],["exec",{"_index":910,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{}}}],["executioncontext",{"_index":300,"title":{},"body":{"guards/CompareIdGuard.html":{},"guards/RolesGuard.html":{}}}],["expiresin",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{},"modules/ShoppingListModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":1091,"title":{},"body":{"modules/UserModule.html":{}}}],["express",{"_index":810,"title":{},"body":{"controllers/RecipeController.html":{},"dependencies.html":{}}}],["extends",{"_index":586,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterAuthDto.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":595,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":603,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":310,"title":{},"body":{"guards/CompareIdGuard.html":{},"injectables/JwtStrategy.html":{}}}],["favorite",{"_index":415,"title":{"classes/Favorite.html":{}},"body":{"classes/Favorite.html":{},"injectables/FavoritesService.html":{},"coverage.html":{}}}],["favorite.dto",{"_index":442,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/UpdateFavoriteDto.html":{}}}],["favorite.dto.ts",{"_index":328,"title":{},"body":{"classes/CreateFavoriteDto.html":{},"classes/UpdateFavoriteDto.html":{},"coverage.html":{}}}],["favorite.dto.ts:8",{"_index":331,"title":{},"body":{"classes/CreateFavoriteDto.html":{}}}],["favorites",{"_index":198,"title":{"classes/Favorites.html":{}},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{},"coverage.html":{}}}],["favorites.controller",{"_index":457,"title":{},"body":{"modules/FavoritesModule.html":{}}}],["favorites.service",{"_index":440,"title":{},"body":{"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{}}}],["favorites/favorites.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["favoritescontroller",{"_index":418,"title":{"controllers/FavoritesController.html":{}},"body":{"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"coverage.html":{}}}],["favoritesmodule",{"_index":36,"title":{"modules/FavoritesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FavoritesModule.html":{},"modules.html":{},"overview.html":{}}}],["favoritesservice",{"_index":439,"title":{"injectables/FavoritesService.html":{}},"body":{"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"coverage.html":{},"overview.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findall",{"_index":421,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyauthor",{"_index":737,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyauthor(tag",{"_index":759,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyav_rating",{"_index":738,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyav_rating(tag",{"_index":763,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbycooking_time",{"_index":739,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbycooking_time(tag",{"_index":766,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbycountry",{"_index":740,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbycountry(tag",{"_index":769,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbydifficulty",{"_index":741,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbydifficulty(tag",{"_index":772,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyfilter",{"_index":742,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyfilter(name",{"_index":775,"title":{},"body":{"controllers/RecipeController.html":{}}}],["findbyfilter(queries",{"_index":888,"title":{},"body":{"injectables/RecipeService.html":{}}}],["findbyfood_type",{"_index":743,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyfood_type(tag",{"_index":781,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyis_public",{"_index":744,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyis_public(tag",{"_index":784,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbymeal_type",{"_index":745,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbymeal_type(tag",{"_index":787,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyname",{"_index":746,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyname(tag",{"_index":790,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyviews",{"_index":747,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findbyviews(tag",{"_index":793,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findmostviewed",{"_index":748,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["findone",{"_index":422,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":448,"title":{},"body":{"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":428,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["finduser",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduser.password",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduser.role",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduser.user_name",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["first",{"_index":246,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["fisrt_name",{"_index":204,"title":{},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["flour",{"_index":341,"title":{},"body":{"classes/CreateIngredientDto.html":{}}}],["food_type",{"_index":282,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["format",{"_index":915,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["fourth",{"_index":257,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["framework",{"_index":1169,"title":{},"body":{"index.html":{}}}],["france",{"_index":273,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["france'})@isstring",{"_index":371,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["function",{"_index":1127,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1163,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/filter/by",{"_index":779,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('/list",{"_index":757,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('/top10/views",{"_index":865,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get(':id",{"_index":429,"title":{},"body":{"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["get('filter/author/:tag",{"_index":760,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/av_rating/:tag",{"_index":764,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/cooking_time/:tag",{"_index":767,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/country/:tag",{"_index":770,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/difficulty/:tag",{"_index":773,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/food_type/:tag",{"_index":782,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/is_public/:tag",{"_index":785,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/meal_type/:tag",{"_index":788,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/name/:tag",{"_index":791,"title":{},"body":{"controllers/RecipeController.html":{}}}],["get('filter/views/:tag",{"_index":794,"title":{},"body":{"controllers/RecipeController.html":{}}}],["getgroupfilterdto",{"_index":468,"title":{"classes/GetGroupFilterDto.html":{}},"body":{"classes/GetGroupFilterDto.html":{},"injectables/GroupService.html":{},"coverage.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getrecipiesfilterdto",{"_index":476,"title":{"classes/GetRecipiesFilterDto.html":{}},"body":{"classes/GetRecipiesFilterDto.html":{},"injectables/RecipeService.html":{},"coverage.html":{}}}],["getting",{"_index":1165,"title":{"index.html":{}},"body":{}}],["good",{"_index":323,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["grams",{"_index":339,"title":{},"body":{"classes/CreateIngredientDto.html":{}}}],["group",{"_index":489,"title":{"classes/Group.html":{}},"body":{"classes/Group.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"coverage.html":{}}}],["group.controller",{"_index":521,"title":{},"body":{"modules/GroupModule.html":{}}}],["group.dto",{"_index":511,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/UpdateGroupDto.html":{}}}],["group.dto.ts",{"_index":334,"title":{},"body":{"classes/CreateGroupDto.html":{},"classes/GetGroupFilterDto.html":{},"classes/UpdateGroupDto.html":{},"coverage.html":{}}}],["group.dto.ts:2",{"_index":474,"title":{},"body":{"classes/GetGroupFilterDto.html":{}}}],["group.dto.ts:3",{"_index":473,"title":{},"body":{"classes/GetGroupFilterDto.html":{}}}],["group.dto.ts:4",{"_index":475,"title":{},"body":{"classes/GetGroupFilterDto.html":{}}}],["group.service",{"_index":510,"title":{},"body":{"controllers/GroupController.html":{},"modules/GroupModule.html":{}}}],["group/group.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["group_name",{"_index":471,"title":{},"body":{"classes/GetGroupFilterDto.html":{},"classes/Group.html":{}}}],["groupcontroller",{"_index":500,"title":{"controllers/GroupController.html":{}},"body":{"controllers/GroupController.html":{},"modules/GroupModule.html":{},"coverage.html":{}}}],["groupdocument",{"_index":497,"title":{},"body":{"classes/Group.html":{},"injectables/GroupService.html":{},"miscellaneous/typealiases.html":{}}}],["groupmodule",{"_index":37,"title":{"modules/GroupModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GroupModule.html":{},"modules.html":{},"overview.html":{}}}],["groups",{"_index":201,"title":{"classes/Groups.html":{}},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{},"coverage.html":{}}}],["groupschema",{"_index":498,"title":{},"body":{"classes/Group.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["groupservice",{"_index":509,"title":{"injectables/GroupService.html":{}},"body":{"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"coverage.html":{},"overview.html":{}}}],["grow",{"_index":1202,"title":{},"body":{"index.html":{}}}],["guard",{"_index":293,"title":{"guards/CompareIdGuard.html":{},"guards/RolesGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":295,"title":{},"body":{"guards/CompareIdGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["guards/roles.guard",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{}}}],["hash",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["hash(password",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["headers",{"_index":995,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["hello",{"_index":71,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":1211,"title":{},"body":{"index.html":{}}}],["high",{"_index":243,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["httpexception",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["httpexception('invalid",{"_index":609,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["httpexception('password_invalid",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('user_not_found",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://nestjs.com",{"_index":1217,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":594,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/RecipeController.html":{}}}],["httpstatus.unauthorized",{"_index":610,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":431,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["id.guard",{"_index":1000,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["id.guard.ts",{"_index":297,"title":{},"body":{"guards/CompareIdGuard.html":{},"coverage.html":{}}}],["id.guard.ts:5",{"_index":301,"title":{},"body":{"guards/CompareIdGuard.html":{}}}],["id:finduser._id",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["id_user",{"_index":291,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["identifier",{"_index":1114,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":604,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["images/chocolate",{"_index":263,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["img",{"_index":265,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{}}}],["implements",{"_index":303,"title":{},"body":{"guards/CompareIdGuard.html":{},"injectables/ParseObjectIdPipe.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}}}],["improved",{"_index":319,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["ingredient",{"_index":533,"title":{"classes/Ingredient.html":{}},"body":{"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"injectables/IngredientService.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"classes/UpsertShoppingListDto.html":{},"coverage.html":{}}}],["ingredient.controller",{"_index":561,"title":{},"body":{"modules/IngredientModule.html":{}}}],["ingredient.dto",{"_index":551,"title":{},"body":{"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"classes/UpdateIngredientDto.html":{}}}],["ingredient.dto.ts",{"_index":337,"title":{},"body":{"classes/CreateIngredientDto.html":{},"classes/UpdateIngredientDto.html":{},"coverage.html":{}}}],["ingredient.dto.ts:6",{"_index":342,"title":{},"body":{"classes/CreateIngredientDto.html":{}}}],["ingredient.dto.ts:9",{"_index":340,"title":{},"body":{"classes/CreateIngredientDto.html":{}}}],["ingredient.name",{"_index":563,"title":{},"body":{"modules/IngredientModule.html":{}}}],["ingredient.service",{"_index":550,"title":{},"body":{"controllers/IngredientController.html":{},"modules/IngredientModule.html":{}}}],["ingredient/ingredient.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["ingredientcontroller",{"_index":540,"title":{"controllers/IngredientController.html":{}},"body":{"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"coverage.html":{}}}],["ingredientdocument",{"_index":537,"title":{},"body":{"classes/Ingredient.html":{},"miscellaneous/typealiases.html":{}}}],["ingredientmodel",{"_index":570,"title":{},"body":{"injectables/IngredientService.html":{}}}],["ingredientmodule",{"_index":38,"title":{"modules/IngredientModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IngredientModule.html":{},"modules.html":{},"overview.html":{}}}],["ingredientnested",{"_index":234,"title":{"classes/IngredientNested.html":{}},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"coverage.html":{}}}],["ingredients",{"_index":270,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"classes/UpsertShoppingListDto.html":{}}}],["ingredients._id",{"_index":907,"title":{},"body":{"injectables/RecipeService.html":{}}}],["ingredients.ingredient",{"_index":1033,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["ingredients.some",{"_index":934,"title":{},"body":{"injectables/RecipeService.html":{}}}],["ingredients.split",{"_index":933,"title":{},"body":{"injectables/RecipeService.html":{}}}],["ingredientsarray",{"_index":932,"title":{},"body":{"injectables/RecipeService.html":{}}}],["ingredientsarray.includes(_id.tostring",{"_index":935,"title":{},"body":{"injectables/RecipeService.html":{}}}],["ingredientschema",{"_index":538,"title":{},"body":{"classes/Ingredient.html":{},"modules/IngredientModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ingredientscontent",{"_index":718,"title":{},"body":{"classes/Recipe.html":{}}}],["ingredientservice",{"_index":549,"title":{"injectables/IngredientService.html":{}},"body":{"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"injectables/IngredientService.html":{},"coverage.html":{},"overview.html":{}}}],["injectable",{"_index":67,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FavoritesService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/CompareIdGuard.html":{},"injectables/FavoritesService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":68,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FavoritesService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["injectmodel(ingredient.name",{"_index":576,"title":{},"body":{"injectables/IngredientService.html":{}}}],["injectmodel(notification.name",{"_index":662,"title":{},"body":{"injectables/NotificationService.html":{}}}],["injectmodel(recipe.name",{"_index":899,"title":{},"body":{"injectables/RecipeService.html":{}}}],["injectmodel(shoppinglist.name",{"_index":1024,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["injectmodel(user.name",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["installation",{"_index":1180,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1182,"title":{},"body":{"index.html":{}}}],["internal",{"_index":491,"title":{},"body":{"classes/Group.html":{}}}],["is_public",{"_index":266,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["is_public.tolowercase",{"_index":924,"title":{},"body":{"injectables/RecipeService.html":{}}}],["is_publicboolean",{"_index":923,"title":{},"body":{"injectables/RecipeService.html":{}}}],["isboolean",{"_index":228,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["isdefined",{"_index":231,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["isdefined()@ishexadecimal",{"_index":564,"title":{},"body":{"classes/IngredientNested.html":{}}}],["isdefined()@isnumber",{"_index":565,"title":{},"body":{"classes/IngredientNested.html":{}}}],["isemail",{"_index":613,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["ishexadecimal",{"_index":221,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["isnotempty",{"_index":951,"title":{},"body":{"classes/RegisterAuthDto.html":{}}}],["isnumber",{"_index":229,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["isobject",{"_index":719,"title":{},"body":{"classes/Recipe.html":{}}}],["isstring",{"_index":223,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["it.'})@isstring()@isdefined",{"_index":373,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["john",{"_index":260,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["john'})@isdefined()@isstring",{"_index":363,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["join",{"_index":1209,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":598,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":581,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtauthservice",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ShoppingListService.html":{}}}],["jwtauthservice:jwtservice",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ShoppingListService.html":{}}}],["jwtconstants",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/ShoppingListModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/ShoppingListModule.html":{}}}],["jwtfromrequest",{"_index":602,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"modules/ShoppingListModule.html":{}}}],["jwtmodule.register",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{},"modules/ShoppingListModule.html":{}}}],["jwtservice",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ShoppingListService.html":{}}}],["jwtstrategy",{"_index":113,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1214,"title":{},"body":{"index.html":{}}}],["kind",{"_index":287,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["last_name",{"_index":205,"title":{},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["license",{"_index":1220,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1199,"title":{},"body":{"index.html":{}}}],["liked",{"_index":356,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["likes",{"_index":359,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["list",{"_index":984,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["literal",{"_index":220,"title":{},"body":{"classes/CommentNested.html":{},"classes/IngredientNested.html":{},"classes/UpsertShoppingListDto.html":{}}}],["local",{"_index":1148,"title":{},"body":{"dependencies.html":{}}}],["login",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterAuthDto.html":{}}}],["login(userobjectlogin",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginauthdto",{"_index":82,"title":{"classes/LoginAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginAuthDto.html":{},"classes/RegisterAuthDto.html":{},"coverage.html":{}}}],["loginuser",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(@body",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(userobjectlogin",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["love",{"_index":286,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["lunch",{"_index":271,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["lunch'})@isstring",{"_index":384,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":617,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["maxlength(12",{"_index":620,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["meal_type",{"_index":272,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["measure_unit",{"_index":338,"title":{},"body":{"classes/CreateIngredientDto.html":{},"classes/Ingredient.html":{}}}],["mediterranean",{"_index":281,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["mediterranean'})@isstring",{"_index":377,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["member_username",{"_index":472,"title":{},"body":{"classes/GetGroupFilterDto.html":{},"classes/Group.html":{}}}],["message",{"_index":824,"title":{},"body":{"controllers/RecipeController.html":{}}}],["metadata",{"_index":1151,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/CompareIdGuard.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["minlength",{"_index":618,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["minlength(4",{"_index":619,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["minlength(4)@maxlength(12",{"_index":615,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["miscellaneous",{"_index":1157,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1198,"title":{},"body":{"index.html":{}}}],["mix",{"_index":252,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["mode",{"_index":1188,"title":{},"body":{"index.html":{}}}],["model",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["models/role.enum",{"_index":963,"title":{},"body":{"guards/RolesGuard.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FavoritesModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FavoritesModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FavoritesModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/Favorites.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"classes/Notification.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"injectables/ShoppingListService.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["mongoose.isobjectidorhexstring(value",{"_index":694,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{}}}],["mongoose.schema.types.objectid",{"_index":721,"title":{},"body":{"classes/Recipe.html":{},"classes/RecipeComment.html":{}}}],["mongoose.types.objectid",{"_index":235,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"classes/UpsertShoppingListDto.html":{}}}],["mongoose.types.objectid.isvalid(id",{"_index":671,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["mongoosemodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot(process.env.mongodb_url",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":290,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"index.html":{}}}],["myśliwiec",{"_index":1215,"title":{},"body":{"index.html":{}}}],["name",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateRecipeDto.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":1176,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1219,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/CompareIdGuard.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/RecipeModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Group.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"modules/IngredientModule.html":{},"injectables/IngredientService.html":{},"classes/Notification.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":585,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1139,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":227,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/IngredientNested.html":{},"controllers/RecipeController.html":{},"classes/RegisterAuthDto.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/swagger/dist/decorators/api",{"_index":361,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["new",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateNotificationDto.html":{},"injectables/FavoritesService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/RecipeService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newingredient",{"_index":577,"title":{},"body":{"injectables/IngredientService.html":{}}}],["newingredient.save",{"_index":579,"title":{},"body":{"injectables/IngredientService.html":{}}}],["newnotification",{"_index":663,"title":{},"body":{"injectables/NotificationService.html":{}}}],["newnotification.save",{"_index":665,"title":{},"body":{"injectables/NotificationService.html":{}}}],["newrecipe",{"_index":900,"title":{},"body":{"injectables/RecipeService.html":{}}}],["newrecipe.save",{"_index":902,"title":{},"body":{"injectables/RecipeService.html":{}}}],["newuser",{"_index":1100,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.save",{"_index":1102,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":1168,"title":{},"body":{"index.html":{}}}],["notification",{"_index":621,"title":{"classes/Notification.html":{}},"body":{"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"modules/NotificationsModule.html":{},"coverage.html":{}}}],["notification.dto",{"_index":645,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{}}}],["notification.dto.ts",{"_index":345,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["notification.dto.ts:11",{"_index":352,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:14",{"_index":358,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:17",{"_index":357,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:20",{"_index":360,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:8",{"_index":354,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.name",{"_index":683,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["notification_list",{"_index":200,"title":{"classes/Notification_list.html":{}},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{},"coverage.html":{}}}],["notificationcontroller",{"_index":633,"title":{"controllers/NotificationController.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationsModule.html":{},"coverage.html":{}}}],["notificationdocument",{"_index":630,"title":{},"body":{"classes/Notification.html":{},"miscellaneous/typealiases.html":{}}}],["notificationmodel",{"_index":655,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notifications.controller",{"_index":682,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["notifications.service",{"_index":644,"title":{},"body":{"controllers/NotificationController.html":{},"modules/NotificationsModule.html":{}}}],["notifications/notifications.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["notifications_list",{"_index":212,"title":{},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["notificationschema",{"_index":631,"title":{},"body":{"classes/Notification.html":{},"modules/NotificationsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["notificationsdata",{"_index":666,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationsdata.length",{"_index":668,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationservice",{"_index":643,"title":{"injectables/NotificationService.html":{}},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"modules/NotificationsModule.html":{},"coverage.html":{},"overview.html":{}}}],["notificationsmodule",{"_index":39,"title":{"modules/NotificationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationsModule.html":{},"modules.html":{},"overview.html":{}}}],["number",{"_index":237,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"injectables/GroupService.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"classes/ShoppingList.html":{},"injectables/ShoppingListService.html":{},"classes/UpsertShoppingListDto.html":{}}}],["number(_avg_rating",{"_index":848,"title":{},"body":{"controllers/RecipeController.html":{}}}],["number(_cooking_time",{"_index":850,"title":{},"body":{"controllers/RecipeController.html":{}}}],["number(_views",{"_index":849,"title":{},"body":{"controllers/RecipeController.html":{}}}],["object",{"_index":625,"title":{},"body":{"classes/Notification.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["objectid",{"_index":329,"title":{},"body":{"classes/CreateFavoriteDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/Notification.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/ShoppingList.html":{},"classes/UpsertShoppingListDto.html":{}}}],["objectid(\"2943823572034",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["observable",{"_index":960,"title":{},"body":{"guards/RolesGuard.html":{}}}],["onion",{"_index":253,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["onions",{"_index":248,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["open",{"_index":1200,"title":{},"body":{"index.html":{}}}],["optional",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/CompareIdGuard.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FavoritesModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1224,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1135,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":867,"title":{},"body":{"controllers/RecipeController.html":{}}}],["param('tag",{"_index":853,"title":{},"body":{"controllers/RecipeController.html":{}}}],["parameters",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/CompareIdGuard.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parseobjectidpipe",{"_index":684,"title":{"injectables/ParseObjectIdPipe.html":{}},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"coverage.html":{}}}],["partialtype",{"_index":953,"title":{},"body":{"classes/RegisterAuthDto.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createfavoritedto",{"_index":1035,"title":{},"body":{"classes/UpdateFavoriteDto.html":{}}}],["partialtype(creategroupdto",{"_index":1037,"title":{},"body":{"classes/UpdateGroupDto.html":{}}}],["partialtype(createingredientdto",{"_index":1039,"title":{},"body":{"classes/UpdateIngredientDto.html":{}}}],["partialtype(createnotificationdto",{"_index":1041,"title":{},"body":{"classes/UpdateNotificationDto.html":{}}}],["partialtype(createrecipedto",{"_index":1043,"title":{},"body":{"classes/UpdateRecipeDto.html":{}}}],["partialtype(createuserdto",{"_index":1051,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(loginauthdto",{"_index":954,"title":{},"body":{"classes/RegisterAuthDto.html":{}}}],["partialtype(upsertshoppinglistdto",{"_index":1047,"title":{},"body":{"classes/UpdateShoppingListDto.html":{}}}],["passport",{"_index":597,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":599,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":600,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/LoginAuthDto.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["password:plaintohash",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":437,"title":{},"body":{"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["patch('modify/:id",{"_index":829,"title":{},"body":{"controllers/RecipeController.html":{}}}],["path",{"_index":906,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{}}}],["payload",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":607,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.user_name",{"_index":608,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pet",{"_index":255,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["pie",{"_index":241,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["pie'})@isdefined()@isstring",{"_index":386,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["pie.png",{"_index":264,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["pie.png'})@isstring",{"_index":379,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["pipe.pipe",{"_index":813,"title":{},"body":{"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{}}}],["pipe.pipe.ts",{"_index":686,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"coverage.html":{}}}],["pipe.pipe.ts:8",{"_index":689,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{}}}],["pipetransform",{"_index":691,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{}}}],["plaintohash",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["please",{"_index":289,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"index.html":{}}}],["populate",{"_index":905,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{}}}],["post",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["post('/create",{"_index":636,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/RecipeController.html":{}}}],["post(':id/comment",{"_index":750,"title":{},"body":{"controllers/RecipeController.html":{}}}],["post('login",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["private",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IngredientService.html":{},"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["process.env.secret",{"_index":1245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1190,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1167,"title":{},"body":{"index.html":{}}}],["project",{"_index":1201,"title":{},"body":{"index.html":{}}}],["promise",{"_index":593,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["prop",{"_index":193,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Group.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"classes/Notification.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"classes/ShoppingList.html":{},"classes/User.html":{}}}],["prop(['object",{"_index":1056,"title":{},"body":{"classes/User.html":{}}}],["prop(['recipecomment",{"_index":701,"title":{},"body":{"classes/Recipe.html":{}}}],["prop([object",{"_index":209,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["prop([recipecomment",{"_index":724,"title":{},"body":{"classes/Recipe.html":{}}}],["prop(array",{"_index":977,"title":{},"body":{"classes/ShoppingList.html":{}}}],["prop(undefined",{"_index":975,"title":{},"body":{"classes/ShoppingList.html":{}}}],["prop({required",{"_index":697,"title":{},"body":{"classes/Recipe.html":{},"classes/User.html":{}}}],["prop({type",{"_index":623,"title":{},"body":{"classes/Notification.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"classes/ShoppingList.html":{}}}],["properties",{"_index":192,"title":{"properties.html":{}},"body":{"classes/Badges.html":{},"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"classes/IngredientNested.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"classes/RegisterAuthDto.html":{},"classes/ShoppingList.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"properties.html":{}}}],["property.decorator",{"_index":362,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["providers",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FavoritesModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}}}],["qty",{"_index":236,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{}}}],["quantity",{"_index":978,"title":{},"body":{"classes/ShoppingList.html":{},"classes/UpsertShoppingListDto.html":{}}}],["queries",{"_index":851,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["query",{"_index":805,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('author",{"_index":838,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('avg_rating",{"_index":839,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('cooking_time",{"_index":843,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('country",{"_index":842,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('difficulty",{"_index":844,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('food_type",{"_index":846,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('ingredients",{"_index":847,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('is_public",{"_index":840,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('meal_type",{"_index":841,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('name",{"_index":837,"title":{},"body":{"controllers/RecipeController.html":{}}}],["query('views",{"_index":845,"title":{},"body":{"controllers/RecipeController.html":{}}}],["qwerty1234",{"_index":408,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["read",{"_index":1210,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["really",{"_index":317,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["recipe",{"_index":284,"title":{"classes/Recipe.html":{}},"body":{"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"coverage.html":{}}}],["recipe.author",{"_index":921,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.avg_rating",{"_index":922,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.comments.push(comment",{"_index":948,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.controller",{"_index":872,"title":{},"body":{"modules/RecipeModule.html":{}}}],["recipe.cooking_time",{"_index":928,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.country",{"_index":927,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.difficulty",{"_index":929,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.dto",{"_index":809,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/UpdateRecipeDto.html":{}}}],["recipe.dto.ts",{"_index":216,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/UpdateRecipeDto.html":{},"coverage.html":{}}}],["recipe.dto.ts:10",{"_index":482,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{}}}],["recipe.dto.ts:11",{"_index":488,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:12",{"_index":483,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:16",{"_index":566,"title":{},"body":{"classes/IngredientNested.html":{}}}],["recipe.dto.ts:2",{"_index":487,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:21",{"_index":225,"title":{},"body":{"classes/CommentNested.html":{}}}],["recipe.dto.ts:24",{"_index":224,"title":{},"body":{"classes/CommentNested.html":{}}}],["recipe.dto.ts:27",{"_index":222,"title":{},"body":{"classes/CommentNested.html":{}}}],["recipe.dto.ts:3",{"_index":478,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:37",{"_index":387,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:4",{"_index":479,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:42",{"_index":374,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:47",{"_index":364,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:5",{"_index":485,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:51",{"_index":366,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:55",{"_index":380,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:6",{"_index":484,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:60",{"_index":383,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:65",{"_index":381,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:69",{"_index":385,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:7",{"_index":486,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:73",{"_index":372,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:77",{"_index":370,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:8",{"_index":481,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:81",{"_index":376,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:85",{"_index":389,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:89",{"_index":378,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.dto.ts:9",{"_index":480,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{}}}],["recipe.dto.ts:94",{"_index":368,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["recipe.food_type",{"_index":931,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.is_public",{"_index":925,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.meal_type",{"_index":926,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.name",{"_index":874,"title":{},"body":{"modules/RecipeModule.html":{},"injectables/RecipeService.html":{}}}],["recipe.save",{"_index":949,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.service",{"_index":808,"title":{},"body":{"controllers/RecipeController.html":{},"modules/RecipeModule.html":{}}}],["recipe.views",{"_index":930,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe/recipe.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["recipecomment",{"_index":700,"title":{"classes/RecipeComment.html":{}},"body":{"classes/Recipe.html":{},"classes/RecipeComment.html":{},"coverage.html":{}}}],["recipecontroller",{"_index":734,"title":{"controllers/RecipeController.html":{}},"body":{"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"coverage.html":{}}}],["recipedata",{"_index":912,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipedocument",{"_index":717,"title":{},"body":{"classes/Recipe.html":{},"injectables/RecipeService.html":{},"miscellaneous/typealiases.html":{}}}],["recipemodel",{"_index":878,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipemodule",{"_index":40,"title":{"modules/RecipeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RecipeModule.html":{},"modules.html":{},"overview.html":{}}}],["recipeschema",{"_index":725,"title":{},"body":{"classes/Recipe.html":{},"modules/RecipeModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["recipeservice",{"_index":807,"title":{"injectables/RecipeService.html":{}},"body":{"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"coverage.html":{},"overview.html":{}}}],["recipies",{"_index":288,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"injectables/RecipeService.html":{}}}],["recipies.filter",{"_index":920,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipiesdata",{"_index":903,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipiesdata.length",{"_index":911,"title":{},"body":{"injectables/RecipeService.html":{}}}],["ref",{"_index":710,"title":{},"body":{"classes/Recipe.html":{},"classes/RecipeComment.html":{},"classes/ShoppingList.html":{}}}],["ref:'ingredient",{"_index":723,"title":{},"body":{"classes/Recipe.html":{},"classes/ShoppingList.html":{},"classes/UpsertShoppingListDto.html":{}}}],["reflect",{"_index":1150,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":957,"title":{},"body":{"guards/RolesGuard.html":{}}}],["register",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(userobject",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerauthdto",{"_index":91,"title":{"classes/RegisterAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterAuthDto.html":{},"coverage.html":{}}}],["registered",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["registeruser",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeruser(@body",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeruser(userobject",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["remove",{"_index":423,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":452,"title":{},"body":{"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":432,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["removednotification",{"_index":676,"title":{},"body":{"injectables/NotificationService.html":{}}}],["removedrecipe",{"_index":917,"title":{},"body":{"injectables/RecipeService.html":{}}}],["removeduser",{"_index":1110,"title":{},"body":{"injectables/UserService.html":{}}}],["removes",{"_index":467,"title":{},"body":{"injectables/FavoritesService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/ShoppingListService.html":{}}}],["repository",{"_index":1179,"title":{},"body":{"index.html":{}}}],["req",{"_index":968,"title":{},"body":{"guards/RolesGuard.html":{}}}],["req.user",{"_index":969,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request",{"_index":304,"title":{},"body":{"guards/CompareIdGuard.html":{},"controllers/ShoppingListController.html":{}}}],["request.body",{"_index":307,"title":{},"body":{"guards/CompareIdGuard.html":{}}}],["request.user",{"_index":306,"title":{},"body":{"guards/CompareIdGuard.html":{}}}],["require('mongoose",{"_index":531,"title":{},"body":{"injectables/GroupService.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":202,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["requiredroles",{"_index":964,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":970,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":756,"title":{},"body":{"controllers/RecipeController.html":{}}}],["res.status(httpstatus.ok).json",{"_index":823,"title":{},"body":{"controllers/RecipeController.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FavoritesModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":753,"title":{},"body":{"controllers/RecipeController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/CompareIdGuard.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/CompareIdGuard.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"controllers/RecipeController.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.user",{"_index":208,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{}}}],["roles",{"_index":816,"title":{},"body":{"controllers/RecipeController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":864,"title":{},"body":{"controllers/RecipeController.html":{}}}],["roles_key",{"_index":961,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":61,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesguard)@get('/top10/views",{"_index":797,"title":{},"body":{"controllers/RecipeController.html":{}}}],["run",{"_index":1185,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":528,"title":{},"body":{"injectables/GroupService.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["sanitizefilter",{"_index":909,"title":{},"body":{"injectables/RecipeService.html":{}}}],["scalable",{"_index":1172,"title":{},"body":{"index.html":{}}}],["schema",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{},"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Group.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"modules/IngredientModule.html":{},"classes/Notification.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"modules/RecipeModule.html":{},"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schema/shopping_list.schema",{"_index":1012,"title":{},"body":{"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{}}}],["schemafactory",{"_index":195,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Group.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"classes/Notification.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"classes/ShoppingList.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(group",{"_index":499,"title":{},"body":{"classes/Group.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(ingredient",{"_index":539,"title":{},"body":{"classes/Ingredient.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(notification",{"_index":632,"title":{},"body":{"classes/Notification.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(recipe",{"_index":726,"title":{},"body":{"classes/Recipe.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(recipecomment",{"_index":733,"title":{},"body":{"classes/RecipeComment.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(shoppinglist",{"_index":980,"title":{},"body":{"classes/ShoppingList.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":213,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/group.schema",{"_index":530,"title":{},"body":{"injectables/GroupService.html":{}}}],["schemas/ingredient.schema",{"_index":562,"title":{},"body":{"modules/IngredientModule.html":{},"injectables/IngredientService.html":{}}}],["schemas/notification.schema",{"_index":661,"title":{},"body":{"injectables/NotificationService.html":{},"modules/NotificationsModule.html":{}}}],["schemas/recipe.schema",{"_index":873,"title":{},"body":{"modules/RecipeModule.html":{},"injectables/RecipeService.html":{}}}],["schemas/user.schema",{"_index":414,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["second",{"_index":251,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["secret",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{},"modules/ShoppingListModule.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":605,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sergi",{"_index":355,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{}}}],["sergial",{"_index":412,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["server",{"_index":1173,"title":{},"body":{"index.html":{}}}],["setmetadata(roles_key",{"_index":1246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setoptions",{"_index":908,"title":{},"body":{"injectables/RecipeService.html":{}}}],["shopping",{"_index":983,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["shopping_list.controller",{"_index":1011,"title":{},"body":{"modules/ShoppingListModule.html":{}}}],["shopping_list.dto",{"_index":999,"title":{},"body":{"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateShoppingListDto.html":{}}}],["shopping_list.dto.ts",{"_index":1045,"title":{},"body":{"classes/UpdateShoppingListDto.html":{},"classes/UpsertShoppingListDto.html":{},"coverage.html":{}}}],["shopping_list.dto.ts:10",{"_index":1054,"title":{},"body":{"classes/UpsertShoppingListDto.html":{}}}],["shopping_list.dto.ts:7",{"_index":1053,"title":{},"body":{"classes/UpsertShoppingListDto.html":{}}}],["shopping_list.service",{"_index":997,"title":{},"body":{"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{}}}],["shopping_list/shopping_list.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["shoppinglist",{"_index":972,"title":{"classes/ShoppingList.html":{}},"body":{"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"coverage.html":{}}}],["shoppinglist.name",{"_index":1014,"title":{},"body":{"modules/ShoppingListModule.html":{}}}],["shoppinglistcontroller",{"_index":981,"title":{"controllers/ShoppingListController.html":{}},"body":{"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"coverage.html":{}}}],["shoppinglistdata",{"_index":1029,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["shoppinglistdata.length",{"_index":1031,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["shoppinglistfound",{"_index":1025,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["shoppinglistmodel",{"_index":1018,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["shoppinglistmodule",{"_index":41,"title":{"modules/ShoppingListModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ShoppingListModule.html":{},"modules.html":{},"overview.html":{}}}],["shoppinglistschema",{"_index":979,"title":{},"body":{"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["shoppinglistservice",{"_index":996,"title":{"injectables/ShoppingListService.html":{}},"body":{"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"coverage.html":{},"overview.html":{}}}],["shoppinglistupdated",{"_index":1027,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["side",{"_index":1174,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{},"modules/ShoppingListModule.html":{}}}],["singlenotificationdata",{"_index":672,"title":{},"body":{"injectables/NotificationService.html":{}}}],["slices",{"_index":250,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorite.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"modules/FavoritesModule.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"modules/IngredientModule.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"modules/NotificationsModule.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateFavoriteDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateIngredientDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecipeDto.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":1204,"title":{},"body":{"index.html":{}}}],["src/.../comment.schema.ts",{"_index":1234,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../group.schema.ts",{"_index":1235,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../group.service.ts",{"_index":1242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ingredient.schema.ts",{"_index":1236,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt.constants.ts",{"_index":1241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1164,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../notification.schema.ts",{"_index":1237,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../recipe.schema.ts",{"_index":1238,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":1159,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":1243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../shopping_list.schema.ts",{"_index":1244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":1239,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":69,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":70,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:11",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:11",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:19",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants/jwt.constants",{"_index":1013,"title":{},"body":{"modules/ShoppingListModule.html":{}}}],["src/auth/constants/jwt.constants.ts",{"_index":1119,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/roles.decorator",{"_index":817,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":1122,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login",{"_index":611,"title":{},"body":{"classes/LoginAuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/register",{"_index":950,"title":{},"body":{"classes/RegisterAuthDto.html":{},"coverage.html":{}}}],["src/auth/guards/compare",{"_index":296,"title":{},"body":{"guards/CompareIdGuard.html":{},"controllers/ShoppingListController.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":582,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard",{"_index":818,"title":{},"body":{"controllers/RecipeController.html":{},"modules/RecipeModule.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":955,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:12",{"_index":959,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:9",{"_index":958,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/models/role.enum",{"_index":197,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"controllers/RecipeController.html":{},"classes/User.html":{}}}],["src/auth/models/role.enum.ts",{"_index":1160,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/schemas/auth.entity.ts",{"_index":75,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":588,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:19",{"_index":592,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:7",{"_index":590,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/favorites/dto/create",{"_index":327,"title":{},"body":{"classes/CreateFavoriteDto.html":{},"coverage.html":{}}}],["src/favorites/dto/update",{"_index":1034,"title":{},"body":{"classes/UpdateFavoriteDto.html":{},"coverage.html":{}}}],["src/favorites/favorites.controller.ts",{"_index":419,"title":{},"body":{"controllers/FavoritesController.html":{},"coverage.html":{}}}],["src/favorites/favorites.controller.ts:11",{"_index":426,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["src/favorites/favorites.controller.ts:16",{"_index":427,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["src/favorites/favorites.controller.ts:21",{"_index":430,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["src/favorites/favorites.controller.ts:26",{"_index":438,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["src/favorites/favorites.controller.ts:31",{"_index":434,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["src/favorites/favorites.module.ts",{"_index":456,"title":{},"body":{"modules/FavoritesModule.html":{}}}],["src/favorites/favorites.service.ts",{"_index":458,"title":{},"body":{"injectables/FavoritesService.html":{},"coverage.html":{}}}],["src/favorites/favorites.service.ts:11",{"_index":460,"title":{},"body":{"injectables/FavoritesService.html":{}}}],["src/favorites/favorites.service.ts:15",{"_index":461,"title":{},"body":{"injectables/FavoritesService.html":{}}}],["src/favorites/favorites.service.ts:19",{"_index":463,"title":{},"body":{"injectables/FavoritesService.html":{}}}],["src/favorites/favorites.service.ts:23",{"_index":462,"title":{},"body":{"injectables/FavoritesService.html":{}}}],["src/favorites/favorites.service.ts:7",{"_index":459,"title":{},"body":{"injectables/FavoritesService.html":{}}}],["src/favorites/schemas/favorite.entity.ts",{"_index":416,"title":{},"body":{"classes/Favorite.html":{},"coverage.html":{}}}],["src/group/dto/create",{"_index":333,"title":{},"body":{"classes/CreateGroupDto.html":{},"coverage.html":{}}}],["src/group/dto/filter",{"_index":469,"title":{},"body":{"classes/GetGroupFilterDto.html":{},"coverage.html":{}}}],["src/group/dto/update",{"_index":1036,"title":{},"body":{"classes/UpdateGroupDto.html":{},"coverage.html":{}}}],["src/group/group.controller.ts",{"_index":501,"title":{},"body":{"controllers/GroupController.html":{},"coverage.html":{}}}],["src/group/group.controller.ts:11",{"_index":503,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:16",{"_index":504,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:21",{"_index":505,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:26",{"_index":508,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:31",{"_index":506,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.module.ts",{"_index":520,"title":{},"body":{"modules/GroupModule.html":{}}}],["src/group/group.service.ts",{"_index":522,"title":{},"body":{"injectables/GroupService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/group/group.service.ts:13",{"_index":523,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:17",{"_index":524,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:21",{"_index":525,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:25",{"_index":527,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:29",{"_index":526,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/schemas/group.schema.ts",{"_index":490,"title":{},"body":{"classes/Group.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/group/schemas/group.schema.ts:10",{"_index":495,"title":{},"body":{"classes/Group.html":{}}}],["src/group/schemas/group.schema.ts:13",{"_index":493,"title":{},"body":{"classes/Group.html":{}}}],["src/group/schemas/group.schema.ts:16",{"_index":492,"title":{},"body":{"classes/Group.html":{}}}],["src/group/schemas/group.schema.ts:19",{"_index":494,"title":{},"body":{"classes/Group.html":{}}}],["src/ingredient/dto/create",{"_index":336,"title":{},"body":{"classes/CreateIngredientDto.html":{},"coverage.html":{}}}],["src/ingredient/dto/update",{"_index":1038,"title":{},"body":{"classes/UpdateIngredientDto.html":{},"coverage.html":{}}}],["src/ingredient/ingredient.controller.ts",{"_index":541,"title":{},"body":{"controllers/IngredientController.html":{},"coverage.html":{}}}],["src/ingredient/ingredient.controller.ts:11",{"_index":543,"title":{},"body":{"controllers/IngredientController.html":{}}}],["src/ingredient/ingredient.controller.ts:16",{"_index":544,"title":{},"body":{"controllers/IngredientController.html":{}}}],["src/ingredient/ingredient.controller.ts:21",{"_index":545,"title":{},"body":{"controllers/IngredientController.html":{}}}],["src/ingredient/ingredient.controller.ts:26",{"_index":548,"title":{},"body":{"controllers/IngredientController.html":{}}}],["src/ingredient/ingredient.controller.ts:31",{"_index":546,"title":{},"body":{"controllers/IngredientController.html":{}}}],["src/ingredient/ingredient.module.ts",{"_index":560,"title":{},"body":{"modules/IngredientModule.html":{}}}],["src/ingredient/ingredient.service.ts",{"_index":567,"title":{},"body":{"injectables/IngredientService.html":{},"coverage.html":{}}}],["src/ingredient/ingredient.service.ts:17",{"_index":571,"title":{},"body":{"injectables/IngredientService.html":{}}}],["src/ingredient/ingredient.service.ts:22",{"_index":572,"title":{},"body":{"injectables/IngredientService.html":{}}}],["src/ingredient/ingredient.service.ts:26",{"_index":573,"title":{},"body":{"injectables/IngredientService.html":{}}}],["src/ingredient/ingredient.service.ts:30",{"_index":575,"title":{},"body":{"injectables/IngredientService.html":{}}}],["src/ingredient/ingredient.service.ts:34",{"_index":574,"title":{},"body":{"injectables/IngredientService.html":{}}}],["src/ingredient/ingredient.service.ts:9",{"_index":569,"title":{},"body":{"injectables/IngredientService.html":{}}}],["src/ingredient/schemas/ingredient.schema.ts",{"_index":534,"title":{},"body":{"classes/Ingredient.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/ingredient/schemas/ingredient.schema.ts:12",{"_index":535,"title":{},"body":{"classes/Ingredient.html":{}}}],["src/ingredient/schemas/ingredient.schema.ts:9",{"_index":536,"title":{},"body":{"classes/Ingredient.html":{}}}],["src/main.ts",{"_index":1126,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/notifications/dto/create",{"_index":344,"title":{},"body":{"classes/CreateNotificationDto.html":{},"coverage.html":{}}}],["src/notifications/dto/update",{"_index":1040,"title":{},"body":{"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["src/notifications/notifications.controller.ts",{"_index":634,"title":{},"body":{"controllers/NotificationController.html":{},"coverage.html":{}}}],["src/notifications/notifications.controller.ts:12",{"_index":637,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notifications.controller.ts:17",{"_index":638,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notifications.controller.ts:22",{"_index":639,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notifications.controller.ts:27",{"_index":642,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notifications.controller.ts:32",{"_index":640,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notifications.module.ts",{"_index":681,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["src/notifications/notifications.service.ts",{"_index":652,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["src/notifications/notifications.service.ts:10",{"_index":654,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notifications.service.ts:15",{"_index":656,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notifications.service.ts:20",{"_index":657,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notifications.service.ts:28",{"_index":658,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notifications.service.ts:35",{"_index":660,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notifications.service.ts:41",{"_index":659,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/schemas/notification.schema.ts",{"_index":622,"title":{},"body":{"classes/Notification.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/notifications/schemas/notification.schema.ts:11",{"_index":626,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/schemas/notification.schema.ts:14",{"_index":624,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/schemas/notification.schema.ts:17",{"_index":628,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/schemas/notification.schema.ts:20",{"_index":627,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/schemas/notification.schema.ts:23",{"_index":629,"title":{},"body":{"classes/Notification.html":{}}}],["src/recipe/dto/add",{"_index":312,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/recipe/dto/create",{"_index":215,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"coverage.html":{}}}],["src/recipe/dto/filter",{"_index":477,"title":{},"body":{"classes/GetRecipiesFilterDto.html":{},"coverage.html":{}}}],["src/recipe/dto/update",{"_index":1042,"title":{},"body":{"classes/UpdateRecipeDto.html":{},"coverage.html":{}}}],["src/recipe/recipe.controller.ts",{"_index":735,"title":{},"body":{"controllers/RecipeController.html":{},"coverage.html":{}}}],["src/recipe/recipe.controller.ts:103",{"_index":761,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:107",{"_index":765,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:111",{"_index":786,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:115",{"_index":789,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:119",{"_index":771,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:123",{"_index":768,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:127",{"_index":774,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:131",{"_index":795,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:135",{"_index":783,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:143",{"_index":798,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:148",{"_index":751,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:21",{"_index":755,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:31",{"_index":758,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:36",{"_index":799,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:43",{"_index":804,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:54",{"_index":801,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:63",{"_index":780,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.controller.ts:99",{"_index":792,"title":{},"body":{"controllers/RecipeController.html":{}}}],["src/recipe/recipe.module.ts",{"_index":871,"title":{},"body":{"modules/RecipeModule.html":{}}}],["src/recipe/recipe.service.ts",{"_index":875,"title":{},"body":{"injectables/RecipeService.html":{},"coverage.html":{}}}],["src/recipe/recipe.service.ts:10",{"_index":877,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:112",{"_index":893,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:119",{"_index":883,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:126",{"_index":884,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:133",{"_index":891,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:140",{"_index":892,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:147",{"_index":886,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:154",{"_index":885,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:16",{"_index":881,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:161",{"_index":887,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:168",{"_index":894,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:175",{"_index":890,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:182",{"_index":895,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:190",{"_index":879,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:21",{"_index":882,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:32",{"_index":896,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:48",{"_index":898,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:53",{"_index":897,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:58",{"_index":889,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/schemas/comment.schema",{"_index":716,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/comment.schema.ts",{"_index":727,"title":{},"body":{"classes/RecipeComment.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/recipe/schemas/comment.schema.ts:12",{"_index":730,"title":{},"body":{"classes/RecipeComment.html":{}}}],["src/recipe/schemas/comment.schema.ts:15",{"_index":729,"title":{},"body":{"classes/RecipeComment.html":{}}}],["src/recipe/schemas/comment.schema.ts:18",{"_index":728,"title":{},"body":{"classes/RecipeComment.html":{}}}],["src/recipe/schemas/recipe.schema.ts",{"_index":696,"title":{},"body":{"classes/Recipe.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/recipe/schemas/recipe.schema.ts:35",{"_index":714,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:38",{"_index":705,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:41",{"_index":698,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:44",{"_index":699,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:47",{"_index":708,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:50",{"_index":712,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:53",{"_index":711,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:56",{"_index":713,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:59",{"_index":704,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:62",{"_index":703,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:65",{"_index":706,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:68",{"_index":715,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:71",{"_index":707,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:74",{"_index":702,"title":{},"body":{"classes/Recipe.html":{}}}],["src/shopping_list/dto/update",{"_index":1044,"title":{},"body":{"classes/UpdateShoppingListDto.html":{},"coverage.html":{}}}],["src/shopping_list/dto/upsert",{"_index":1052,"title":{},"body":{"classes/UpsertShoppingListDto.html":{},"coverage.html":{}}}],["src/shopping_list/schema/shopping_list.schema.ts",{"_index":973,"title":{},"body":{"classes/ShoppingList.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shopping_list/schema/shopping_list.schema.ts:14",{"_index":976,"title":{},"body":{"classes/ShoppingList.html":{}}}],["src/shopping_list/schema/shopping_list.schema.ts:8",{"_index":974,"title":{},"body":{"classes/ShoppingList.html":{}}}],["src/shopping_list/shopping_list.controller.ts",{"_index":982,"title":{},"body":{"controllers/ShoppingListController.html":{},"coverage.html":{}}}],["src/shopping_list/shopping_list.controller.ts:15",{"_index":994,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["src/shopping_list/shopping_list.controller.ts:20",{"_index":986,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["src/shopping_list/shopping_list.controller.ts:25",{"_index":987,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["src/shopping_list/shopping_list.controller.ts:30",{"_index":990,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["src/shopping_list/shopping_list.controller.ts:35",{"_index":988,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["src/shopping_list/shopping_list.module.ts",{"_index":1010,"title":{},"body":{"modules/ShoppingListModule.html":{}}}],["src/shopping_list/shopping_list.service.ts",{"_index":1015,"title":{},"body":{"injectables/ShoppingListService.html":{},"coverage.html":{}}}],["src/shopping_list/shopping_list.service.ts:10",{"_index":1017,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["src/shopping_list/shopping_list.service.ts:17",{"_index":1023,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["src/shopping_list/shopping_list.service.ts:25",{"_index":1019,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["src/shopping_list/shopping_list.service.ts:34",{"_index":1020,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["src/shopping_list/shopping_list.service.ts:50",{"_index":1022,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["src/shopping_list/shopping_list.service.ts:54",{"_index":1021,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["src/user/dto/create",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":1049,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/schemas/user.schema",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/RecipeComment.html":{},"guards/RolesGuard.html":{}}}],["src/user/schemas/user.schema.ts",{"_index":191,"title":{},"body":{"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/user/schemas/user.schema.ts:10",{"_index":417,"title":{},"body":{"classes/Favorites.html":{}}}],["src/user/schemas/user.schema.ts:16",{"_index":194,"title":{},"body":{"classes/Badges.html":{}}}],["src/user/schemas/user.schema.ts:23",{"_index":678,"title":{},"body":{"classes/Notification_list.html":{}}}],["src/user/schemas/user.schema.ts:29",{"_index":532,"title":{},"body":{"classes/Groups.html":{}}}],["src/user/schemas/user.schema.ts:35",{"_index":1060,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:38",{"_index":1062,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:41",{"_index":1066,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:44",{"_index":1058,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:47",{"_index":1064,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:50",{"_index":1065,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:53",{"_index":1059,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:56",{"_index":1055,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:59",{"_index":1057,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:62",{"_index":1063,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:65",{"_index":1061,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.controller.ts",{"_index":1068,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:13",{"_index":1070,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:20",{"_index":1072,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:27",{"_index":1074,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:34",{"_index":1078,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:41",{"_index":1076,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/user/user.module.ts",{"_index":1090,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":1093,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:15",{"_index":1095,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:20",{"_index":1096,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:28",{"_index":1097,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:40",{"_index":1099,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:45",{"_index":1098,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:9",{"_index":1094,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utilities/parse",{"_index":685,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"coverage.html":{}}}],["start",{"_index":1186,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1189,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1191,"title":{},"body":{"index.html":{}}}],["started",{"_index":1166,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1178,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1115,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":1212,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":596,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":496,"title":{},"body":{"classes/Group.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["successfully",{"_index":825,"title":{},"body":{"controllers/RecipeController.html":{}}}],["sugar",{"_index":244,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["super",{"_index":601,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":1205,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1222,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1154,"title":{},"body":{"dependencies.html":{}}}],["system",{"_index":1162,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["table",{"_index":1134,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1133,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":762,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["taste",{"_index":256,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["tasty",{"_index":318,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["test",{"_index":1194,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1197,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1196,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1193,"title":{},"body":{"index.html":{}}}],["text_field",{"_index":348,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/Notification.html":{}}}],["thanks",{"_index":1203,"title":{},"body":{"index.html":{}}}],["third",{"_index":254,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(userobjectlogin",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(userobject",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.favoritesservice.create(createfavoritedto",{"_index":446,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["this.favoritesservice.findall",{"_index":447,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["this.favoritesservice.findone(+id",{"_index":449,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["this.favoritesservice.remove(+id",{"_index":453,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["this.favoritesservice.update(+id",{"_index":451,"title":{},"body":{"controllers/FavoritesController.html":{}}}],["this.findall",{"_index":919,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.groupservice.create(creategroupdto",{"_index":513,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.findall",{"_index":514,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.findone(+id",{"_index":515,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.remove(+id",{"_index":517,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.update(+id",{"_index":516,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.ingredientmodel(createingredientdto",{"_index":578,"title":{},"body":{"injectables/IngredientService.html":{}}}],["this.ingredientmodel.find",{"_index":580,"title":{},"body":{"injectables/IngredientService.html":{}}}],["this.ingredientservice.create(createingredientdto",{"_index":553,"title":{},"body":{"controllers/IngredientController.html":{}}}],["this.ingredientservice.findall",{"_index":554,"title":{},"body":{"controllers/IngredientController.html":{}}}],["this.ingredientservice.findone(+id",{"_index":555,"title":{},"body":{"controllers/IngredientController.html":{}}}],["this.ingredientservice.remove(+id",{"_index":557,"title":{},"body":{"controllers/IngredientController.html":{}}}],["this.ingredientservice.update(+id",{"_index":556,"title":{},"body":{"controllers/IngredientController.html":{}}}],["this.jwtauthservice.sign(payload",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.notificationmodel(createnotificationdto",{"_index":664,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationmodel.find",{"_index":667,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationmodel.findbyid(id",{"_index":673,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationmodel.findbyidanddelete(id",{"_index":677,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationmodel.findbyidandupdate(id,updatenotificationdto",{"_index":675,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationservice.create(createnotificationdto",{"_index":647,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.findall",{"_index":648,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.findone(id",{"_index":649,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.remove(id",{"_index":651,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.update(id",{"_index":650,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.recipemodel(createrecipedto",{"_index":901,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find",{"_index":904,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find().sort({\"views",{"_index":946,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({author",{"_index":937,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({avg_rating",{"_index":938,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({cooking_time",{"_index":942,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({country",{"_index":941,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({difficulty",{"_index":943,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({food_type",{"_index":945,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({is_public",{"_index":939,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({meal_type",{"_index":940,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({name",{"_index":936,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find({views",{"_index":944,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.findbyid(id",{"_index":913,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.findbyidanddelete(id",{"_index":918,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.findbyidandupdate(id,updaterecipedto",{"_index":916,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipeservice.addcomment(id",{"_index":868,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.create(createrecipedto",{"_index":822,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findall",{"_index":827,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbyauthor(tag",{"_index":855,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbyav_rating(tag",{"_index":856,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbycooking_time(tag",{"_index":860,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbycountry(tag",{"_index":859,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbydifficulty(tag",{"_index":861,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbyfilter(queries",{"_index":852,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbyfood_type(tag",{"_index":863,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbyis_public(tag",{"_index":857,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbymeal_type(tag",{"_index":858,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbyname(tag",{"_index":854,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findbyviews(tag",{"_index":862,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findmostviewed",{"_index":866,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.findone(id",{"_index":828,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.remove(id",{"_index":835,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.recipeservice.update(id",{"_index":831,"title":{},"body":{"controllers/RecipeController.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":965,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.shoppinglistmodel.find",{"_index":1030,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["this.shoppinglistmodel.find({'ingredients.ingredient':'63d0f9903dccc038d38d416c",{"_index":1026,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["this.shoppinglistmodel.findbyid(id",{"_index":1032,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["this.shoppinglistmodel.findoneandupdate",{"_index":1028,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["this.shoppinglistservice.findall",{"_index":1004,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["this.shoppinglistservice.findone(id",{"_index":1005,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["this.shoppinglistservice.remove(number(id",{"_index":1007,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["this.shoppinglistservice.update(number(id",{"_index":1006,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["this.shoppinglistservice.upsertshoppinglist(upsertshoppinglistdto",{"_index":1003,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["this.usermodel(createuserdto",{"_index":1101,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.create(userobject",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel.find",{"_index":1104,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(id",{"_index":1107,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyidanddelete(id",{"_index":1111,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyidandupdate(id,updateuserdto",{"_index":1109,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone({email",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.create(createuserdto",{"_index":1082,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":1083,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(id",{"_index":1084,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(id",{"_index":1086,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(id",{"_index":1085,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipe.html":{}}}],["tiny",{"_index":249,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["title",{"_index":219,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"classes/Notification.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{}}}],["title:\"nice",{"_index":283,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["token",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["touch",{"_index":1213,"title":{},"body":{"index.html":{}}}],["transform",{"_index":687,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{}}}],["transform(value",{"_index":688,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{}}}],["transformer",{"_index":233,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"dependencies.html":{}}}],["true",{"_index":203,"title":{},"body":{"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateRecipeDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/IngredientNested.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{}}}],["true'})@isdefined()@isboolean",{"_index":382,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["twitter",{"_index":1218,"title":{},"body":{"index.html":{}}}],["type",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/CommentNested.html":{},"guards/CompareIdGuard.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFavoriteDto.html":{},"classes/CreateIngredientDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecipeDto.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/GetGroupFilterDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/Ingredient.html":{},"controllers/IngredientController.html":{},"classes/IngredientNested.html":{},"injectables/IngredientService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Notification_list.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/RegisterAuthDto.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"classes/UpsertShoppingListDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1232,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":1177,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1155,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":709,"title":{},"body":{"classes/Recipe.html":{},"classes/RecipeComment.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"classes/User.html":{}}}],["unit",{"_index":1192,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1231,"title":{},"body":{"properties.html":{}}}],["update",{"_index":424,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":450,"title":{},"body":{"controllers/FavoritesController.html":{},"controllers/GroupController.html":{},"controllers/IngredientController.html":{},"controllers/NotificationController.html":{},"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":435,"title":{},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated",{"_index":832,"title":{},"body":{"controllers/RecipeController.html":{}}}],["updatednotification",{"_index":674,"title":{},"body":{"injectables/NotificationService.html":{}}}],["updatedrecipe",{"_index":830,"title":{},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["updateduser",{"_index":1108,"title":{},"body":{"injectables/UserService.html":{}}}],["updatefavoritedto",{"_index":436,"title":{"classes/UpdateFavoriteDto.html":{}},"body":{"controllers/FavoritesController.html":{},"injectables/FavoritesService.html":{},"classes/UpdateFavoriteDto.html":{},"coverage.html":{}}}],["updategroupdto",{"_index":507,"title":{"classes/UpdateGroupDto.html":{}},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/UpdateGroupDto.html":{},"coverage.html":{}}}],["updateingredientdto",{"_index":547,"title":{"classes/UpdateIngredientDto.html":{}},"body":{"controllers/IngredientController.html":{},"injectables/IngredientService.html":{},"classes/UpdateIngredientDto.html":{},"coverage.html":{}}}],["updatenotificationdto",{"_index":641,"title":{"classes/UpdateNotificationDto.html":{}},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["updaterecipedto",{"_index":802,"title":{"classes/UpdateRecipeDto.html":{}},"body":{"controllers/RecipeController.html":{},"injectables/RecipeService.html":{},"classes/UpdateRecipeDto.html":{},"coverage.html":{}}}],["updates",{"_index":466,"title":{},"body":{"injectables/FavoritesService.html":{},"injectables/GroupService.html":{},"injectables/IngredientService.html":{},"injectables/ShoppingListService.html":{}}}],["updateshoppinglistdto",{"_index":989,"title":{"classes/UpdateShoppingListDto.html":{}},"body":{"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateShoppingListDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":1048,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["upsert",{"_index":1046,"title":{},"body":{"classes/UpdateShoppingListDto.html":{}}}],["upsertshoppinglist",{"_index":985,"title":{},"body":{"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{}}}],["upsertshoppinglist(@body",{"_index":1002,"title":{},"body":{"controllers/ShoppingListController.html":{}}}],["upsertshoppinglist(upsertshoppinglistdto",{"_index":991,"title":{},"body":{"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{}}}],["upsertshoppinglistdto",{"_index":992,"title":{"classes/UpsertShoppingListDto.html":{}},"body":{"controllers/ShoppingListController.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateShoppingListDto.html":{},"classes/UpsertShoppingListDto.html":{},"coverage.html":{}}}],["useguards",{"_index":806,"title":{},"body":{"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":820,"title":{},"body":{"controllers/RecipeController.html":{},"controllers/ShoppingListController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":116,"title":{"classes/User.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Badges.html":{},"guards/CompareIdGuard.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/Recipe.html":{},"classes/RecipeComment.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user.controller",{"_index":1092,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":1050,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":406,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:15",{"_index":413,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":409,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":411,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":407,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:39",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:9",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":309,"title":{},"body":{"guards/CompareIdGuard.html":{}}}],["user.name",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["user.role?.includes(role",{"_index":971,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.service",{"_index":1080,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["user:finduser",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["user_name",{"_index":206,"title":{},"body":{"classes/Badges.html":{},"classes/CreateUserDto.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"injectables/JwtStrategy.html":{},"classes/Notification_list.html":{},"classes/RegisterAuthDto.html":{},"classes/User.html":{}}}],["usercontroller",{"_index":1067,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":1106,"title":{},"body":{"injectables/UserService.html":{}}}],["userdocument",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["userid",{"_index":606,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usermodel",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":42,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userobject",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["userobjectlogin",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["userschema",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{},"classes/Badges.html":{},"classes/Favorites.html":{},"classes/Groups.html":{},"classes/Notification_list.html":{},"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersdata",{"_index":1103,"title":{},"body":{"injectables/UserService.html":{}}}],["usersdata.length",{"_index":1105,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":1079,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["valid",{"_index":914,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["validate",{"_index":589,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":591,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":230,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{}}}],["validatenested()@type(undefined",{"_index":367,"title":{},"body":{"classes/CreateRecipeDto.html":{}}}],["validator",{"_index":232,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/IngredientNested.html":{},"classes/LoginAuthDto.html":{},"classes/RegisterAuthDto.html":{},"dependencies.html":{}}}],["validobjectid",{"_index":693,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{}}}],["value",{"_index":690,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1120,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1240,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1229,"title":{},"body":{"properties.html":{}}}],["views",{"_index":280,"title":{},"body":{"classes/CommentNested.html":{},"classes/CreateRecipeDto.html":{},"classes/GetRecipiesFilterDto.html":{},"classes/IngredientNested.html":{},"classes/Recipe.html":{},"controllers/RecipeController.html":{},"injectables/RecipeService.html":{}}}],["watch",{"_index":1187,"title":{},"body":{"index.html":{}}}],["website",{"_index":1216,"title":{},"body":{"index.html":{}}}],["world",{"_index":72,"title":{},"body":{"injectables/AppService.html":{}}}],["yarn",{"_index":1181,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1208,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FavoritesModule.html":{},"modules/GroupModule.html":{},"modules/IngredientModule.html":{},"modules/NotificationsModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nFavoritesModule\n\nFavoritesModule\n\nAppModule -->\n\nFavoritesModule->AppModule\n\n\n\n\n\nGroupModule\n\nGroupModule\n\nAppModule -->\n\nGroupModule->AppModule\n\n\n\n\n\nIngredientModule\n\nIngredientModule\n\nAppModule -->\n\nIngredientModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nRecipeModule\n\nRecipeModule\n\nAppModule -->\n\nRecipeModule->AppModule\n\n\n\n\n\nShoppingListModule\n\nShoppingListModule\n\nAppModule -->\n\nShoppingListModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            FavoritesModule\n                        \n                        \n                            GroupModule\n                        \n                        \n                            IngredientModule\n                        \n                        \n                            NotificationsModule\n                        \n                        \n                            RecipeModule\n                        \n                        \n                            ShoppingListModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport * as dotenv from 'dotenv';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RecipeModule } from './recipe/recipe.module';\nimport { GroupModule } from './group/group.module';\nimport { IngredientModule } from './ingredient/ingredient.module';\nimport { UserModule } from './user/user.module';\nimport { NotificationsModule } from './notifications/notifications.module';\nimport { AuthModule } from './auth/auth.module';\nimport { APP_GUARD } from '@nestjs/core';\nimport { RolesGuard } from './auth/guards/roles.guard';\nimport { FavoritesModule } from './favorites/favorites.module';\nimport { ShoppingListModule } from './shopping_list/shopping_list.module';\n\ndotenv.config()\n\n\n@Module({\n  imports: [\n    MongooseModule.forRoot(process.env.MONGODB_URL),\n    RecipeModule,\n    GroupModule,\n    IngredientModule,\n    UserModule,\n    NotificationsModule,\n    AuthModule,\n    FavoritesModule,\n    ShoppingListModule\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/schemas/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loginUser\n                            \n                            \n                                registerUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loginUser\n                        \n                    \n                \n            \n            \n                \nloginUser(userObjectLogin: LoginAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userObjectLogin\n                                    \n                                                LoginAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerUser\n                        \n                    \n                \n            \n            \n                \nregisterUser(userObject: RegisterAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userObject\n                                    \n                                                RegisterAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginAuthDto } from './dto/login-auth.dto';\nimport { RegisterAuthDto } from './dto/register-auth.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('register')\n  registerUser(@Body() userObject: RegisterAuthDto) {\n    return this.authService.register(userObject);\n  }\n\n  @Post('login')\n  loginUser(@Body() userObjectLogin: LoginAuthDto) {\n    return this.authService.login(userObjectLogin);\n  }\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { User, UserSchema } from 'src/user/schemas/user.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { JwtModule } from \"@nestjs/jwt\";\nimport { jwtConstants } from './constants/jwt.constants';\nimport { UserModule } from 'src/user/user.module';\nimport { JwtStrategy  } from \"./strategies/jwt.strategy\";\nimport { RolesGuard } from './guards/roles.guard';\n\n@Module({\n  imports:[\n    MongooseModule.forFeature([\n      { \n        name: User.name,\n        schema: UserSchema,\n      },\n    ]),\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '1440h' },\n    }),\n    UserModule\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, RolesGuard]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, jwtAuthService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtAuthService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(userObjectLogin: LoginAuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userObjectLogin\n                                    \n                                                LoginAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(userObject: RegisterAuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userObject\n                                    \n                                                RegisterAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User, UserDocument } from 'src/user/schemas/user.schema';\nimport { LoginAuthDto } from './dto/login-auth.dto';\nimport { RegisterAuthDto } from './dto/register-auth.dto';\nimport { hash, compare } from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n\n  constructor(\n    @InjectModel(User.name) \n    private readonly userModel: Model,\n    private jwtAuthService:JwtService\n  ){}\n\n  async register(userObject: RegisterAuthDto) {\n    const { password } = userObject;\n    const plainToHash = await hash(password, 10)\n    userObject = {...userObject, password:plainToHash};\n    return this.userModel.create(userObject);\n  }\n\n  async login(userObjectLogin: LoginAuthDto) {\n\n    const { email, password } = userObjectLogin;\n    const findUser = await this.userModel.findOne({email})\n    if (!findUser) {\n      throw new HttpException('USER_NOT_FOUND', 404);\n    }\n    const checkPassword = await compare(password, findUser.password);\n\n    if (!checkPassword) {\n      throw new HttpException('PASSWORD_INVALID', 403);\n    }\n\n    const payload = {id:findUser._id, name: findUser.user_name, role: findUser.role};\n    const token = this.jwtAuthService.sign(payload);\n    \n    const data = {\n      user:findUser,\n      token\n    };\n\n    return data;\n\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Badges.html":{"url":"classes/Badges.html","title":"class - Badges","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Badges\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\nimport { Role } from \"src/auth/models/role.enum\";\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class Favorites{\n    @Prop()\n    _id: string; \n}\n\n@Schema()\nexport class Badges{\n    @Prop()\n    name: string;\n}\n\n\n@Schema()\nexport class Notification_list{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class Groups{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    fisrt_name: string;\n\n    @Prop()\n    last_name: string;\n\n    @Prop({ required: true })\n    user_name: string;\n\n    @Prop({ required: true })\n    email: string;\n\n    @Prop({ required: true })\n    password: string;\n\n    @Prop({ required: true, default: Role.USER })\n    role: Role;\n\n    @Prop([Object])\n    favorites: Array;\n\n    @Prop()\n    address: string;\n\n    @Prop([Object])\n    badges: Array;\n\n    @Prop([Object])\n    notifications_list: Array;\n\n    @Prop([Object])\n    groups: Array;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentNested.html":{"url":"classes/CommentNested.html","title":"class - CommentNested","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentNested\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/dto/create-recipe.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                comment\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsHexadecimal()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsBoolean, IsNumber, ValidateNested, IsDefined, IsHexadecimal } from \"class-validator\";\nimport { Type } from 'class-transformer';\nimport mongoose from 'mongoose';\n\n\nclass IngredientNested {\n\t@IsDefined()\t\n    @IsHexadecimal()\n    _id: {\n\t\ttype: mongoose.Types.ObjectId;\n\t}\n\n\t@IsDefined()\t\n\t@IsNumber()\n\tqty: number;\n}\n\nclass CommentNested {\t\n    @IsString()\n    title: string;\n\t\n    @IsString()\n    comment: string;\t\n\n\t@IsHexadecimal()\n\tauthor:  {\n\t\ttype: mongoose.Types.ObjectId;\n\t}\n}\n\nexport class CreateRecipeDto {\n\n\t@ApiProperty( {example: 'Chocolate pie'})\n\t@IsDefined()\n\t@IsString()\n\tname: string;\n\n\t@ApiProperty( {example: 'Delicious chocolate pie with high sugar dose. First: cut onions in tiny slices. Second: Mix chocolate and onion. Third: let your pet taste it. Fourth: enjoy it.'})\n\t@IsString()\n\t@IsDefined()\n\tdescription: string;\n\n\t@ApiProperty( {example: 'John'})\n\t@IsDefined()\n\t@IsString()\n\tauthor: string;\n\n\t@ApiProperty( {example: 8})\n\t@IsNumber()\n\tavg_rating: number;\n\n\t@ApiProperty( {example: '/images/chocolate-pie.png'})\n\t@IsString()\n\timg: string;\n\n\t@ApiProperty( {example: 'true'})\n\t@IsDefined()\t\n\t@IsBoolean()\n\tis_public: boolean;\n\n\t@ApiProperty( {example: '[{ _id: \"2943823572034\", qty: 200 }]'})\n\t@ValidateNested()\n\t@Type(() => IngredientNested) \t\n\tingredients: IngredientNested[];\n\n\t@ApiProperty( {example: 'Lunch'})\n\t@IsString()\n\tmeal_type: string;\n\n\t@ApiProperty( {example: 'France'})\n\t@IsString()\n\tcountry: string;\n\n\t@ApiProperty( {example: 30})\n\t@IsNumber()\n\tcooking_time: number;\n\n\t@ApiProperty( {example: 'Easy'})\n\t@IsString()\n\tdifficulty: string;\n\n\t@ApiProperty( {example: 9421})\n\t@IsNumber()\n\tviews: number;\n\n\t@ApiProperty( {example: 'Mediterranean'})\n\t@IsString()\n\tfood_type: string;\n\n\t@ApiProperty( {example: '[{ title:\"Nice recipe\", comment:\"I love this kind of recipies, please more!\", id_user: \"2943823572034\" }]'})\n\t@ValidateNested() \n\t@Type(() => CommentNested) \t\t\n\tcomments: CommentNested[];\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/CompareIdGuard.html":{"url":"guards/CompareIdGuard.html","title":"guard - CompareIdGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    CompareIdGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/compare-id.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/compare-id.guard.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\n\n@Injectable()\nexport class CompareIdGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const body = request.body;\n    if (body._id !== user.id) {\n      return false;\n    }\n    return true;\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/dto/add-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                comment\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Doe'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/add-comment.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'I like this recipe, really tasty, but could be improved adding cinamon'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/add-comment.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Good enough'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/add-comment.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateCommentDto {\n  @ApiProperty({example: 'Good enough'})\n  title: string;\n\n  @ApiProperty({example: 'I like this recipe, really tasty, but could be improved adding cinamon'})\n  comment: string;\n\n\t@ApiProperty({example: 'John Doe'})\n  author: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFavoriteDto.html":{"url":"classes/CreateFavoriteDto.html","title":"class - CreateFavoriteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFavoriteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/favorites/dto/create-favorite.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ews6f54we654efw651few6'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/favorites/dto/create-favorite.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { ObjectId } from \"mongoose\";\n\n\nexport class CreateFavoriteDto {\n\n    @ApiProperty( {example: 'ews6f54we654efw651few6'})\n    _id: ObjectId;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateGroupDto.html":{"url":"classes/CreateGroupDto.html","title":"class - CreateGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/dto/create-group.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateGroupDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateIngredientDto.html":{"url":"classes/CreateIngredientDto.html","title":"class - CreateIngredientDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateIngredientDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ingredient/dto/create-ingredient.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                measure_unit\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        measure_unit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Grams'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ingredient/dto/create-ingredient.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Flour'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ingredient/dto/create-ingredient.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class CreateIngredientDto {\n\n    @ApiProperty( {example: 'Flour'})\n    name: string;\n\n    @ApiProperty( {example: 'Grams'})\n    measure_unit: string;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNotificationDto.html":{"url":"classes/CreateNotificationDto.html","title":"class - CreateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/dto/create-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                emitter\n                            \n                            \n                                text_field\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2023-01-20'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/dto/create-notification.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emitter\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '63cb0277ee58877e63e36fcc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/dto/create-notification.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text_field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Sergi liked your recipe'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/dto/create-notification.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'New like'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/dto/create-notification.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'likes'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/dto/create-notification.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger/dist/decorators/api-property.decorator\";\nimport { Date, ObjectId } from \"mongoose\";\n\n\nexport class CreateNotificationDto {\n\t\n\t@ApiProperty( {example: '63cb0277ee58877e63e36fcc'})\n\temitter: ObjectId;\n\n\t@ApiProperty( {example: '2023-01-20'})\n\tdate: Date;\n\n    @ApiProperty( {example: 'New like'})\n\ttitle: string;\n\t\n\t@ApiProperty( {example: 'Sergi liked your recipe'})\n\ttext_field: string;\n\n\t@ApiProperty( {example: 'likes'})\n\ttype: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRecipeDto.html":{"url":"classes/CreateRecipeDto.html","title":"class - CreateRecipeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRecipeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/dto/create-recipe.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                avg_rating\n                            \n                            \n                                comments\n                            \n                            \n                                cooking_time\n                            \n                            \n                                country\n                            \n                            \n                                description\n                            \n                            \n                                difficulty\n                            \n                            \n                                food_type\n                            \n                            \n                                img\n                            \n                            \n                                ingredients\n                            \n                            \n                                is_public\n                            \n                            \n                                meal_type\n                            \n                            \n                                name\n                            \n                            \n                                views\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John'})@IsDefined()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avg_rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 8})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CommentNested[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '[{ title:\"Nice recipe\", comment:\"I love this kind of recipies, please more!\", id_user: \"2943823572034\" }]'})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cooking_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 30})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'France'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Delicious chocolate pie with high sugar dose. First: cut onions in tiny slices. Second: Mix chocolate and onion. Third: let your pet taste it. Fourth: enjoy it.'})@IsString()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        difficulty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Easy'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        food_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Mediterranean'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        img\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '/images/chocolate-pie.png'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     IngredientNested[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '[{ _id: \"2943823572034\", qty: 200 }]'})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'true'})@IsDefined()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        meal_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Lunch'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Chocolate pie'})@IsDefined()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        views\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 9421})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:85\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsBoolean, IsNumber, ValidateNested, IsDefined, IsHexadecimal } from \"class-validator\";\nimport { Type } from 'class-transformer';\nimport mongoose from 'mongoose';\n\n\nclass IngredientNested {\n\t@IsDefined()\t\n    @IsHexadecimal()\n    _id: {\n\t\ttype: mongoose.Types.ObjectId;\n\t}\n\n\t@IsDefined()\t\n\t@IsNumber()\n\tqty: number;\n}\n\nclass CommentNested {\t\n    @IsString()\n    title: string;\n\t\n    @IsString()\n    comment: string;\t\n\n\t@IsHexadecimal()\n\tauthor:  {\n\t\ttype: mongoose.Types.ObjectId;\n\t}\n}\n\nexport class CreateRecipeDto {\n\n\t@ApiProperty( {example: 'Chocolate pie'})\n\t@IsDefined()\n\t@IsString()\n\tname: string;\n\n\t@ApiProperty( {example: 'Delicious chocolate pie with high sugar dose. First: cut onions in tiny slices. Second: Mix chocolate and onion. Third: let your pet taste it. Fourth: enjoy it.'})\n\t@IsString()\n\t@IsDefined()\n\tdescription: string;\n\n\t@ApiProperty( {example: 'John'})\n\t@IsDefined()\n\t@IsString()\n\tauthor: string;\n\n\t@ApiProperty( {example: 8})\n\t@IsNumber()\n\tavg_rating: number;\n\n\t@ApiProperty( {example: '/images/chocolate-pie.png'})\n\t@IsString()\n\timg: string;\n\n\t@ApiProperty( {example: 'true'})\n\t@IsDefined()\t\n\t@IsBoolean()\n\tis_public: boolean;\n\n\t@ApiProperty( {example: '[{ _id: \"2943823572034\", qty: 200 }]'})\n\t@ValidateNested()\n\t@Type(() => IngredientNested) \t\n\tingredients: IngredientNested[];\n\n\t@ApiProperty( {example: 'Lunch'})\n\t@IsString()\n\tmeal_type: string;\n\n\t@ApiProperty( {example: 'France'})\n\t@IsString()\n\tcountry: string;\n\n\t@ApiProperty( {example: 30})\n\t@IsNumber()\n\tcooking_time: number;\n\n\t@ApiProperty( {example: 'Easy'})\n\t@IsString()\n\tdifficulty: string;\n\n\t@ApiProperty( {example: 9421})\n\t@IsNumber()\n\tviews: number;\n\n\t@ApiProperty( {example: 'Mediterranean'})\n\t@IsString()\n\tfood_type: string;\n\n\t@ApiProperty( {example: '[{ title:\"Nice recipe\", comment:\"I love this kind of recipies, please more!\", id_user: \"2943823572034\" }]'})\n\t@ValidateNested() \n\t@Type(() => CommentNested) \t\t\n\tcomments: CommentNested[];\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                adress\n                            \n                            \n                                badges\n                            \n                            \n                                email\n                            \n                            \n                                favorites\n                            \n                            \n                                fisrt_name\n                            \n                            \n                                groups\n                            \n                            \n                                last_name\n                            \n                            \n                                notifications_list\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        adress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'c/Bla, Barcelona'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        badges\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '[{badges: 3}]'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'alolocosevivemejor@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favorites\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '[{ObjectID: \"2943823572034\",}]'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fisrt_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Sergi'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        groups\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '[{ _id: ObjectId(\"2943823572034\") }]'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Alsina'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifications_list\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '[{ _id: ObjectId(\"2943823572034\") }]'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'qwerty1234'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'registered'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'SergiAl'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Badges, Favorites, Groups, Notification_list } from \"../schemas/user.schema\";\n\n\n\nexport class CreateUserDto {\n\n    @ApiProperty( {example: 'Sergi'})\n    fisrt_name: string;\n\n    @ApiProperty({example: 'Alsina'})\n    last_name: string;\n\n    @ApiProperty({example: 'SergiAl'})\n    user_name: string;\n\n    @ApiProperty({example: 'alolocosevivemejor@gmail.com'})\n    email: string;\n\n    @ApiProperty({example: 'qwerty1234'})\n    password: string;\n\n    @ApiProperty({example: 'registered'})\n    role: string;\n\n    @ApiProperty({example: '[{ObjectID: \"2943823572034\",}]'})\n    favorites: Array;\n\n    @ApiProperty({example: 'c/Bla, Barcelona'})\n    adress: string;\n\n    @ApiProperty({example: '[{badges: 3}]'})\n    badges: Array;\n\n    @ApiProperty({example: '[{ _id: ObjectId(\"2943823572034\") }]'})\n    notifications_list: Array;\n\n    @ApiProperty({example: '[{ _id: ObjectId(\"2943823572034\") }]'})\n    groups: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Favorite.html":{"url":"classes/Favorite.html","title":"class - Favorite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Favorite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/favorites/schemas/favorite.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Favorite {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Favorites.html":{"url":"classes/Favorites.html","title":"class - Favorites","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Favorites\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\nimport { Role } from \"src/auth/models/role.enum\";\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class Favorites{\n    @Prop()\n    _id: string; \n}\n\n@Schema()\nexport class Badges{\n    @Prop()\n    name: string;\n}\n\n\n@Schema()\nexport class Notification_list{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class Groups{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    fisrt_name: string;\n\n    @Prop()\n    last_name: string;\n\n    @Prop({ required: true })\n    user_name: string;\n\n    @Prop({ required: true })\n    email: string;\n\n    @Prop({ required: true })\n    password: string;\n\n    @Prop({ required: true, default: Role.USER })\n    role: Role;\n\n    @Prop([Object])\n    favorites: Array;\n\n    @Prop()\n    address: string;\n\n    @Prop([Object])\n    badges: Array;\n\n    @Prop([Object])\n    notifications_list: Array;\n\n    @Prop([Object])\n    groups: Array;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FavoritesController.html":{"url":"controllers/FavoritesController.html","title":"controller - FavoritesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FavoritesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/favorites/favorites.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                favorites\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createFavoriteDto: CreateFavoriteDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/favorites/favorites.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createFavoriteDto\n                                    \n                                                CreateFavoriteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/favorites/favorites.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/favorites/favorites.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/favorites/favorites.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateFavoriteDto: UpdateFavoriteDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/favorites/favorites.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateFavoriteDto\n                                    \n                                                UpdateFavoriteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { FavoritesService } from './favorites.service';\nimport { CreateFavoriteDto } from './dto/create-favorite.dto';\nimport { UpdateFavoriteDto } from './dto/update-favorite.dto';\n\n@Controller('favorites')\nexport class FavoritesController {\n  constructor(private readonly favoritesService: FavoritesService) {}\n\n  @Post()\n  create(@Body() createFavoriteDto: CreateFavoriteDto) {\n    return this.favoritesService.create(createFavoriteDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.favoritesService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.favoritesService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateFavoriteDto: UpdateFavoriteDto) {\n    return this.favoritesService.update(+id, updateFavoriteDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.favoritesService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FavoritesModule.html":{"url":"modules/FavoritesModule.html","title":"module - FavoritesModule","body":"\n                   \n\n\n\n\n    Modules\n    FavoritesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FavoritesModule\n\n\n\ncluster_FavoritesModule_providers\n\n\n\n\nFavoritesService\n\nFavoritesService\n\n\n\nFavoritesModule\n\nFavoritesModule\n\nFavoritesModule -->\n\nFavoritesService->FavoritesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/favorites/favorites.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FavoritesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FavoritesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FavoritesService } from './favorites.service';\nimport { FavoritesController } from './favorites.controller';\n\n@Module({\n  controllers: [FavoritesController],\n  providers: [FavoritesService]\n})\nexport class FavoritesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FavoritesService.html":{"url":"injectables/FavoritesService.html","title":"injectable - FavoritesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FavoritesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/favorites/favorites.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createFavoriteDto: CreateFavoriteDto)\n                \n            \n\n\n            \n                \n                    Defined in src/favorites/favorites.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createFavoriteDto\n                                    \n                                                CreateFavoriteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/favorites/favorites.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/favorites/favorites.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/favorites/favorites.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateFavoriteDto: UpdateFavoriteDto)\n                \n            \n\n\n            \n                \n                    Defined in src/favorites/favorites.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateFavoriteDto\n                                    \n                                                UpdateFavoriteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateFavoriteDto } from './dto/create-favorite.dto';\nimport { UpdateFavoriteDto } from './dto/update-favorite.dto';\n\n@Injectable()\nexport class FavoritesService {\n  create(createFavoriteDto: CreateFavoriteDto) {\n    return 'This action adds a new favorite';\n  }\n\n  findAll() {\n    return `This action returns all favorites`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} favorite`;\n  }\n\n  update(id: number, updateFavoriteDto: UpdateFavoriteDto) {\n    return `This action updates a #${id} favorite`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} favorite`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetGroupFilterDto.html":{"url":"classes/GetGroupFilterDto.html","title":"class - GetGroupFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetGroupFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/dto/filter-group.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                admin_id\n                            \n                            \n                                    Optional\n                                group_name\n                            \n                            \n                                    Optional\n                                member_username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        admin_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/group/dto/filter-group.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        group_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/group/dto/filter-group.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        member_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/group/dto/filter-group.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetGroupFilterDto {\n    group_name?: string;\n    admin_id?: number;\n    member_username?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetRecipiesFilterDto.html":{"url":"classes/GetRecipiesFilterDto.html","title":"class - GetRecipiesFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetRecipiesFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/dto/filter-recipe.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                author\n                            \n                            \n                                    Optional\n                                avg_rating\n                            \n                            \n                                    Optional\n                                cooking_time\n                            \n                            \n                                    Optional\n                                country\n                            \n                            \n                                    Optional\n                                difficulty\n                            \n                            \n                                    Optional\n                                food_type\n                            \n                            \n                                    Optional\n                                ingredients\n                            \n                            \n                                    Optional\n                                is_public\n                            \n                            \n                                    Optional\n                                meal_type\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                views\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avg_rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        cooking_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        difficulty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        food_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        meal_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        views\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/filter-recipe.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetRecipiesFilterDto {\n    name?: string;\n    author?: string;\n    avg_rating?: number;\n    is_public?: any;\n    ingredients?: string;\n    meal_type?: string;\n    country?: string;\n    cooking_time?: number;\n    difficulty?: string;\n    views?: number;\n    food_type?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Group.html":{"url":"classes/Group.html","title":"class - Group","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Group\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/schemas/group.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admin_id\n                            \n                            \n                                group_name\n                            \n                            \n                                member_username\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admin_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     internal\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group/schemas/group.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        group_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group/schemas/group.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        member_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group/schemas/group.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group/schemas/group.schema.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport internal from 'stream';\n\nexport type GroupDocument = Group & Document;\n\n@Schema()\nexport class Group {\n  @Prop()\n  name: string;\n\n\t@Prop()\n  group_name: string;\n\n\t@Prop()\n  admin_id: internal;\n\n\t@Prop()\n\tmember_username: string;\n\n}\n\nexport const GroupSchema = SchemaFactory.createForClass(Group);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GroupController.html":{"url":"controllers/GroupController.html","title":"controller - GroupController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GroupController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/group.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                group\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createGroupDto: CreateGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createGroupDto\n                                    \n                                                CreateGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateGroupDto: UpdateGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateGroupDto\n                                    \n                                                UpdateGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { GroupService } from './group.service';\nimport { CreateGroupDto } from './dto/create-group.dto';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\n@Controller('group')\nexport class GroupController {\n  constructor(private readonly groupService: GroupService) {}\n\n  @Post()\n  create(@Body() createGroupDto: CreateGroupDto) {\n    return this.groupService.create(createGroupDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.groupService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.groupService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateGroupDto: UpdateGroupDto) {\n    return this.groupService.update(+id, updateGroupDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.groupService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GroupModule.html":{"url":"modules/GroupModule.html","title":"module - GroupModule","body":"\n                   \n\n\n\n\n    Modules\n    GroupModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GroupModule\n\n\n\ncluster_GroupModule_providers\n\n\n\n\nGroupService\n\nGroupService\n\n\n\nGroupModule\n\nGroupModule\n\nGroupModule -->\n\nGroupService->GroupModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/group/group.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GroupService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GroupController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GroupService } from './group.service';\nimport { GroupController } from './group.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  controllers: [GroupController],\n  providers: [GroupService]\n})\nexport class GroupModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GroupService.html":{"url":"injectables/GroupService.html","title":"injectable - GroupService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GroupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/group.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createGroupDto: CreateGroupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createGroupDto\n                                    \n                                                CreateGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateGroupDto: UpdateGroupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateGroupDto\n                                    \n                                                UpdateGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { from } from 'rxjs';\nimport { CreateGroupDto } from './dto/create-group.dto';\nimport { GetGroupFilterDto } from './dto/filter-group.dto';\nimport { UpdateGroupDto } from './dto/update-group.dto';\nimport { Group, GroupDocument } from \"./schemas/group.schema\";\nconst mongoose = require('mongoose');\n@Injectable()\nexport class GroupService {\n  \n  create(createGroupDto: CreateGroupDto) {\n    return 'This action adds a new group';\n  }\n\n  findAll() {\n    return `This action returns all group`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} group`;\n  }\n\n  update(id: number, updateGroupDto: UpdateGroupDto) {\n    return `This action updates a #${id} group`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} group`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Groups.html":{"url":"classes/Groups.html","title":"class - Groups","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Groups\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\nimport { Role } from \"src/auth/models/role.enum\";\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class Favorites{\n    @Prop()\n    _id: string; \n}\n\n@Schema()\nexport class Badges{\n    @Prop()\n    name: string;\n}\n\n\n@Schema()\nexport class Notification_list{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class Groups{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    fisrt_name: string;\n\n    @Prop()\n    last_name: string;\n\n    @Prop({ required: true })\n    user_name: string;\n\n    @Prop({ required: true })\n    email: string;\n\n    @Prop({ required: true })\n    password: string;\n\n    @Prop({ required: true, default: Role.USER })\n    role: Role;\n\n    @Prop([Object])\n    favorites: Array;\n\n    @Prop()\n    address: string;\n\n    @Prop([Object])\n    badges: Array;\n\n    @Prop([Object])\n    notifications_list: Array;\n\n    @Prop([Object])\n    groups: Array;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Ingredient.html":{"url":"classes/Ingredient.html","title":"class - Ingredient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Ingredient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ingredient/schemas/ingredient.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                measure_unit\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        measure_unit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ingredient/schemas/ingredient.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ingredient/schemas/ingredient.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type IngredientDocument = Ingredient & Document;\n\n@Schema()\nexport class Ingredient {\n    @Prop()\n\tname: string;\n\n\t@Prop()\n\tmeasure_unit: string;\n}\n\nexport const IngredientSchema = SchemaFactory.createForClass(Ingredient);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IngredientController.html":{"url":"controllers/IngredientController.html","title":"controller - IngredientController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IngredientController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ingredient/ingredient.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                ingredient\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createIngredientDto: CreateIngredientDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/ingredient/ingredient.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createIngredientDto\n                                    \n                                                CreateIngredientDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/ingredient/ingredient.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/ingredient/ingredient.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/ingredient/ingredient.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateIngredientDto: UpdateIngredientDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/ingredient/ingredient.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateIngredientDto\n                                    \n                                                UpdateIngredientDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { IngredientService } from './ingredient.service';\nimport { CreateIngredientDto } from './dto/create-ingredient.dto';\nimport { UpdateIngredientDto } from './dto/update-ingredient.dto';\n\n@Controller('ingredient')\nexport class IngredientController {\n  constructor(private readonly ingredientService: IngredientService) {}\n\n  @Post()\n  create(@Body() createIngredientDto: CreateIngredientDto) {\n    return this.ingredientService.create(createIngredientDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.ingredientService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.ingredientService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateIngredientDto: UpdateIngredientDto) {\n    return this.ingredientService.update(+id, updateIngredientDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.ingredientService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IngredientModule.html":{"url":"modules/IngredientModule.html","title":"module - IngredientModule","body":"\n                   \n\n\n\n\n    Modules\n    IngredientModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_IngredientModule\n\n\n\ncluster_IngredientModule_providers\n\n\n\n\nIngredientService\n\nIngredientService\n\n\n\nIngredientModule\n\nIngredientModule\n\nIngredientModule -->\n\nIngredientService->IngredientModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/ingredient/ingredient.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            IngredientService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            IngredientController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { IngredientService } from './ingredient.service';\nimport { IngredientController } from './ingredient.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { IngredientSchema, Ingredient } from './schemas/ingredient.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Ingredient.name, schema: IngredientSchema }]),\n  ],\n  controllers: [IngredientController],\n  providers: [IngredientService]\n})\nexport class IngredientModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IngredientNested.html":{"url":"classes/IngredientNested.html","title":"class - IngredientNested","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IngredientNested\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/dto/create-recipe.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                qty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsHexadecimal()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        qty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsBoolean, IsNumber, ValidateNested, IsDefined, IsHexadecimal } from \"class-validator\";\nimport { Type } from 'class-transformer';\nimport mongoose from 'mongoose';\n\n\nclass IngredientNested {\n\t@IsDefined()\t\n    @IsHexadecimal()\n    _id: {\n\t\ttype: mongoose.Types.ObjectId;\n\t}\n\n\t@IsDefined()\t\n\t@IsNumber()\n\tqty: number;\n}\n\nclass CommentNested {\t\n    @IsString()\n    title: string;\n\t\n    @IsString()\n    comment: string;\t\n\n\t@IsHexadecimal()\n\tauthor:  {\n\t\ttype: mongoose.Types.ObjectId;\n\t}\n}\n\nexport class CreateRecipeDto {\n\n\t@ApiProperty( {example: 'Chocolate pie'})\n\t@IsDefined()\n\t@IsString()\n\tname: string;\n\n\t@ApiProperty( {example: 'Delicious chocolate pie with high sugar dose. First: cut onions in tiny slices. Second: Mix chocolate and onion. Third: let your pet taste it. Fourth: enjoy it.'})\n\t@IsString()\n\t@IsDefined()\n\tdescription: string;\n\n\t@ApiProperty( {example: 'John'})\n\t@IsDefined()\n\t@IsString()\n\tauthor: string;\n\n\t@ApiProperty( {example: 8})\n\t@IsNumber()\n\tavg_rating: number;\n\n\t@ApiProperty( {example: '/images/chocolate-pie.png'})\n\t@IsString()\n\timg: string;\n\n\t@ApiProperty( {example: 'true'})\n\t@IsDefined()\t\n\t@IsBoolean()\n\tis_public: boolean;\n\n\t@ApiProperty( {example: '[{ _id: \"2943823572034\", qty: 200 }]'})\n\t@ValidateNested()\n\t@Type(() => IngredientNested) \t\n\tingredients: IngredientNested[];\n\n\t@ApiProperty( {example: 'Lunch'})\n\t@IsString()\n\tmeal_type: string;\n\n\t@ApiProperty( {example: 'France'})\n\t@IsString()\n\tcountry: string;\n\n\t@ApiProperty( {example: 30})\n\t@IsNumber()\n\tcooking_time: number;\n\n\t@ApiProperty( {example: 'Easy'})\n\t@IsString()\n\tdifficulty: string;\n\n\t@ApiProperty( {example: 9421})\n\t@IsNumber()\n\tviews: number;\n\n\t@ApiProperty( {example: 'Mediterranean'})\n\t@IsString()\n\tfood_type: string;\n\n\t@ApiProperty( {example: '[{ title:\"Nice recipe\", comment:\"I love this kind of recipies, please more!\", id_user: \"2943823572034\" }]'})\n\t@ValidateNested() \n\t@Type(() => CommentNested) \t\t\n\tcomments: CommentNested[];\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IngredientService.html":{"url":"injectables/IngredientService.html","title":"injectable - IngredientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IngredientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ingredient/ingredient.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ingredientModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/ingredient/ingredient.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ingredientModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createIngredientDto: CreateIngredientDto)\n                \n            \n\n\n            \n                \n                    Defined in src/ingredient/ingredient.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createIngredientDto\n                                    \n                                                CreateIngredientDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/ingredient/ingredient.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/ingredient/ingredient.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/ingredient/ingredient.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateIngredientDto: UpdateIngredientDto)\n                \n            \n\n\n            \n                \n                    Defined in src/ingredient/ingredient.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateIngredientDto\n                                    \n                                                UpdateIngredientDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateIngredientDto } from './dto/create-ingredient.dto';\nimport { UpdateIngredientDto } from './dto/update-ingredient.dto';\nimport { Ingredient } from \"./schemas/ingredient.schema\";\n\n@Injectable()\nexport class IngredientService { \n\n  constructor( \n    @InjectModel(Ingredient.name) \n    private readonly ingredientModel: Model, \n  ) {} \n  \n\n  async create(createIngredientDto: CreateIngredientDto) {\n    const newIngredient = new this.ingredientModel(createIngredientDto);\n    return await newIngredient.save();\n  }\n\n  findAll() {\n    return this.ingredientModel.find();\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} ingredient`;\n  }\n\n  update(id: number, updateIngredientDto: UpdateIngredientDto) {\n    return `This action updates a #${id} ingredient`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} ingredient`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { jwtConstants } from \"../constants/jwt.constants\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy){\n    constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n//   async validate(payload: any) {\n//     return { userId: payload.id, user_name: payload.user_name };\n\n    async validate(payload: any): Promise {\n    if (!payload) {\n      throw new HttpException('Invalid token', HttpStatus.UNAUTHORIZED);\n    }\n    return payload;\n  }\n  }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginAuthDto.html":{"url":"classes/LoginAuthDto.html","title":"class - LoginAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(4)@MaxLength(12)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-auth.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, MaxLength, MinLength } from \"class-validator\";\n\nexport class LoginAuthDto {\n    @IsEmail()\n    email: string;\n\n    @MinLength(4)\n    @MaxLength(12)\n    password: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Notification.html":{"url":"classes/Notification.html","title":"class - Notification","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Notification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/schemas/notification.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                emitter\n                            \n                            \n                                text_field\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emitter\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text_field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Date, ObjectId } from \"mongoose\";\nimport { Document } from \"mongoose\";\n\nexport type NotificationDocument = Notification & Document;\n\n@Schema()\nexport class Notification {\n\n\t@Prop({type: Object})\n\temitter: ObjectId;\n\n\t@Prop({type: Date})\n\tdate: Date;\n\n\t@Prop()\n\ttitle: string;\n\n\t@Prop()\n\ttext_field: string;\n\n\t@Prop()\n\ttype: string;\n}\n\nexport const NotificationSchema = SchemaFactory.createForClass(Notification);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationController.html":{"url":"controllers/NotificationController.html","title":"controller - NotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notifications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                notification\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createNotificationDto: CreateNotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')\n                \n            \n\n            \n                \n                    Defined in src/notifications/notifications.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createNotificationDto\n                                    \n                                                CreateNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/notifications/notifications.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/notifications/notifications.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/notifications/notifications.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateNotificationDto: UpdateNotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/notifications/notifications.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateNotificationDto\n                                    \n                                                UpdateNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { NotificationService } from './notifications.service';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\nimport { UpdateNotificationDto } from './dto/update-notification.dto';\n\n@Controller('notification')\nexport class NotificationController {\n\n  constructor(private readonly notificationService: NotificationService) {}\n\n  @Post('/create')\n  async create(@Body() createNotificationDto: CreateNotificationDto) {\n    return this.notificationService.create(createNotificationDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.notificationService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.notificationService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateNotificationDto: UpdateNotificationDto) {\n    return this.notificationService.update(id, updateNotificationDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.notificationService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notifications.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/notifications/notifications.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notificationModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createNotificationDto: CreateNotificationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createNotificationDto\n                                    \n                                                CreateNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateNotificationDto: UpdateNotificationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateNotificationDto\n                                    \n                                                UpdateNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport mongoose, { Model } from 'mongoose';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\nimport { UpdateNotificationDto } from './dto/update-notification.dto';\nimport { Notification } from './schemas/notification.schema';\n\n\n@Injectable()\nexport class NotificationService {\n  constructor(\n    @InjectModel(Notification.name) private readonly notificationModel: Model,\n  ) {}\n\n  async create(createNotificationDto: CreateNotificationDto) {\n    const newNotification = new this.notificationModel(createNotificationDto);\n    return await newNotification.save();\n  }\n\n  async findAll(): Promise {\n    const notificationsData = await this.notificationModel.find();\nif (!notificationsData || notificationsData.length == 0) {\n  console.log(\"Error: no data\");\n}\n    return notificationsData;\n  }\n\n  async findOne(id: string) {\n    if (mongoose.Types.ObjectId.isValid(id)) {\n    const singleNotificationData = await this.notificationModel.findById(id)\n    return singleNotificationData;\n  }\n}\n\n  async update(id: string, updateNotificationDto: UpdateNotificationDto) {\n    const updatedNotification = await this.notificationModel.findByIdAndUpdate(id,updateNotificationDto);\n\n    return updatedNotification;\n  }\n\n  async remove(id: string) {\n    const removedNotification = await this.notificationModel.findByIdAndDelete(id)\n    return removedNotification;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Notification_list.html":{"url":"classes/Notification_list.html","title":"class - Notification_list","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Notification_list\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\nimport { Role } from \"src/auth/models/role.enum\";\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class Favorites{\n    @Prop()\n    _id: string; \n}\n\n@Schema()\nexport class Badges{\n    @Prop()\n    name: string;\n}\n\n\n@Schema()\nexport class Notification_list{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class Groups{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    fisrt_name: string;\n\n    @Prop()\n    last_name: string;\n\n    @Prop({ required: true })\n    user_name: string;\n\n    @Prop({ required: true })\n    email: string;\n\n    @Prop({ required: true })\n    password: string;\n\n    @Prop({ required: true, default: Role.USER })\n    role: Role;\n\n    @Prop([Object])\n    favorites: Array;\n\n    @Prop()\n    address: string;\n\n    @Prop([Object])\n    badges: Array;\n\n    @Prop([Object])\n    notifications_list: Array;\n\n    @Prop([Object])\n    groups: Array;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationsModule.html":{"url":"modules/NotificationsModule.html","title":"module - NotificationsModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_providers\n\n\n\n\nNotificationService\n\nNotificationService\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nNotificationsModule -->\n\nNotificationService->NotificationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/notifications/notifications.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotificationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { NotificationService } from './notifications.service';\nimport { NotificationController } from './notifications.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { NotificationSchema, Notification } from './schemas/notification.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Notification.name, schema: NotificationSchema }]),\n  ],\n  controllers: [NotificationController],\n  providers: [NotificationService],\n})\nexport class NotificationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseObjectIdPipe.html":{"url":"injectables/ParseObjectIdPipe.html","title":"injectable - ParseObjectIdPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseObjectIdPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utilities/parse-object-id-pipe.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/utilities/parse-object-id-pipe.pipe.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         mongoose.Types.ObjectId\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PipeTransform, Injectable, BadRequestException } from '@nestjs/common';\nimport mongoose from 'mongoose';\n\n@Injectable()\nexport class ParseObjectIdPipe\n  implements PipeTransform\n{\n  transform(value: any): mongoose.Types.ObjectId {\n    const validObjectId: boolean = mongoose.isObjectIdOrHexString(value); \n    if (!validObjectId) {\n      throw new BadRequestException('Invalid ObjectId'); \n    }\n    return value; \n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Recipe.html":{"url":"classes/Recipe.html","title":"class - Recipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Recipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/schemas/recipe.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                avg_rating\n                            \n                            \n                                comments\n                            \n                            \n                                cooking_time\n                            \n                            \n                                country\n                            \n                            \n                                description\n                            \n                            \n                                difficulty\n                            \n                            \n                                food_type\n                            \n                            \n                                img\n                            \n                            \n                                ingredients\n                            \n                            \n                                is_public\n                            \n                            \n                                meal_type\n                            \n                            \n                                name\n                            \n                            \n                                views\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: 'Unknown'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avg_rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RecipeComment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['RecipeComment'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cooking_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        difficulty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        food_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        img\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Ingredient'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        meal_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        views\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:68\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\nimport { RecipeComment } from 'src/recipe/schemas/comment.schema';\n\nexport type RecipeDocument = Recipe & Document;\n\n// @Schema()\n// export class IngredientsContent {\n// \t@Prop({required: true, type: IsObject})\n// \t_id: {\n// \t\ttype: mongoose.Types.ObjectId;\n// \t}\n\n// \t@Prop()\n// \tqty: number;\n// }\n\n\n// @Schema()\n// export class CommentsContent {\n// \t@Prop()\n// \ttitle: string;\n\n// \t@Prop()\n// \tcomment: string;\n\n// \t@Prop({type: mongoose.Schema.Types.ObjectId, ref: 'User'})\n// \tauthor_id: User;\n\n// }\n\n@Schema()\nexport class Recipe {\n\t@Prop({required: true})\n\tname: string;\n\n\t@Prop({required: true})\n\tdescription: string;\n\n\t@Prop({required: true, default: \"Unknown\"})\n\tauthor: string;\n\n\t@Prop()\n\tavg_rating: number;\n\n\t@Prop()\n\timg: string;\n\n\t@Prop({required: true, default: true})\n\tis_public: boolean;\n\n\t@Prop({type: mongoose.Types.ObjectId, ref:'Ingredient'})\n\tingredients: any[];\n\n\t@Prop()\n\tmeal_type: string;\n\n\t@Prop()\n\tcountry: string;\n\n\t@Prop()\n\tcooking_time: number;\n\n\t@Prop()\n\tdifficulty: string;\n\n\t@Prop()\n\tviews: number;\n\n\t@Prop()\n\tfood_type: string;\n\n\t@Prop([RecipeComment])\n\tcomments: RecipeComment[];\n\n}\n\nexport const RecipeSchema = SchemaFactory.createForClass(Recipe);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecipeComment.html":{"url":"classes/RecipeComment.html","title":"class - RecipeComment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecipeComment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/schemas/comment.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                comment\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/comment.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/comment.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/comment.schema.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\nimport { User } from 'src/user/schemas/user.schema';\n\n\nexport type CommentDocument = Comment & Document;\n\n\n@Schema()\nexport class RecipeComment {\n\t@Prop()\n\ttitle: string;\n\n\t@Prop()\n\tcomment: string;\n\n\t@Prop({type: mongoose.Schema.Types.ObjectId, ref: 'User'})\n\tauthor: any;\n\n}\n\nexport const CommentSchema = SchemaFactory.createForClass(RecipeComment);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RecipeController.html":{"url":"controllers/RecipeController.html","title":"controller - RecipeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RecipeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/recipe.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                recipe\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByAuthor\n                            \n                            \n                                    Async\n                                findByAv_rating\n                            \n                            \n                                    Async\n                                findByCooking_time\n                            \n                            \n                                    Async\n                                findByCountry\n                            \n                            \n                                    Async\n                                findByDifficulty\n                            \n                            \n                                    Async\n                                findByFilter\n                            \n                            \n                                    Async\n                                findByFood_type\n                            \n                            \n                                    Async\n                                findByIs_public\n                            \n                            \n                                    Async\n                                findByMeal_type\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findByViews\n                            \n                            \n                                    Async\n                                findMostViewed\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(id: string, comment: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/comment')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    comment\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(res: Response, createRecipeDto: CreateRecipeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post('/create')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createRecipeDto\n                                    \n                                                CreateRecipeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByAuthor\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByAuthor(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/author/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByAv_rating\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByAv_rating(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/av_rating/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCooking_time\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCooking_time(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/cooking_time/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCountry\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCountry(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/country/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByDifficulty\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByDifficulty(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/difficulty/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByFilter(name: string, author: string, _avg_rating: number, is_public: boolean, meal_type: string, country: string, _cooking_time: number, difficulty: string, _views: number, food_type: string, ingredients: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/filter/by')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    author\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _avg_rating\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    is_public\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    meal_type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    country\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _cooking_time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    difficulty\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _views\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    food_type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ingredients\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByFood_type\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByFood_type(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/food_type/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByIs_public\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIs_public(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/is_public/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByMeal_type\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByMeal_type(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/meal_type/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByName(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/name/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByViews\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByViews(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter/views/:tag')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findMostViewed\n                        \n                    \n                \n            \n            \n                \n                    \n                    findMostViewed()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Roles(Role.ADMIN)@UseGuards(JwtAuthGuard, RolesGuard)@Get('/top10/views')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Delete('delete/:id')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateRecipeDto: UpdateRecipeDto, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Patch('modify/:id')\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRecipeDto\n                                    \n                                                UpdateRecipeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, Res, HttpStatus, Query, UseGuards } from '@nestjs/common';\nimport { RecipeService } from './recipe.service';\nimport { CreateRecipeDto } from './dto/create-recipe.dto';\nimport { UpdateRecipeDto } from './dto/update-recipe.dto';\nimport { Response } from 'express';\nimport { ApiBearerAuth } from '@nestjs/swagger';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { ParseObjectIdPipe } from 'src/utilities/parse-object-id-pipe.pipe';\nimport { CreateCommentDto } from './dto/add-comment.dto';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { Role } from 'src/auth/models/role.enum';\nimport { RolesGuard } from 'src/auth/guards/roles.guard';\n\n@Controller('recipe')\nexport class RecipeController {\n  constructor(private readonly recipeService: RecipeService) {}\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post('/create')\n  async create(@Res() res: Response, @Body() createRecipeDto: CreateRecipeDto) {\n    const recipe = await this.recipeService.create(createRecipeDto);\n    return res.status(HttpStatus.OK).json({\n      message: 'Recipe successfully created',\n      recipe\n    });\n\n  }\n\n  @Get('/list')\n  async findAll() {\n    return await this.recipeService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id', ParseObjectIdPipe) id: string) {\n    return await this.recipeService.findOne(id);\n  }\n  \n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Patch('modify/:id')\n  async update(@Param('id', ParseObjectIdPipe) id: string, @Body() updateRecipeDto: UpdateRecipeDto, @Res() res: Response) {\n    const updatedRecipe = await this.recipeService.update(id, updateRecipeDto);\n    return res.status(HttpStatus.OK).json({\n      message: 'Recipe successfully updated',\n      updatedRecipe\n    });\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete('delete/:id')\n  async remove(@Param('id', ParseObjectIdPipe) id: string, @Res() res: Response) {\n    const deletededRecipe = await this.recipeService.remove(id);\n    return res.status(HttpStatus.OK).json({\n      message: 'Recipe successfully deleted',\n      deletededRecipe\n    });    \n  }\n\n  @Get('/filter/by')\n  async findByFilter(\n    @Query('name') name: string,\n    @Query('author') author: string,\n    @Query('avg_rating') _avg_rating: number,\n    @Query('is_public') is_public: boolean,\n    @Query('meal_type') meal_type: string,\n    @Query('country') country: string,\n    @Query('cooking_time') _cooking_time: number,\n    @Query('difficulty') difficulty: string,\n    @Query('views') _views: number,\n    @Query('food_type') food_type: string,\n    @Query('ingredients') ingredients: string\n\n  ){\n\n    let avg_rating = undefined;\n    let views = undefined;\n    let cooking_time = undefined;\n\n    if (_avg_rating) {\n      avg_rating = Number(_avg_rating);\n    }\n    if (_views) {\n      views = Number(_views); \n    }\n    if (_cooking_time) {\n      cooking_time = Number(_cooking_time); \n    }    \n\n    let queries = {name, author, avg_rating, is_public, meal_type, country, cooking_time, difficulty, views, food_type, ingredients};\n\n    return await this.recipeService.findByFilter(queries);   \n\n  }\n\n  @Get('filter/name/:tag')\n  async findByName (@Param('tag') tag: string) {\n    return await this.recipeService.findByName(tag);\n  }\n  @Get('filter/author/:tag')\n  async findByAuthor (@Param('tag') tag: string) {\n    return await this.recipeService.findByAuthor(tag);\n  }\n  @Get('filter/av_rating/:tag')\n  async findByAv_rating (@Param('tag') tag: string) {\n    return await this.recipeService.findByAv_rating(tag);\n  }\n  @Get('filter/is_public/:tag')\n  async findByIs_public (@Param('tag') tag: string) {\n    return await this.recipeService.findByIs_public(tag);\n  }\n  @Get('filter/meal_type/:tag')\n  async findByMeal_type (@Param('tag') tag: string) {\n    return await this.recipeService.findByMeal_type(tag);\n  }\n  @Get('filter/country/:tag')\n  async findByCountry (@Param('tag') tag: string) {\n    return await this.recipeService.findByCountry(tag);\n  }\n  @Get('filter/cooking_time/:tag')\n  async findByCooking_time (@Param('tag') tag: string) {\n    return await this.recipeService.findByCooking_time(tag);\n  }\n  @Get('filter/difficulty/:tag')\n  async findByDifficulty (@Param('tag') tag: string) {\n    return await this.recipeService.findByDifficulty(tag);\n  }\n  @Get('filter/views/:tag')\n  async findByViews (@Param('tag') tag: string) {\n    return await this.recipeService.findByViews(tag);\n  }\n  @Get('filter/food_type/:tag')\n  async findByFood_type (@Param('tag') tag: string) {\n    return await this.recipeService.findByFood_type(tag);\n  }                  \n\n  @ApiBearerAuth()\n  @Roles(Role.ADMIN)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get('/top10/views')\n  async findMostViewed() {\n    return await this.recipeService.findMostViewed();\n  }\n\n  @Post(':id/comment') \n  async addComment(\n    @Param('id', ParseObjectIdPipe) id: string, \n    @Body() comment: CreateCommentDto, \n  ) {\n    return this.recipeService.addComment(id, comment); \n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RecipeModule.html":{"url":"modules/RecipeModule.html","title":"module - RecipeModule","body":"\n                   \n\n\n\n\n    Modules\n    RecipeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RecipeModule\n\n\n\ncluster_RecipeModule_providers\n\n\n\n\nRecipeService\n\nRecipeService\n\n\n\nRecipeModule\n\nRecipeModule\n\nRecipeModule -->\n\nRecipeService->RecipeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/recipe/recipe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RecipeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RecipeController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RecipeService } from './recipe.service';\nimport { RecipeController } from './recipe.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RecipeSchema, Recipe } from './schemas/recipe.schema';\nimport { RolesGuard } from 'src/auth/guards/roles.guard';\nimport { APP_GUARD } from '@nestjs/core';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Recipe.name, schema: RecipeSchema }]),\n  ],\n  controllers: [RecipeController],\n  providers: [RecipeService]\n})\nexport class RecipeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RecipeService.html":{"url":"injectables/RecipeService.html","title":"injectable - RecipeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RecipeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/recipe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByAuthor\n                            \n                            \n                                    Async\n                                findByAv_rating\n                            \n                            \n                                    Async\n                                findByCooking_time\n                            \n                            \n                                    Async\n                                findByCountry\n                            \n                            \n                                    Async\n                                findByDifficulty\n                            \n                            \n                                    Async\n                                findByFilter\n                            \n                            \n                                    Async\n                                findByFood_type\n                            \n                            \n                                    Async\n                                findByIs_public\n                            \n                            \n                                    Async\n                                findByMeal_type\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findByViews\n                            \n                            \n                                    Async\n                                findMostViewed\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(recipeModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/recipe/recipe.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        recipeModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(id: string, comment: any)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    comment\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createRecipeDto: CreateRecipeDto)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRecipeDto\n                                    \n                                                CreateRecipeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByAuthor\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByAuthor(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByAv_rating\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByAv_rating(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCooking_time\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCooking_time(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCountry\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCountry(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByDifficulty\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByDifficulty(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByFilter(queries: GetRecipiesFilterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queries\n                                    \n                                                GetRecipiesFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByFood_type\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByFood_type(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByIs_public\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIs_public(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByMeal_type\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByMeal_type(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByName(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByViews\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByViews(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findMostViewed\n                        \n                    \n                \n            \n            \n                \n                    \n                    findMostViewed()\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateRecipeDto: UpdateRecipeDto)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRecipeDto\n                                    \n                                                UpdateRecipeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateRecipeDto } from './dto/create-recipe.dto';\nimport { GetRecipiesFilterDto } from './dto/filter-recipe.dto';\nimport { UpdateRecipeDto } from './dto/update-recipe.dto';\nimport { Recipe, RecipeDocument } from \"./schemas/recipe.schema\";\nimport mongoose from 'mongoose';\n@Injectable()\nexport class RecipeService {\n\n    constructor( \n    @InjectModel(Recipe.name) private readonly recipeModel: Model, \n  ) {}\n\n  async create(createRecipeDto: CreateRecipeDto) {\n    const newRecipe = new this.recipeModel(createRecipeDto);\n    return await newRecipe.save();\n  }\n\n  async findAll(): Promise {\n    const recipiesData = await this.recipeModel.find()\n      .populate({ path: 'ingredients._id' })\n      .setOptions({ sanitizeFilter: true })\n      .exec();\n    if (!recipiesData || recipiesData.length == 0) {\n        console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }\n\n  async findOne(id: string): Promise {\n    if (mongoose.Types.ObjectId.isValid(id)) {\n          const recipeData = await this.recipeModel.findById(id)\n          .populate({ path: 'ingredients._id' })\n          .exec();\n    if (!recipeData) {\n        console.log(\"Error: no data\");\n    }\n    return recipeData;\n    }else {\n      console.log(\"Error: the id is not in a valid format\");\n    }\n\n\n  }\n\n  async update(id: string, updateRecipeDto: UpdateRecipeDto) {\n    const updatedRecipe = await this.recipeModel.findByIdAndUpdate(id,updateRecipeDto);\n    return updatedRecipe;\n  }\n\n  async remove(id: string) {\n    const removedRecipe = await this.recipeModel.findByIdAndDelete(id);\n    return removedRecipe;\n  }\n\n  async findByFilter(queries: GetRecipiesFilterDto) {\n\n    let recipies = await this.findAll();\n\n    let {name, author, avg_rating, is_public, meal_type, country, cooking_time, difficulty, views, food_type, ingredients} = queries;\n\n    if (name) {\n      recipies = recipies.filter( recipe => recipe.name === name);\n    }\n\n    if (author) {\n      recipies = recipies.filter( recipe => recipe.author === author);\n    }\n\n    if (avg_rating) {\n      recipies = recipies.filter( recipe => recipe.avg_rating == avg_rating);\n    }    \n\n    if (is_public != undefined) {\n      let is_publicBoolean = (is_public.toLowerCase() === \"true\");\n      recipies = recipies.filter( recipe => recipe.is_public == is_publicBoolean);\n    }   \n    \n    if (meal_type) {\n      recipies = recipies.filter( recipe => recipe.meal_type === meal_type);\n    }     \n\n    if (country) {\n      recipies = recipies.filter( recipe => recipe.country === country);\n    }  \n    if (cooking_time) {\n      recipies = recipies.filter( recipe => recipe.cooking_time == cooking_time);\n    }    \n    if (difficulty) {\n      recipies = recipies.filter( recipe => recipe.difficulty === difficulty);\n    }   \n    if (views) {\n      recipies = recipies.filter( recipe => recipe.views == views);\n    }   \n    if (food_type) {\n      recipies = recipies.filter( recipe => recipe.food_type === food_type);\n    }   \n\n    // if (ingredients) {\n    //   let ingredientsArray = ingredients.split(',');\n    //   recipies = recipies.filter(({ ingredients }) =>\n    //   ingredients.some(({ _id }) => ingredientsArray.includes(_id.toString()))\n    //   );\n    // }\n\n    return recipies;\n\n  }\n\n  async findByName(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({name: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }\n  async findByAuthor(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({author: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findByAv_rating(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({avg_rating: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findByIs_public(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({is_public: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findByMeal_type(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({meal_type: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findByCountry(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({country: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findByCooking_time(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({cooking_time: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findByDifficulty(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({difficulty: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findByViews(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({views: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findByFood_type(tag: string): Promise{\n    const recipiesData = await this.recipeModel.find({food_type: tag});\n    if (!recipiesData || recipiesData.length == 0) {\n      console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }  \n  async findMostViewed(): Promise{\n    const recipiesData = await this.recipeModel.find().sort({\"views\":-1}).limit(10);\n    if (!recipiesData || recipiesData.length == 0) {\n        console.log(\"Error: no data\");\n    }\n    return recipiesData;\n  }\n\n  async addComment(id: string, comment: any) { \n    let recipe: RecipeDocument = await this.recipeModel.findById(id); \n    recipe.comments.push(comment); \n    recipe.save(); \n    return recipe;\n  }\n\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterAuthDto.html":{"url":"classes/RegisterAuthDto.html","title":"class - RegisterAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-auth.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\nimport { LoginAuthDto } from './login-auth.dto';\n\nexport class RegisterAuthDto extends PartialType(LoginAuthDto) {\n    @IsNotEmpty()\n    user_name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/roles.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { User } from 'src/user/schemas/user.schema';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\nimport { Role } from '../models/role.enum';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const req = context.switchToHttp().getRequest();\n    const user = req.user as User;\n    return requiredRoles.some((role) => user.role?.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShoppingList.html":{"url":"classes/ShoppingList.html","title":"class - ShoppingList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShoppingList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shopping_list/schema/shopping_list.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                \n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shopping_list/schema/shopping_list.schema.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(undefined, ingredients, ['undefined'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shopping_list/schema/shopping_list.schema.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport mongoose, { ObjectId } from \"mongoose\";\n\n@Schema()\nexport class ShoppingList {\n\n\t@Prop({type: mongoose.Types.ObjectId, ref: 'User'})\n\t_id: ObjectId;\n\n\t@Prop(Array)\n\tingredients: [{\n\t\tingredient: {type: mongoose.Types.ObjectId, ref:'Ingredient'},\n\t\tquantity: number\n\t}] \n}\n\n\nexport const ShoppingListSchema = SchemaFactory.createForClass(ShoppingList);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ShoppingListController.html":{"url":"controllers/ShoppingListController.html","title":"controller - ShoppingListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ShoppingListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shopping_list/shopping_list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                shopping-list\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                upsertShoppingList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/shopping_list/shopping_list.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/shopping_list/shopping_list.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/shopping_list/shopping_list.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateShoppingListDto: UpdateShoppingListDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/shopping_list/shopping_list.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateShoppingListDto\n                                    \n                                                UpdateShoppingListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upsertShoppingList\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsertShoppingList(UpsertShoppingListDto: UpsertShoppingListDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, CompareIdGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/shopping_list/shopping_list.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    UpsertShoppingListDto\n                                    \n                                                UpsertShoppingListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, Headers, UseGuards, Request  } from '@nestjs/common';\nimport { ShoppingListService } from './shopping_list.service';\nimport { UpsertShoppingListDto } from './dto/upsert-shopping_list.dto';\nimport { UpdateShoppingListDto } from './dto/update-shopping_list.dto';\nimport { ParseObjectIdPipe } from 'src/utilities/parse-object-id-pipe.pipe';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { CompareIdGuard } from 'src/auth/guards/compare-id.guard';\n\n@Controller('shopping-list')\nexport class ShoppingListController {\n  constructor(private readonly shoppingListService: ShoppingListService) {}\n\n  @UseGuards(JwtAuthGuard, CompareIdGuard)\n  @Post()\n  async upsertShoppingList(@Body() UpsertShoppingListDto: UpsertShoppingListDto) {\n    return this.shoppingListService.upsertShoppingList(UpsertShoppingListDto);\n  }\n\n  @Get()\n  async findAll() {\n    return this.shoppingListService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id', ParseObjectIdPipe) id: string) {\n    return this.shoppingListService.findOne(id);\n  }\n\n  @Patch(':id')\n  async update(@Param('id') id: string, @Body() updateShoppingListDto: UpdateShoppingListDto) {\n    return this.shoppingListService.update(Number(id), updateShoppingListDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string) {\n    return this.shoppingListService.remove(Number(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ShoppingListModule.html":{"url":"modules/ShoppingListModule.html","title":"module - ShoppingListModule","body":"\n                   \n\n\n\n\n    Modules\n    ShoppingListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ShoppingListModule\n\n\n\ncluster_ShoppingListModule_providers\n\n\n\n\nShoppingListService\n\nShoppingListService\n\n\n\nShoppingListModule\n\nShoppingListModule\n\nShoppingListModule -->\n\nShoppingListService->ShoppingListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shopping_list/shopping_list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ShoppingListService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ShoppingListController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ShoppingListService } from './shopping_list.service';\nimport { ShoppingListController } from './shopping_list.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ShoppingList, ShoppingListSchema } from './schema/shopping_list.schema';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from 'src/auth/constants/jwt.constants';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: ShoppingList.name, schema: ShoppingListSchema }]),\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '1440h' },\n    })\n  ],\n  controllers: [ShoppingListController],\n  providers: [ShoppingListService]\n})\nexport class ShoppingListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShoppingListService.html":{"url":"injectables/ShoppingListService.html","title":"injectable - ShoppingListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ShoppingListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shopping_list/shopping_list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                    Async\n                                upsertShoppingList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(shoppingListModel: Model, jwtAuthService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/shopping_list/shopping_list.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        shoppingListModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtAuthService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/shopping_list/shopping_list.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shopping_list/shopping_list.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/shopping_list/shopping_list.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateShoppingListDto: UpdateShoppingListDto)\n                \n            \n\n\n            \n                \n                    Defined in src/shopping_list/shopping_list.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateShoppingListDto\n                                    \n                                                UpdateShoppingListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upsertShoppingList\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsertShoppingList(upsertShoppingListDto: UpsertShoppingListDto)\n                \n            \n\n\n            \n                \n                    Defined in src/shopping_list/shopping_list.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    upsertShoppingListDto\n                                    \n                                                UpsertShoppingListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport mongoose, { Model } from 'mongoose';\nimport { UpsertShoppingListDto } from './dto/upsert-shopping_list.dto';\nimport { UpdateShoppingListDto } from './dto/update-shopping_list.dto';\nimport { ShoppingList } from './schema/shopping_list.schema';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class ShoppingListService {\n\n  constructor( \n    @InjectModel(ShoppingList.name) private readonly shoppingListModel: Model,\n    private jwtAuthService:JwtService\n  ) {}\n\n  async upsertShoppingList(upsertShoppingListDto: UpsertShoppingListDto) {\n\n    const shoppingListFound = await this.shoppingListModel.find({'ingredients.ingredient':'63d0f9903dccc038d38d416c'});\n    return shoppingListFound;\n    // const shoppingListUpdated = await this.shoppingListModel.findOneAndUpdate();\n\n  }\n\n  async findAll(): Promise {\n    const shoppingListData = await this.shoppingListModel.find();\n    if (!shoppingListData || shoppingListData.length == 0) {\n        console.log(\"Error: no data\");\n    }\n    return shoppingListData;\n  }\n\n\n  async findOne(id: string) {\n\n    if (mongoose.Types.ObjectId.isValid(id)) {\n          const shoppingListData = await this.shoppingListModel.findById(id)\n          .populate({ path: 'ingredients.ingredient' })\n          .exec();\n    if (!shoppingListData) {\n        console.log(\"Error: no data\");\n    }\n    return shoppingListData;\n    }else {\n      console.log(\"Error: the id is not in a valid format\");\n    }\n\n  }\n\n  update(id: number, updateShoppingListDto: UpdateShoppingListDto) {\n    return `This action updates a #${id} shoppingList`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} shoppingList`;\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateFavoriteDto.html":{"url":"classes/UpdateFavoriteDto.html","title":"class - UpdateFavoriteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFavoriteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/favorites/dto/update-favorite.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateFavoriteDto } from './create-favorite.dto';\n\nexport class UpdateFavoriteDto extends PartialType(CreateFavoriteDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateGroupDto.html":{"url":"classes/UpdateGroupDto.html","title":"class - UpdateGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/dto/update-group.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateGroupDto } from './create-group.dto';\n\nexport class UpdateGroupDto extends PartialType(CreateGroupDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateIngredientDto.html":{"url":"classes/UpdateIngredientDto.html","title":"class - UpdateIngredientDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateIngredientDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ingredient/dto/update-ingredient.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateIngredientDto } from './create-ingredient.dto';\n\nexport class UpdateIngredientDto extends PartialType(CreateIngredientDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateNotificationDto.html":{"url":"classes/UpdateNotificationDto.html","title":"class - UpdateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/dto/update-notification.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateNotificationDto } from './create-notification.dto';\n\nexport class UpdateNotificationDto extends PartialType(CreateNotificationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRecipeDto.html":{"url":"classes/UpdateRecipeDto.html","title":"class - UpdateRecipeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRecipeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/dto/update-recipe.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateRecipeDto } from './create-recipe.dto';\n\nexport class UpdateRecipeDto extends PartialType(CreateRecipeDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateShoppingListDto.html":{"url":"classes/UpdateShoppingListDto.html","title":"class - UpdateShoppingListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateShoppingListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shopping_list/dto/update-shopping_list.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { UpsertShoppingListDto } from './upsert-shopping_list.dto';\n\nexport class UpdateShoppingListDto extends PartialType(UpsertShoppingListDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpsertShoppingListDto.html":{"url":"classes/UpsertShoppingListDto.html","title":"class - UpsertShoppingListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpsertShoppingListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shopping_list/dto/upsert-shopping_list.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                ingredients\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '63cb0277ee58877e63e36fcc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shopping_list/dto/upsert-shopping_list.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     [literal type]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shopping_list/dto/upsert-shopping_list.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport mongoose, { ObjectId } from \"mongoose\";\n\nexport class UpsertShoppingListDto {\n\n\t@ApiProperty( {example: '63cb0277ee58877e63e36fcc'})\n\t_id: ObjectId;\n\n    @ApiProperty( {example:''})\n\tingredients: [{\n\t\tingredient: {type: mongoose.Types.ObjectId, ref:'Ingredient'},\n\t\tquantity: number\n\t}] \n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                badges\n                            \n                            \n                                email\n                            \n                            \n                                favorites\n                            \n                            \n                                fisrt_name\n                            \n                            \n                                groups\n                            \n                            \n                                last_name\n                            \n                            \n                                notifications_list\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        badges\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['Object'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favorites\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['Object'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fisrt_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        groups\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['Object'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifications_list\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['Object'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\nimport { Role } from \"src/auth/models/role.enum\";\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class Favorites{\n    @Prop()\n    _id: string; \n}\n\n@Schema()\nexport class Badges{\n    @Prop()\n    name: string;\n}\n\n\n@Schema()\nexport class Notification_list{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class Groups{\n    @Prop()\n    name: string;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    fisrt_name: string;\n\n    @Prop()\n    last_name: string;\n\n    @Prop({ required: true })\n    user_name: string;\n\n    @Prop({ required: true })\n    email: string;\n\n    @Prop({ required: true })\n    password: string;\n\n    @Prop({ required: true, default: Role.USER })\n    role: Role;\n\n    @Prop([Object])\n    favorites: Array;\n\n    @Prop()\n    address: string;\n\n    @Prop([Object])\n    badges: Array;\n\n    @Prop([Object])\n    notifications_list: Array;\n\n    @Prop([Object])\n    groups: Array;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { ApiBearerAuth } from '@nestjs/swagger';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.create(createUserDto);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  findAll() {\n    return this.userService.findAll();\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.userService.findOne(id);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.userService.update(id, updateUserDto);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserSchema, User } from './schemas/user.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }])\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService]\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport mongoose, { Model } from 'mongoose';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User, UserDocument } from './schemas/user.schema';\n\n@Injectable()\nexport class UserService {\n\n  constructor(\n    @InjectModel(User.name) private readonly userModel: Model,\n  ) {}\n\n  async create(createUserDto: CreateUserDto) {\n    const newUser = new this.userModel(createUserDto);\n    return await newUser.save();\n  }\n\n  async findAll(): Promise {\n    const usersData = await this.userModel.find();\n    if (!usersData || usersData.length == 0) {\n        console.log(\"Error: no data\");\n    }\n    return usersData;\n  }\n\n  async findOne(id: string): Promise {\n    if (mongoose.Types.ObjectId.isValid(id)) {\n          const userData = await this.userModel.findById(id);\n    if (!userData) {\n        console.log(\"Error: no data\");\n    }\n    return userData;\n    }else {\n      console.log(\"Error: the id is not in a valid format\");\n    }\n  }\n\n  async update(id: string, updateUserDto: UpdateUserDto) {\n    const updatedUser = await this.userModel.findByIdAndUpdate(id,updateUserDto);\n    return updatedUser;\n  }\n\n  async remove(id: string) {\n    const removedUser = await this.userModel.findByIdAndDelete(id);\n    return removedUser;\n  }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/constants/jwt.constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login-auth.dto.ts\n            \n            class\n            LoginAuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register-auth.dto.ts\n            \n            class\n            RegisterAuthDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/compare-id.guard.ts\n            \n            guard\n            CompareIdGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/schemas/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/favorites/dto/create-favorite.dto.ts\n            \n            class\n            CreateFavoriteDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/favorites/dto/update-favorite.dto.ts\n            \n            class\n            UpdateFavoriteDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/favorites/favorites.controller.ts\n            \n            controller\n            FavoritesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/favorites/favorites.service.ts\n            \n            injectable\n            FavoritesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/favorites/schemas/favorite.entity.ts\n            \n            class\n            Favorite\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/group/dto/create-group.dto.ts\n            \n            class\n            CreateGroupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/group/dto/filter-group.dto.ts\n            \n            class\n            GetGroupFilterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/group/dto/update-group.dto.ts\n            \n            class\n            UpdateGroupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/group/group.controller.ts\n            \n            controller\n            GroupController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/group/group.service.ts\n            \n            injectable\n            GroupService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/group/group.service.ts\n            \n            variable\n            mongoose\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/group/schemas/group.schema.ts\n            \n            class\n            Group\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/group/schemas/group.schema.ts\n            \n            variable\n            GroupSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/ingredient/dto/create-ingredient.dto.ts\n            \n            class\n            CreateIngredientDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/ingredient/dto/update-ingredient.dto.ts\n            \n            class\n            UpdateIngredientDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/ingredient/ingredient.controller.ts\n            \n            controller\n            IngredientController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/ingredient/ingredient.service.ts\n            \n            injectable\n            IngredientService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/ingredient/schemas/ingredient.schema.ts\n            \n            class\n            Ingredient\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/ingredient/schemas/ingredient.schema.ts\n            \n            variable\n            IngredientSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notifications/dto/create-notification.dto.ts\n            \n            class\n            CreateNotificationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/notifications/dto/update-notification.dto.ts\n            \n            class\n            UpdateNotificationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notifications/notifications.controller.ts\n            \n            controller\n            NotificationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/notifications/notifications.service.ts\n            \n            injectable\n            NotificationService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/notifications/schemas/notification.schema.ts\n            \n            class\n            Notification\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/notifications/schemas/notification.schema.ts\n            \n            variable\n            NotificationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/recipe/dto/add-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/recipe/dto/create-recipe.dto.ts\n            \n            class\n            CommentNested\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/recipe/dto/create-recipe.dto.ts\n            \n            class\n            CreateRecipeDto\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/recipe/dto/create-recipe.dto.ts\n            \n            class\n            IngredientNested\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/recipe/dto/filter-recipe.dto.ts\n            \n            class\n            GetRecipiesFilterDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/recipe/dto/update-recipe.dto.ts\n            \n            class\n            UpdateRecipeDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/recipe/recipe.controller.ts\n            \n            controller\n            RecipeController\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/recipe/recipe.service.ts\n            \n            injectable\n            RecipeService\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/recipe/schemas/comment.schema.ts\n            \n            class\n            RecipeComment\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/recipe/schemas/comment.schema.ts\n            \n            variable\n            CommentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/recipe/schemas/recipe.schema.ts\n            \n            class\n            Recipe\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/recipe/schemas/recipe.schema.ts\n            \n            variable\n            RecipeSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shopping_list/dto/update-shopping_list.dto.ts\n            \n            class\n            UpdateShoppingListDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shopping_list/dto/upsert-shopping_list.dto.ts\n            \n            class\n            UpsertShoppingListDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shopping_list/schema/shopping_list.schema.ts\n            \n            class\n            ShoppingList\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shopping_list/schema/shopping_list.schema.ts\n            \n            variable\n            ShoppingListSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shopping_list/shopping_list.controller.ts\n            \n            controller\n            ShoppingListController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/shopping_list/shopping_list.service.ts\n            \n            injectable\n            ShoppingListService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/schemas/user.schema.ts\n            \n            class\n            Badges\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/schemas/user.schema.ts\n            \n            class\n            Favorites\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/schemas/user.schema.ts\n            \n            class\n            Groups\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/schemas/user.schema.ts\n            \n            class\n            Notification_list\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/user/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/utilities/parse-object-id-pipe.pipe.ts\n            \n            injectable\n            ParseObjectIdPipe\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.1\n        \n            @nestjs/mongoose : ^9.2.1\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.4\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            dotenv : ^16.0.3\n        \n            mongoose : ^6.8.4\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.6.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/models/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 SYSTEM\n                            \n                        \n                        \n                            \n                                Value : system\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ yarn installRunning the app\n# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\n# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FavoritesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GroupModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IngredientModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecipeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ShoppingListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_FavoritesModule\n\n\n\ncluster_FavoritesModule_providers\n\n\n\ncluster_GroupModule\n\n\n\ncluster_GroupModule_providers\n\n\n\ncluster_IngredientModule\n\n\n\ncluster_IngredientModule_providers\n\n\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_providers\n\n\n\ncluster_RecipeModule\n\n\n\ncluster_RecipeModule_providers\n\n\n\ncluster_ShoppingListModule\n\n\n\ncluster_ShoppingListModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nFavoritesModule\n\nFavoritesModule\n\nAppModule -->\n\nFavoritesModule->AppModule\n\n\n\n\n\nGroupModule\n\nGroupModule\n\nAppModule -->\n\nGroupModule->AppModule\n\n\n\n\n\nIngredientModule\n\nIngredientModule\n\nAppModule -->\n\nIngredientModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nRecipeModule\n\nRecipeModule\n\nAppModule -->\n\nRecipeModule->AppModule\n\n\n\n\n\nShoppingListModule\n\nShoppingListModule\n\nAppModule -->\n\nShoppingListModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nFavoritesService\n\nFavoritesService\n\nFavoritesModule -->\n\nFavoritesService->FavoritesModule\n\n\n\n\n\nGroupService\n\nGroupService\n\nGroupModule -->\n\nGroupService->GroupModule\n\n\n\n\n\nIngredientService\n\nIngredientService\n\nIngredientModule -->\n\nIngredientService->IngredientModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationsModule -->\n\nNotificationService->NotificationsModule\n\n\n\n\n\nRecipeService\n\nRecipeService\n\nRecipeModule -->\n\nRecipeService->RecipeModule\n\n\n\n\n\nShoppingListService\n\nShoppingListService\n\nShoppingListModule -->\n\nShoppingListService->ShoppingListModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    34 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CommentDocument   (src/.../comment.schema.ts)\n                        \n                        \n                            GroupDocument   (src/.../group.schema.ts)\n                        \n                        \n                            IngredientDocument   (src/.../ingredient.schema.ts)\n                        \n                        \n                            NotificationDocument   (src/.../notification.schema.ts)\n                        \n                        \n                            RecipeDocument   (src/.../recipe.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/recipe/schemas/comment.schema.ts\n    \n    \n        \n            \n                \n                    \n                    CommentDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/group/schemas/group.schema.ts\n    \n    \n        \n            \n                \n                    \n                    GroupDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/ingredient/schemas/ingredient.schema.ts\n    \n    \n        \n            \n                \n                    \n                    IngredientDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/notifications/schemas/notification.schema.ts\n    \n    \n        \n            \n                \n                    \n                    NotificationDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/recipe/schemas/recipe.schema.ts\n    \n    \n        \n            \n                \n                    \n                    RecipeDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/user/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CommentSchema   (src/.../comment.schema.ts)\n                        \n                        \n                            GroupSchema   (src/.../group.schema.ts)\n                        \n                        \n                            IngredientSchema   (src/.../ingredient.schema.ts)\n                        \n                        \n                            jwtConstants   (src/.../jwt.constants.ts)\n                        \n                        \n                            mongoose   (src/.../group.service.ts)\n                        \n                        \n                            NotificationSchema   (src/.../notification.schema.ts)\n                        \n                        \n                            RecipeSchema   (src/.../recipe.schema.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            ShoppingListSchema   (src/.../shopping_list.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/recipe/schemas/comment.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CommentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(RecipeComment)\n                    \n                \n\n\n        \n    \n\n    src/group/schemas/group.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GroupSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Group)\n                    \n                \n\n\n        \n    \n\n    src/ingredient/schemas/ingredient.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IngredientSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Ingredient)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants/jwt.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.SECRET\n}\n                    \n                \n\n\n        \n    \n\n    src/group/group.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mongoose\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('mongoose')\n                    \n                \n\n\n        \n    \n\n    src/notifications/schemas/notification.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NotificationSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Notification)\n                    \n                \n\n\n        \n    \n\n    src/recipe/schemas/recipe.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RecipeSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Recipe)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/shopping_list/schema/shopping_list.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ShoppingListSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ShoppingList)\n                    \n                \n\n\n        \n    \n\n    src/user/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
